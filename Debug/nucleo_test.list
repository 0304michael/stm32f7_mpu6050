
nucleo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007404  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08007608  08007608  00017608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007900  08007900  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007900  08007900  00017900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007908  08007908  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  200001e0  08007aec  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08007aec  00020788  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001430c  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b61  00000000  00000000  00034516  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  00037078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00038080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029d93  00000000  00000000  00038f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e290  00000000  00000000  00062cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff417  00000000  00000000  00070f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017035a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de0  00000000  00000000  001703d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080075ec 	.word	0x080075ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080075ec 	.word	0x080075ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_I2C1_Init+0x78>)
 80005f6:	4a1d      	ldr	r2, [pc, #116]	; (800066c <MX_I2C1_Init+0x7c>)
 80005f8:	601a      	str	r2, [r3, #0]
  //hi2c1.Init.ClockSpeed = 400000;
  //hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Instance = I2C1;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_I2C1_Init+0x78>)
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <MX_I2C1_Init+0x7c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_I2C1_Init+0x78>)
 8000602:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <MX_I2C1_Init+0x80>)
 8000604:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_I2C1_Init+0x78>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_I2C1_Init+0x78>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_I2C1_Init+0x78>)
 8000614:	2201      	movs	r2, #1
 8000616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_I2C1_Init+0x78>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C1_Init+0x78>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_I2C1_Init+0x78>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C1_Init+0x78>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <MX_I2C1_Init+0x78>)
 8000632:	f001 fd8f 	bl	8002154 <HAL_I2C_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_I2C1_Init+0x50>
  {
    Error_Handler();
 800063c:	f000 faac 	bl	8000b98 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000640:	2100      	movs	r1, #0
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <MX_I2C1_Init+0x78>)
 8000644:	f002 fa60 	bl	8002b08 <HAL_I2CEx_ConfigAnalogFilter>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C1_Init+0x62>
    {
      Error_Handler();
 800064e:	f000 faa3 	bl	8000b98 <Error_Handler>
    }
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C1_Init+0x78>)
 8000656:	f002 faa2 	bl	8002b9e <HAL_I2CEx_ConfigDigitalFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x74>
    {
      Error_Handler();
 8000660:	f000 fa9a 	bl	8000b98 <Error_Handler>
    }
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000208 	.word	0x20000208
 800066c:	40005400 	.word	0x40005400
 8000670:	20303e5d 	.word	0x20303e5d

08000674 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <HAL_I2C_MspInit+0x7c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d128      	bne.n	80006e8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <HAL_I2C_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <HAL_I2C_MspInit+0x80>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <HAL_I2C_MspInit+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8    ------> I2C2_SCL
    PB9    ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b4:	2312      	movs	r3, #18
 80006b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006c0:	2304      	movs	r3, #4
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <HAL_I2C_MspInit+0x84>)
 80006cc:	f001 fb7e 	bl	8001dcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HAL_I2C_MspInit+0x80>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_I2C_MspInit+0x80>)
 80006d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_I2C_MspInit+0x80>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40005400 	.word	0x40005400
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020400 	.word	0x40020400

080006fc <__io_putchar>:
#else
 #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1);
 8000704:	1d39      	adds	r1, r7, #4
 8000706:	2301      	movs	r3, #1
 8000708:	2201      	movs	r2, #1
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <__io_putchar+0x20>)
 800070c:	f003 fd56 	bl	80041bc <HAL_UART_Transmit>
 return ch;
 8000710:	687b      	ldr	r3, [r7, #4]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000258 	.word	0x20000258

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f000 fd80 	bl	800122a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f837 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f000 f973 	bl	8000a18 <MX_GPIO_Init>
  MX_ETH_Init();
 8000732:	f000 f8cb 	bl	80008cc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000736:	f000 f911 	bl	800095c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800073a:	f000 f93f 	bl	80009bc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800073e:	f7ff ff57 	bl	80005f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8000742:	bf00      	nop
 8000744:	4812      	ldr	r0, [pc, #72]	; (8000790 <main+0x70>)
 8000746:	f000 fa2b 	bl	8000ba0 <MPU6050_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d0f9      	beq.n	8000744 <main+0x24>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8000750:	4910      	ldr	r1, [pc, #64]	; (8000794 <main+0x74>)
 8000752:	480f      	ldr	r0, [pc, #60]	; (8000790 <main+0x70>)
 8000754:	f000 fa7c 	bl	8000c50 <MPU6050_Read_Accel>
		ax=MPU6050.Ax;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <main+0x74>)
 800075a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800075e:	e9c7 3404 	strd	r3, r4, [r7, #16]
		ay=MPU6050.Ay;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <main+0x74>)
 8000764:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000768:	e9c7 3402 	strd	r3, r4, [r7, #8]
		az=MPU6050.Az;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <main+0x74>)
 800076e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8000772:	e9c7 3400 	strd	r3, r4, [r7]
		printf("x: %.3f   y: %.3f   z: %3f\n",&ax,&ay,&az);
 8000776:	463b      	mov	r3, r7
 8000778:	f107 0208 	add.w	r2, r7, #8
 800077c:	f107 0110 	add.w	r1, r7, #16
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <main+0x78>)
 8000782:	f005 f8d5 	bl	8005930 <iprintf>
		HAL_Delay(1000);
 8000786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078a:	f000 fdab 	bl	80012e4 <HAL_Delay>
  {
 800078e:	e7df      	b.n	8000750 <main+0x30>
 8000790:	20000208 	.word	0x20000208
 8000794:	200006e0 	.word	0x200006e0
 8000798:	08007608 	.word	0x08007608

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b8      	sub	sp, #224	; 0xe0
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007a6:	2234      	movs	r2, #52	; 0x34
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 fc7e 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2290      	movs	r2, #144	; 0x90
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 fc6f 	bl	80050ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ce:	f002 fb7b 	bl	8002ec8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <SystemClock_Config+0x124>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a3a      	ldr	r2, [pc, #232]	; (80008c0 <SystemClock_Config+0x124>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <SystemClock_Config+0x124>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ea:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <SystemClock_Config+0x128>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f2:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <SystemClock_Config+0x128>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <SystemClock_Config+0x128>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000806:	2301      	movs	r3, #1
 8000808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800080c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000822:	2304      	movs	r3, #4
 8000824:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000828:	2360      	movs	r3, #96	; 0x60
 800082a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fba2 	bl	8002f88 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800084a:	f000 f9a5 	bl	8000b98 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084e:	f002 fb4b 	bl	8002ee8 <HAL_PWREx_EnableOverDrive>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000858:	f000 f99e 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2302      	movs	r3, #2
 8000864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800087c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000880:	2103      	movs	r1, #3
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fe2e 	bl	80034e4 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800088e:	f000 f983 	bl	8000b98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <SystemClock_Config+0x12c>)
 8000894:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000896:	2300      	movs	r3, #0
 8000898:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800089a:	2300      	movs	r3, #0
 800089c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 f813 	bl	80038d4 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80008b4:	f000 f970 	bl	8000b98 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	37e0      	adds	r7, #224	; 0xe0
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000
 80008c8:	00204100 	.word	0x00204100

080008cc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008d0:	4b20      	ldr	r3, [pc, #128]	; (8000954 <MX_ETH_Init+0x88>)
 80008d2:	4a21      	ldr	r2, [pc, #132]	; (8000958 <MX_ETH_Init+0x8c>)
 80008d4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_ETH_Init+0x88>)
 80008d8:	2201      	movs	r2, #1
 80008da:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_ETH_Init+0x88>)
 80008de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008e2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_ETH_Init+0x88>)
 80008e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ea:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_ETH_Init+0x88>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_ETH_Init+0x88>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_ETH_Init+0x88>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	3301      	adds	r3, #1
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_ETH_Init+0x88>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	3302      	adds	r3, #2
 800090a:	22e1      	movs	r2, #225	; 0xe1
 800090c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_ETH_Init+0x88>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	3303      	adds	r3, #3
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_ETH_Init+0x88>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	3304      	adds	r3, #4
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_ETH_Init+0x88>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	3305      	adds	r3, #5
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_ETH_Init+0x88>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_ETH_Init+0x88>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_ETH_Init+0x88>)
 800093a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800093e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_ETH_Init+0x88>)
 8000942:	f000 fdd7 	bl	80014f4 <HAL_ETH_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ETH_Init+0x84>
  {
    Error_Handler();
 800094c:	f000 f924 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000738 	.word	0x20000738
 8000958:	40028000 	.word	0x40028000

0800095c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 8000964:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 80009a0:	f003 fbbe 	bl	8004120 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009aa:	f000 f8f5 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000258 	.word	0x20000258
 80009b8:	40004800 	.word	0x40004800

080009bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2206      	movs	r2, #6
 80009cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	2202      	movs	r2, #2
 80009de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	f002 f919 	bl	8002c36 <HAL_PCD_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f000 f8c5 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200002d8 	.word	0x200002d8

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b54      	ldr	r3, [pc, #336]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a53      	ldr	r2, [pc, #332]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b51      	ldr	r3, [pc, #324]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	4b4e      	ldr	r3, [pc, #312]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a4d      	ldr	r2, [pc, #308]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a4c:	f043 0320 	orr.w	r3, r3, #32
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b4b      	ldr	r3, [pc, #300]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0320 	and.w	r3, r3, #32
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5e:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a47      	ldr	r2, [pc, #284]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b45      	ldr	r3, [pc, #276]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b42      	ldr	r3, [pc, #264]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a41      	ldr	r2, [pc, #260]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b3f      	ldr	r3, [pc, #252]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a3b      	ldr	r2, [pc, #236]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a35      	ldr	r2, [pc, #212]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <MX_GPIO_Init+0x168>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000adc:	4829      	ldr	r0, [pc, #164]	; (8000b84 <MX_GPIO_Init+0x16c>)
 8000ade:	f001 fb1f 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	4828      	ldr	r0, [pc, #160]	; (8000b88 <MX_GPIO_Init+0x170>)
 8000ae8:	f001 fb1a 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <MX_GPIO_Init+0x174>)
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <MX_GPIO_Init+0x178>)
 8000b02:	f001 f963 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b06:	2303      	movs	r3, #3
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0a:	2312      	movs	r3, #18
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b16:	2304      	movs	r3, #4
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <MX_GPIO_Init+0x17c>)
 8000b22:	f001 f953 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b26:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4811      	ldr	r0, [pc, #68]	; (8000b84 <MX_GPIO_Init+0x16c>)
 8000b40:	f001 f944 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b44:	2340      	movs	r3, #64	; 0x40
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480b      	ldr	r0, [pc, #44]	; (8000b88 <MX_GPIO_Init+0x170>)
 8000b5c:	f001 f936 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_GPIO_Init+0x170>)
 8000b74:	f001 f92a 	bl	8001dcc <HAL_GPIO_Init>

}
 8000b78:	bf00      	nop
 8000b7a:	3730      	adds	r7, #48	; 0x30
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400
 8000b88:	40021800 	.word	0x40021800
 8000b8c:	10110000 	.word	0x10110000
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40021400 	.word	0x40021400

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <Error_Handler+0x6>

08000ba0 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af04      	add	r7, sp, #16
 8000ba6:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	9302      	str	r3, [sp, #8]
 8000bac:	2301      	movs	r3, #1
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	f107 030f 	add.w	r3, r7, #15
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	2275      	movs	r2, #117	; 0x75
 8000bba:	21d0      	movs	r1, #208	; 0xd0
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f001 fc6d 	bl	800249c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	2b68      	cmp	r3, #104	; 0x68
 8000bc6:	d13d      	bne.n	8000c44 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	9302      	str	r3, [sp, #8]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	f107 030e 	add.w	r3, r7, #14
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2301      	movs	r3, #1
 8000bdc:	226b      	movs	r2, #107	; 0x6b
 8000bde:	21d0      	movs	r1, #208	; 0xd0
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f001 fb47 	bl	8002274 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000be6:	2307      	movs	r3, #7
 8000be8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000bea:	2364      	movs	r3, #100	; 0x64
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	f107 030e 	add.w	r3, r7, #14
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	2219      	movs	r2, #25
 8000bfc:	21d0      	movs	r1, #208	; 0xd0
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f001 fb38 	bl	8002274 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000c08:	2364      	movs	r3, #100	; 0x64
 8000c0a:	9302      	str	r3, [sp, #8]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	f107 030e 	add.w	r3, r7, #14
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2301      	movs	r3, #1
 8000c18:	221c      	movs	r2, #28
 8000c1a:	21d0      	movs	r1, #208	; 0xd0
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f001 fb29 	bl	8002274 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000c26:	2364      	movs	r3, #100	; 0x64
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	f107 030e 	add.w	r3, r7, #14
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	221b      	movs	r2, #27
 8000c38:	21d0      	movs	r1, #208	; 0xd0
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f001 fb1a 	bl	8002274 <HAL_I2C_Mem_Write>
        return 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e000      	b.n	8000c46 <MPU6050_Init+0xa6>
    }
    return 1;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af04      	add	r7, sp, #16
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	2306      	movs	r3, #6
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	223b      	movs	r2, #59	; 0x3b
 8000c6c:	21d0      	movs	r1, #208	; 0xd0
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f001 fc14 	bl	800249c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000c74:	7a3b      	ldrb	r3, [r7, #8]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	7a7b      	ldrb	r3, [r7, #9]
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000c86:	7abb      	ldrb	r3, [r7, #10]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000c98:	7b3b      	ldrb	r3, [r7, #12]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb0:	ee07 3a90 	vmov	s15, r3
 8000cb4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cb8:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000d08 <MPU6050_Read_Accel+0xb8>
 8000cbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	ed83 7b02 	vstr	d7, [r3, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cd4:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000d08 <MPU6050_Read_Accel+0xb8>
 8000cd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	ed83 7b04 	vstr	d7, [r3, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ce8:	ee07 3a90 	vmov	s15, r3
 8000cec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cf0:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8000d10 <MPU6050_Read_Accel+0xc0>
 8000cf4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	00000000 	.word	0x00000000
 8000d0c:	40d00000 	.word	0x40d00000
 8000d10:	00000000 	.word	0x00000000
 8000d14:	40cc2900 	.word	0x40cc2900

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800

08000d60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	; 0x38
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a4e      	ldr	r2, [pc, #312]	; (8000eb8 <HAL_ETH_MspInit+0x158>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	f040 8096 	bne.w	8000eb0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d84:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d98:	623b      	str	r3, [r7, #32]
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a46      	ldr	r2, [pc, #280]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000da2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a40      	ldr	r2, [pc, #256]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000dba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a3a      	ldr	r2, [pc, #232]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a34      	ldr	r2, [pc, #208]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a28      	ldr	r2, [pc, #160]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_ETH_MspInit+0x15c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e2c:	2332      	movs	r3, #50	; 0x32
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3c:	230b      	movs	r3, #11
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	481e      	ldr	r0, [pc, #120]	; (8000ec0 <HAL_ETH_MspInit+0x160>)
 8000e48:	f000 ffc0 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e4c:	2386      	movs	r3, #134	; 0x86
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <HAL_ETH_MspInit+0x164>)
 8000e68:	f000 ffb0 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7e:	230b      	movs	r3, #11
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <HAL_ETH_MspInit+0x168>)
 8000e8a:	f000 ff9f 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea0:	230b      	movs	r3, #11
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4808      	ldr	r0, [pc, #32]	; (8000ecc <HAL_ETH_MspInit+0x16c>)
 8000eac:	f000 ff8e 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3738      	adds	r7, #56	; 0x38
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40028000 	.word	0x40028000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40021800 	.word	0x40021800

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_UART_MspInit+0x7c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d128      	bne.n	8000f44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_UART_MspInit+0x80>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <HAL_UART_MspInit+0x80>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_UART_MspInit+0x80>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_UART_MspInit+0x80>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <HAL_UART_MspInit+0x80>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_UART_MspInit+0x80>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f34:	2307      	movs	r3, #7
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_UART_MspInit+0x84>)
 8000f40:	f000 ff44 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40004800 	.word	0x40004800
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020c00 	.word	0x40020c00

08000f58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f78:	d141      	bne.n	8000ffe <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_PCD_MspInit+0xb0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a22      	ldr	r2, [pc, #136]	; (8001008 <HAL_PCD_MspInit+0xb0>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_PCD_MspInit+0xb0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f92:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	4817      	ldr	r0, [pc, #92]	; (800100c <HAL_PCD_MspInit+0xb4>)
 8000fb0:	f000 ff0c 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4810      	ldr	r0, [pc, #64]	; (800100c <HAL_PCD_MspInit+0xb4>)
 8000fca:	f000 feff 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_PCD_MspInit+0xb0>)
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_PCD_MspInit+0xb0>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	6353      	str	r3, [r2, #52]	; 0x34
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_PCD_MspInit+0xb0>)
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_PCD_MspInit+0xb0>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_PCD_MspInit+0xb0>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_PCD_MspInit+0xb0>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f922 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e00a      	b.n	800108c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001076:	f3af 8000 	nop.w
 800107a:	4601      	mov	r1, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	60ba      	str	r2, [r7, #8]
 8001082:	b2ca      	uxtb	r2, r1
 8001084:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3301      	adds	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	429a      	cmp	r2, r3
 8001092:	dbf0      	blt.n	8001076 <_read+0x12>
	}

return len;
 8001094:	687b      	ldr	r3, [r7, #4]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	e009      	b.n	80010c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	60ba      	str	r2, [r7, #8]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fb1f 	bl	80006fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbf1      	blt.n	80010b0 <_write+0x12>
	}
	return len;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_close>:

int _close(int file)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
	return -1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_isatty>:

int _isatty(int file)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	return 1;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
	return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f003 ff72 	bl	8005058 <__errno>
 8001174:	4602      	mov	r2, r0
 8001176:	230c      	movs	r3, #12
 8001178:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20080000 	.word	0x20080000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	200001fc 	.word	0x200001fc
 80011a8:	20000788 	.word	0x20000788

080011ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <SystemInit+0x28>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <SystemInit+0x28>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SystemInit+0x28>)
 80011c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c6:	609a      	str	r2, [r3, #8]
#endif
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001210 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011de:	e003      	b.n	80011e8 <LoopCopyDataInit>

080011e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011e6:	3104      	adds	r1, #4

080011e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011f0:	d3f6      	bcc.n	80011e0 <CopyDataInit>
  ldr  r2, =_sbss
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011f4:	e002      	b.n	80011fc <LoopFillZerobss>

080011f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011f8:	f842 3b04 	str.w	r3, [r2], #4

080011fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001200:	d3f9      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001202:	f7ff ffd3 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001206:	f003 ff2d 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120a:	f7ff fa89 	bl	8000720 <main>
  bx  lr    
 800120e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001210:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001214:	08007910 	.word	0x08007910
  ldr  r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800121c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001220:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001224:	20000788 	.word	0x20000788

08001228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC_IRQHandler>

0800122a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122e:	2003      	movs	r0, #3
 8001230:	f000 f92c 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001234:	2000      	movs	r0, #0
 8001236:	f000 f805 	bl	8001244 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800123a:	f7ff fd6d 	bl	8000d18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f939 	bl	80014da <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f90f 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000000 	.word	0x20000000
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000780 	.word	0x20000780

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000780 	.word	0x20000780

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff ffee 	bl	80012cc <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_Delay+0x40>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffde 	bl	80012cc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
  {
  }
}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000008 	.word	0x20000008

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <__NVIC_SetPriorityGrouping+0x40>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	4313      	orrs	r3, r2
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x40>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	05fa0000 	.word	0x05fa0000

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff47 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff5c 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff8e 	bl	80013e0 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffb0 	bl	8001448 <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001504:	4ba9      	ldr	r3, [pc, #676]	; (80017ac <HAL_ETH_Init+0x2b8>)
 8001506:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e183      	b.n	8001822 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fc16 	bl	8000d60 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001534:	4b9e      	ldr	r3, [pc, #632]	; (80017b0 <HAL_ETH_Init+0x2bc>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	4a9d      	ldr	r2, [pc, #628]	; (80017b0 <HAL_ETH_Init+0x2bc>)
 800153a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153e:	6453      	str	r3, [r2, #68]	; 0x44
 8001540:	4b9b      	ldr	r3, [pc, #620]	; (80017b0 <HAL_ETH_Init+0x2bc>)
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800154c:	4b99      	ldr	r3, [pc, #612]	; (80017b4 <HAL_ETH_Init+0x2c0>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a98      	ldr	r2, [pc, #608]	; (80017b4 <HAL_ETH_Init+0x2c0>)
 8001552:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001556:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001558:	4b96      	ldr	r3, [pc, #600]	; (80017b4 <HAL_ETH_Init+0x2c0>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4994      	ldr	r1, [pc, #592]	; (80017b4 <HAL_ETH_Init+0x2c0>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800157e:	f7ff fea5 	bl	80012cc <HAL_GetTick>
 8001582:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001584:	e011      	b.n	80015aa <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001586:	f7ff fea1 	bl	80012cc <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001594:	d909      	bls.n	80015aa <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e13b      	b.n	8001822 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e4      	bne.n	8001586 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f023 031c 	bic.w	r3, r3, #28
 80015ca:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80015cc:	f002 f94e 	bl	800386c <HAL_RCC_GetHCLKFreq>
 80015d0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4a78      	ldr	r2, [pc, #480]	; (80017b8 <HAL_ETH_Init+0x2c4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d908      	bls.n	80015ec <HAL_ETH_Init+0xf8>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4a77      	ldr	r2, [pc, #476]	; (80017bc <HAL_ETH_Init+0x2c8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d804      	bhi.n	80015ec <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	e027      	b.n	800163c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	4a73      	ldr	r2, [pc, #460]	; (80017bc <HAL_ETH_Init+0x2c8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d908      	bls.n	8001606 <HAL_ETH_Init+0x112>
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	4a72      	ldr	r2, [pc, #456]	; (80017c0 <HAL_ETH_Init+0x2cc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d804      	bhi.n	8001606 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f043 030c 	orr.w	r3, r3, #12
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	e01a      	b.n	800163c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4a6d      	ldr	r2, [pc, #436]	; (80017c0 <HAL_ETH_Init+0x2cc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d903      	bls.n	8001616 <HAL_ETH_Init+0x122>
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	4a6c      	ldr	r2, [pc, #432]	; (80017c4 <HAL_ETH_Init+0x2d0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d911      	bls.n	800163a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4a6a      	ldr	r2, [pc, #424]	; (80017c4 <HAL_ETH_Init+0x2d0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d908      	bls.n	8001630 <HAL_ETH_Init+0x13c>
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4a69      	ldr	r2, [pc, #420]	; (80017c8 <HAL_ETH_Init+0x2d4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d804      	bhi.n	8001630 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e005      	b.n	800163c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	e000      	b.n	800163c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800163a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001644:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001648:	2100      	movs	r1, #0
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f956 	bl	80018fc <HAL_ETH_WritePHYRegister>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800165a:	6939      	ldr	r1, [r7, #16]
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f9b3 	bl	80019c8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0d9      	b.n	8001822 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800166e:	20ff      	movs	r0, #255	; 0xff
 8001670:	f7ff fe38 	bl	80012e4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a7 	beq.w	80017cc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800167e:	f7ff fe25 	bl	80012cc <HAL_GetTick>
 8001682:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	461a      	mov	r2, r3
 800168a:	2101      	movs	r1, #1
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f8cd 	bl	800182c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001692:	f7ff fe1b 	bl	80012cc <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d90f      	bls.n	80016c4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f98c 	bl	80019c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e0ae      	b.n	8001822 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0da      	beq.n	8001684 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80016ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d2:	2100      	movs	r1, #0
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f911 	bl	80018fc <HAL_ETH_WritePHYRegister>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00b      	beq.n	80016f8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016e4:	6939      	ldr	r1, [r7, #16]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f96e 	bl	80019c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016f4:	2301      	movs	r3, #1
 80016f6:	e094      	b.n	8001822 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80016f8:	f7ff fde8 	bl	80012cc <HAL_GetTick>
 80016fc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	461a      	mov	r2, r3
 8001704:	2101      	movs	r1, #1
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f890 	bl	800182c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800170c:	f7ff fdde 	bl	80012cc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d90f      	bls.n	800173e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001722:	6939      	ldr	r1, [r7, #16]
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f94f 	bl	80019c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e071      	b.n	8001822 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0da      	beq.n	80016fe <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	461a      	mov	r2, r3
 800174e:	211f      	movs	r1, #31
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f86b 	bl	800182c <HAL_ETH_ReadPHYRegister>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00b      	beq.n	8001774 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001760:	6939      	ldr	r1, [r7, #16]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f930 	bl	80019c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001770:	2301      	movs	r3, #1
 8001772:	e056      	b.n	8001822 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	e002      	b.n	800178e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	e037      	b.n	8001810 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	e032      	b.n	8001810 <HAL_ETH_Init+0x31c>
 80017aa:	bf00      	nop
 80017ac:	03938700 	.word	0x03938700
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	01312cff 	.word	0x01312cff
 80017bc:	02160ebf 	.word	0x02160ebf
 80017c0:	039386ff 	.word	0x039386ff
 80017c4:	05f5e0ff 	.word	0x05f5e0ff
 80017c8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017dc:	4313      	orrs	r3, r2
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	2100      	movs	r1, #0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f889 	bl	80018fc <HAL_ETH_WritePHYRegister>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00b      	beq.n	8001808 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f8e6 	bl	80019c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e00c      	b.n	8001822 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001808:	f640 70ff 	movw	r0, #4095	; 0xfff
 800180c:	f7ff fd6a 	bl	80012e4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001810:	6939      	ldr	r1, [r7, #16]
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f8d8 	bl	80019c8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop

0800182c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	460b      	mov	r3, r1
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b82      	cmp	r3, #130	; 0x82
 800184c:	d101      	bne.n	8001852 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800184e:	2302      	movs	r3, #2
 8001850:	e050      	b.n	80018f4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2282      	movs	r2, #130	; 0x82
 8001856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 031c 	and.w	r3, r3, #28
 8001868:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8a1b      	ldrh	r3, [r3, #16]
 800186e:	02db      	lsls	r3, r3, #11
 8001870:	b29b      	uxth	r3, r3
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001878:	897b      	ldrh	r3, [r7, #10]
 800187a:	019b      	lsls	r3, r3, #6
 800187c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	4313      	orrs	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f023 0302 	bic.w	r3, r3, #2
 800188c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800189e:	f7ff fd15 	bl	80012cc <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018a4:	e015      	b.n	80018d2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80018a6:	f7ff fd11 	bl	80012cc <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b4:	d309      	bcc.n	80018ca <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e014      	b.n	80018f4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e4      	bne.n	80018a6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	460b      	mov	r3, r1
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b42      	cmp	r3, #66	; 0x42
 800191c:	d101      	bne.n	8001922 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800191e:	2302      	movs	r3, #2
 8001920:	e04e      	b.n	80019c0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2242      	movs	r2, #66	; 0x42
 8001926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 031c 	and.w	r3, r3, #28
 8001938:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8a1b      	ldrh	r3, [r3, #16]
 800193e:	02db      	lsls	r3, r3, #11
 8001940:	b29b      	uxth	r3, r3
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001948:	897b      	ldrh	r3, [r7, #10]
 800194a:	019b      	lsls	r3, r3, #6
 800194c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	4313      	orrs	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001978:	f7ff fca8 	bl	80012cc <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800197e:	e015      	b.n	80019ac <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001980:	f7ff fca4 	bl	80012cc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d309      	bcc.n	80019a4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e00d      	b.n	80019c0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1e4      	bne.n	8001980 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0b0      	sub	sp, #192	; 0xc0
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a12:	663b      	str	r3, [r7, #96]	; 0x60
 8001a14:	e001      	b.n	8001a1a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a24:	2300      	movs	r3, #0
 8001a26:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001a34:	2340      	movs	r3, #64	; 0x40
 8001a36:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aa0:	4bab      	ldr	r3, [pc, #684]	; (8001d50 <ETH_MACDMAConfig+0x388>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001aac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001ab0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001ab4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001aba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001abe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ac2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ac8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001acc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ad0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001ad4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001ad8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001adc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ade:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001af0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff fbf1 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b10:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001b14:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001b16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001b1a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001b20:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001b26:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001b2c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001b30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001b38:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b3a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff fbcc 	bl	80012e4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b54:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b5e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b68:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001b74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b78:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001b82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b86:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001b88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001b8c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001b8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001b92:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001b98:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001b9e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ba0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ba4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ba6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff fb8d 	bl	80012e4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bd2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001bd4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001bd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff fb78 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bfc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c06:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001c0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c10:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001c22:	2304      	movs	r3, #4
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c52:	4413      	add	r3, r2
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001c5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <ETH_MACDMAConfig+0x38c>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c66:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001c68:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c6a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001c6c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001c6e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001c70:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001c72:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001c74:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001c76:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001c78:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001c7a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001c7e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001c82:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001c86:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ca0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001caa:	4413      	add	r3, r2
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7ff fb16 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f241 0318 	movw	r3, #4120	; 0x1018
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cc6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ccc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001cd0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001cd4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001cd8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cdc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001cde:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001ce2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff faef 	bl	80012e4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d12:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d10d      	bne.n	8001d38 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f241 031c 	movw	r3, #4124	; 0x101c
 8001d24:	4413      	add	r3, r2
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6811      	ldr	r1, [r2, #0]
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <ETH_MACDMAConfig+0x390>)
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	f241 031c 	movw	r3, #4124	; 0x101c
 8001d34:	440b      	add	r3, r1
 8001d36:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f80b 	bl	8001d5c <ETH_MACAddressConfig>
}
 8001d46:	bf00      	nop
 8001d48:	37c0      	adds	r7, #192	; 0xc0
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	ff20810f 	.word	0xff20810f
 8001d54:	f8de3f23 	.word	0xf8de3f23
 8001d58:	00010040 	.word	0x00010040

08001d5c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3305      	adds	r3, #5
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	3204      	adds	r2, #4
 8001d74:	7812      	ldrb	r2, [r2, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <ETH_MACAddressConfig+0x68>)
 8001d7e:	4413      	add	r3, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3303      	adds	r3, #3
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	061a      	lsls	r2, r3, #24
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3302      	adds	r3, #2
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	4313      	orrs	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <ETH_MACAddressConfig+0x6c>)
 8001dae:	4413      	add	r3, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	6013      	str	r3, [r2, #0]
}
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40028040 	.word	0x40028040
 8001dc8:	40028044 	.word	0x40028044

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e175      	b.n	80020d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	f040 8164 	bne.w	80020d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d00b      	beq.n	8001e2a <HAL_GPIO_Init+0x5e>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e1e:	2b11      	cmp	r3, #17
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d130      	bne.n	8001e8c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 0201 	and.w	r2, r3, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x100>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b12      	cmp	r3, #18
 8001eca:	d123      	bne.n	8001f14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	08da      	lsrs	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3208      	adds	r2, #8
 8001ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	69b9      	ldr	r1, [r7, #24]
 8001f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80be 	beq.w	80020d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	4b65      	ldr	r3, [pc, #404]	; (80020ec <HAL_GPIO_Init+0x320>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a64      	ldr	r2, [pc, #400]	; (80020ec <HAL_GPIO_Init+0x320>)
 8001f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b62      	ldr	r3, [pc, #392]	; (80020ec <HAL_GPIO_Init+0x320>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f6e:	4a60      	ldr	r2, [pc, #384]	; (80020f0 <HAL_GPIO_Init+0x324>)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <HAL_GPIO_Init+0x328>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d037      	beq.n	800200a <HAL_GPIO_Init+0x23e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a56      	ldr	r2, [pc, #344]	; (80020f8 <HAL_GPIO_Init+0x32c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d031      	beq.n	8002006 <HAL_GPIO_Init+0x23a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a55      	ldr	r2, [pc, #340]	; (80020fc <HAL_GPIO_Init+0x330>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d02b      	beq.n	8002002 <HAL_GPIO_Init+0x236>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a54      	ldr	r2, [pc, #336]	; (8002100 <HAL_GPIO_Init+0x334>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d025      	beq.n	8001ffe <HAL_GPIO_Init+0x232>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a53      	ldr	r2, [pc, #332]	; (8002104 <HAL_GPIO_Init+0x338>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01f      	beq.n	8001ffa <HAL_GPIO_Init+0x22e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_GPIO_Init+0x33c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d019      	beq.n	8001ff6 <HAL_GPIO_Init+0x22a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	; (800210c <HAL_GPIO_Init+0x340>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <HAL_GPIO_Init+0x226>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a50      	ldr	r2, [pc, #320]	; (8002110 <HAL_GPIO_Init+0x344>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00d      	beq.n	8001fee <HAL_GPIO_Init+0x222>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4f      	ldr	r2, [pc, #316]	; (8002114 <HAL_GPIO_Init+0x348>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <HAL_GPIO_Init+0x21e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4e      	ldr	r2, [pc, #312]	; (8002118 <HAL_GPIO_Init+0x34c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d101      	bne.n	8001fe6 <HAL_GPIO_Init+0x21a>
 8001fe2:	2309      	movs	r3, #9
 8001fe4:	e012      	b.n	800200c <HAL_GPIO_Init+0x240>
 8001fe6:	230a      	movs	r3, #10
 8001fe8:	e010      	b.n	800200c <HAL_GPIO_Init+0x240>
 8001fea:	2308      	movs	r3, #8
 8001fec:	e00e      	b.n	800200c <HAL_GPIO_Init+0x240>
 8001fee:	2307      	movs	r3, #7
 8001ff0:	e00c      	b.n	800200c <HAL_GPIO_Init+0x240>
 8001ff2:	2306      	movs	r3, #6
 8001ff4:	e00a      	b.n	800200c <HAL_GPIO_Init+0x240>
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	e008      	b.n	800200c <HAL_GPIO_Init+0x240>
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x240>
 8001ffe:	2303      	movs	r3, #3
 8002000:	e004      	b.n	800200c <HAL_GPIO_Init+0x240>
 8002002:	2302      	movs	r3, #2
 8002004:	e002      	b.n	800200c <HAL_GPIO_Init+0x240>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_GPIO_Init+0x240>
 800200a:	2300      	movs	r3, #0
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	f002 0203 	and.w	r2, r2, #3
 8002012:	0092      	lsls	r2, r2, #2
 8002014:	4093      	lsls	r3, r2
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800201c:	4934      	ldr	r1, [pc, #208]	; (80020f0 <HAL_GPIO_Init+0x324>)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800202a:	4b3c      	ldr	r3, [pc, #240]	; (800211c <HAL_GPIO_Init+0x350>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800204e:	4a33      	ldr	r2, [pc, #204]	; (800211c <HAL_GPIO_Init+0x350>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_GPIO_Init+0x350>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002078:	4a28      	ldr	r2, [pc, #160]	; (800211c <HAL_GPIO_Init+0x350>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_GPIO_Init+0x350>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_GPIO_Init+0x350>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_GPIO_Init+0x350>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020cc:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_GPIO_Init+0x350>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3301      	adds	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b0f      	cmp	r3, #15
 80020dc:	f67f ae86 	bls.w	8001dec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020e0:	bf00      	nop
 80020e2:	3724      	adds	r7, #36	; 0x24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40021400 	.word	0x40021400
 800210c:	40021800 	.word	0x40021800
 8002110:	40021c00 	.word	0x40021c00
 8002114:	40022000 	.word	0x40022000
 8002118:	40022400 	.word	0x40022400
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800213c:	e003      	b.n	8002146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e07f      	b.n	8002266 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fa7a 	bl	8000674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	e006      	b.n	80021dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d104      	bne.n	80021ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_I2C_Init+0x11c>)
 80021fa:	430b      	orrs	r3, r1
 80021fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	ea42 0103 	orr.w	r1, r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	021a      	lsls	r2, r3, #8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69d9      	ldr	r1, [r3, #28]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	02008000 	.word	0x02008000

08002274 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	817b      	strh	r3, [r7, #10]
 8002286:	460b      	mov	r3, r1
 8002288:	813b      	strh	r3, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b20      	cmp	r3, #32
 8002298:	f040 80f9 	bne.w	800248e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x34>
 80022a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0ed      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_Mem_Write+0x4e>
 80022be:	2302      	movs	r3, #2
 80022c0:	e0e6      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ca:	f7fe ffff 	bl	80012cc <HAL_GetTick>
 80022ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2319      	movs	r3, #25
 80022d6:	2201      	movs	r2, #1
 80022d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fac3 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0d1      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2221      	movs	r2, #33	; 0x21
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2240      	movs	r2, #64	; 0x40
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800230c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002314:	88f8      	ldrh	r0, [r7, #6]
 8002316:	893a      	ldrh	r2, [r7, #8]
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	4603      	mov	r3, r0
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f9d3 	bl	80026d0 <I2C_RequestMemoryWrite>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0a9      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	d90e      	bls.n	8002364 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	22ff      	movs	r2, #255	; 0xff
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	b2da      	uxtb	r2, r3
 8002352:	8979      	ldrh	r1, [r7, #10]
 8002354:	2300      	movs	r3, #0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fba5 	bl	8002aac <I2C_TransferConfig>
 8002362:	e00f      	b.n	8002384 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	b2da      	uxtb	r2, r3
 8002374:	8979      	ldrh	r1, [r7, #10]
 8002376:	2300      	movs	r3, #0
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 fb94 	bl	8002aac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 faad 	bl	80028e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e07b      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d034      	beq.n	800243c <HAL_I2C_Mem_Write+0x1c8>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d130      	bne.n	800243c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fa3f 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e04d      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2bff      	cmp	r3, #255	; 0xff
 80023fc:	d90e      	bls.n	800241c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	22ff      	movs	r2, #255	; 0xff
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	b2da      	uxtb	r2, r3
 800240a:	8979      	ldrh	r1, [r7, #10]
 800240c:	2300      	movs	r3, #0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fb49 	bl	8002aac <I2C_TransferConfig>
 800241a:	e00f      	b.n	800243c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	b2da      	uxtb	r2, r3
 800242c:	8979      	ldrh	r1, [r7, #10]
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fb38 	bl	8002aac <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d19e      	bne.n	8002384 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa8c 	bl	8002968 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e01a      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2220      	movs	r2, #32
 8002460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_I2C_Mem_Write+0x224>)
 800246e:	400b      	ands	r3, r1
 8002470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e000      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	fe00e800 	.word	0xfe00e800

0800249c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	460b      	mov	r3, r1
 80024b0:	813b      	strh	r3, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b20      	cmp	r3, #32
 80024c0:	f040 80fd 	bne.w	80026be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_I2C_Mem_Read+0x34>
 80024ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0f1      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Mem_Read+0x4e>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0ea      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024f2:	f7fe feeb 	bl	80012cc <HAL_GetTick>
 80024f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2319      	movs	r3, #25
 80024fe:	2201      	movs	r2, #1
 8002500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f9af 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0d5      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2222      	movs	r2, #34	; 0x22
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2240      	movs	r2, #64	; 0x40
 8002520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800253c:	88f8      	ldrh	r0, [r7, #6]
 800253e:	893a      	ldrh	r2, [r7, #8]
 8002540:	8979      	ldrh	r1, [r7, #10]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	4603      	mov	r3, r0
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f913 	bl	8002778 <I2C_RequestMemoryRead>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0ad      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2bff      	cmp	r3, #255	; 0xff
 800256c:	d90e      	bls.n	800258c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	b2da      	uxtb	r2, r3
 800257a:	8979      	ldrh	r1, [r7, #10]
 800257c:	4b52      	ldr	r3, [pc, #328]	; (80026c8 <HAL_I2C_Mem_Read+0x22c>)
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fa91 	bl	8002aac <I2C_TransferConfig>
 800258a:	e00f      	b.n	80025ac <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	b2da      	uxtb	r2, r3
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_I2C_Mem_Read+0x22c>)
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa80 	bl	8002aac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	2200      	movs	r2, #0
 80025b4:	2104      	movs	r1, #4
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f956 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07c      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d034      	beq.n	800266c <HAL_I2C_Mem_Read+0x1d0>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d130      	bne.n	800266c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	2200      	movs	r2, #0
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f927 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e04d      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d90e      	bls.n	800264c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fa31 	bl	8002aac <I2C_TransferConfig>
 800264a:	e00f      	b.n	800266c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	b2da      	uxtb	r2, r3
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	2300      	movs	r3, #0
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fa20 	bl	8002aac <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d19a      	bne.n	80025ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f974 	bl	8002968 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e01a      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_I2C_Mem_Read+0x230>)
 800269e:	400b      	ands	r3, r1
 80026a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	80002400 	.word	0x80002400
 80026cc:	fe00e800 	.word	0xfe00e800

080026d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	817b      	strh	r3, [r7, #10]
 80026e2:	460b      	mov	r3, r1
 80026e4:	813b      	strh	r3, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	4b20      	ldr	r3, [pc, #128]	; (8002774 <I2C_RequestMemoryWrite+0xa4>)
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f9d7 	bl	8002aac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	69b9      	ldr	r1, [r7, #24]
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f8f0 	bl	80028e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e02c      	b.n	800276c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002718:	893b      	ldrh	r3, [r7, #8]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
 8002722:	e015      	b.n	8002750 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002724:	893b      	ldrh	r3, [r7, #8]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b29b      	uxth	r3, r3
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	69b9      	ldr	r1, [r7, #24]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f8d6 	bl	80028e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e012      	b.n	800276c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002746:	893b      	ldrh	r3, [r7, #8]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2200      	movs	r2, #0
 8002758:	2180      	movs	r1, #128	; 0x80
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f884 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	80002000 	.word	0x80002000

08002778 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4603      	mov	r3, r0
 8002788:	817b      	strh	r3, [r7, #10]
 800278a:	460b      	mov	r3, r1
 800278c:	813b      	strh	r3, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	8979      	ldrh	r1, [r7, #10]
 8002798:	4b20      	ldr	r3, [pc, #128]	; (800281c <I2C_RequestMemoryRead+0xa4>)
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f984 	bl	8002aac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	69b9      	ldr	r1, [r7, #24]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f89d 	bl	80028e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e02c      	b.n	8002812 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027be:	893b      	ldrh	r3, [r7, #8]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
 80027c8:	e015      	b.n	80027f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027ca:	893b      	ldrh	r3, [r7, #8]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f883 	bl	80028e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e012      	b.n	8002812 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2140      	movs	r1, #64	; 0x40
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f831 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	80002000 	.word	0x80002000

08002820 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b02      	cmp	r3, #2
 8002834:	d103      	bne.n	800283e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d007      	beq.n	800285c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	619a      	str	r2, [r3, #24]
  }
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002878:	e022      	b.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d01e      	beq.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002882:	f7fe fd23 	bl	80012cc <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d302      	bcc.n	8002898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d113      	bne.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e00f      	b.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4013      	ands	r3, r2
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d0cd      	beq.n	800287a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028f4:	e02c      	b.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f870 	bl	80029e0 <I2C_IsAcknowledgeFailed>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e02a      	b.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d01e      	beq.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002912:	f7fe fcdb 	bl	80012cc <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	d302      	bcc.n	8002928 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d113      	bne.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e007      	b.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d1cb      	bne.n	80028f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002974:	e028      	b.n	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f830 	bl	80029e0 <I2C_IsAcknowledgeFailed>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e026      	b.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7fe fc9f 	bl	80012cc <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d113      	bne.n	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e007      	b.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d1cf      	bne.n	8002976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d151      	bne.n	8002a9e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029fa:	e022      	b.n	8002a42 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d01e      	beq.n	8002a42 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a04:	f7fe fc62 	bl	80012cc <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d302      	bcc.n	8002a1a <I2C_IsAcknowledgeFailed+0x3a>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d113      	bne.n	8002a42 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f043 0220 	orr.w	r2, r3, #32
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e02e      	b.n	8002aa0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d1d5      	bne.n	80029fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2210      	movs	r2, #16
 8002a56:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff fedd 	bl	8002820 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002a72:	400b      	ands	r3, r1
 8002a74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f043 0204 	orr.w	r2, r3, #4
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	fe00e800 	.word	0xfe00e800

08002aac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	817b      	strh	r3, [r7, #10]
 8002aba:	4613      	mov	r3, r2
 8002abc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	0d5b      	lsrs	r3, r3, #21
 8002ac8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <I2C_TransferConfig+0x58>)
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	ea02 0103 	and.w	r1, r2, r3
 8002ad6:	897b      	ldrh	r3, [r7, #10]
 8002ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002adc:	7a7b      	ldrb	r3, [r7, #9]
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	03ff63ff 	.word	0x03ff63ff

08002b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d138      	bne.n	8002b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e032      	b.n	8002b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2224      	movs	r2, #36	; 0x24
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d139      	bne.n	8002c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e033      	b.n	8002c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2224      	movs	r2, #36	; 0x24
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c38:	b08f      	sub	sp, #60	; 0x3c
 8002c3a:	af0a      	add	r7, sp, #40	; 0x28
 8002c3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e116      	b.n	8002e76 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe f978 	bl	8000f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 ff8e 	bl	8004ba8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	687e      	ldr	r6, [r7, #4]
 8002c94:	466d      	mov	r5, sp
 8002c96:	f106 0410 	add.w	r4, r6, #16
 8002c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ca6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002caa:	1d33      	adds	r3, r6, #4
 8002cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cae:	6838      	ldr	r0, [r7, #0]
 8002cb0:	f001 ff22 	bl	8004af8 <USB_CoreInit>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0d7      	b.n	8002e76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 ff7c 	bl	8004bca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]
 8002cd6:	e04a      	b.n	8002d6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	333d      	adds	r3, #61	; 0x3d
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	333c      	adds	r3, #60	; 0x3c
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	b298      	uxth	r0, r3
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	3342      	adds	r3, #66	; 0x42
 8002d14:	4602      	mov	r2, r0
 8002d16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	333f      	adds	r3, #63	; 0x3f
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	3344      	adds	r3, #68	; 0x44
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3348      	adds	r3, #72	; 0x48
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3350      	adds	r3, #80	; 0x50
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d3af      	bcc.n	8002cd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e044      	b.n	8002e08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	3301      	adds	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d3b5      	bcc.n	8002d7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	687e      	ldr	r6, [r7, #4]
 8002e1a:	466d      	mov	r5, sp
 8002e1c:	f106 0410 	add.w	r4, r6, #16
 8002e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e30:	1d33      	adds	r3, r6, #4
 8002e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e34:	6838      	ldr	r0, [r7, #0]
 8002e36:	f001 fef3 	bl	8004c20 <USB_DevInit>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e014      	b.n	8002e76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d102      	bne.n	8002e6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f80b 	bl	8002e80 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 f8a5 	bl	8004fbe <USB_DevDisconnect>

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	10000003 	.word	0x10000003

08002ec8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed6:	6013      	str	r3, [r2, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	4a22      	ldr	r2, [pc, #136]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6413      	str	r3, [r2, #64]	; 0x40
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f16:	f7fe f9d9 	bl	80012cc <HAL_GetTick>
 8002f1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f1c:	e009      	b.n	8002f32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f1e:	f7fe f9d5 	bl	80012cc <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f2c:	d901      	bls.n	8002f32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e022      	b.n	8002f78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3e:	d1ee      	bne.n	8002f1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f40:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f4c:	f7fe f9be 	bl	80012cc <HAL_GetTick>
 8002f50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f52:	e009      	b.n	8002f68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f54:	f7fe f9ba 	bl	80012cc <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f62:	d901      	bls.n	8002f68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e007      	b.n	8002f78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f74:	d1ee      	bne.n	8002f54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40007000 	.word	0x40007000

08002f88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e29b      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8087 	beq.w	80030ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fac:	4b96      	ldr	r3, [pc, #600]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb8:	4b93      	ldr	r3, [pc, #588]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d112      	bne.n	8002fea <HAL_RCC_OscConfig+0x62>
 8002fc4:	4b90      	ldr	r3, [pc, #576]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd0:	d10b      	bne.n	8002fea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd2:	4b8d      	ldr	r3, [pc, #564]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d06c      	beq.n	80030b8 <HAL_RCC_OscConfig+0x130>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d168      	bne.n	80030b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e275      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x7a>
 8002ff4:	4b84      	ldr	r3, [pc, #528]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a83      	ldr	r2, [pc, #524]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	e02e      	b.n	8003060 <HAL_RCC_OscConfig+0xd8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x9c>
 800300a:	4b7f      	ldr	r3, [pc, #508]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a7e      	ldr	r2, [pc, #504]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b7c      	ldr	r3, [pc, #496]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a7b      	ldr	r2, [pc, #492]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 800301c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e01d      	b.n	8003060 <HAL_RCC_OscConfig+0xd8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0xc0>
 800302e:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a75      	ldr	r2, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	4b73      	ldr	r3, [pc, #460]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a72      	ldr	r2, [pc, #456]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0xd8>
 8003048:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 800304e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4b6c      	ldr	r3, [pc, #432]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a6b      	ldr	r2, [pc, #428]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 800305a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe f930 	bl	80012cc <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe f92c 	bl	80012cc <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e229      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b61      	ldr	r3, [pc, #388]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0xe8>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe f91c 	bl	80012cc <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003098:	f7fe f918 	bl	80012cc <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	; 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e215      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	4b57      	ldr	r3, [pc, #348]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x110>
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d069      	beq.n	800319a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030c6:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b4d      	ldr	r3, [pc, #308]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d11c      	bne.n	8003118 <HAL_RCC_OscConfig+0x190>
 80030de:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d116      	bne.n	8003118 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_RCC_OscConfig+0x17a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e1e9      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	493d      	ldr	r1, [pc, #244]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	e040      	b.n	800319a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d023      	beq.n	8003168 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003120:	4b39      	ldr	r3, [pc, #228]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a38      	ldr	r2, [pc, #224]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe f8ce 	bl	80012cc <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003134:	f7fe f8ca 	bl	80012cc <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e1c7      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	4b30      	ldr	r3, [pc, #192]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4929      	ldr	r1, [pc, #164]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
 8003166:	e018      	b.n	800319a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a26      	ldr	r2, [pc, #152]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe f8aa 	bl	80012cc <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317c:	f7fe f8a6 	bl	80012cc <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1a3      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d038      	beq.n	8003218 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d019      	beq.n	80031e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 80031b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fe f887 	bl	80012cc <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fe f883 	bl	80012cc <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e180      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 80031d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x23a>
 80031e0:	e01a      	b.n	8003218 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 80031e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e6:	4a08      	ldr	r2, [pc, #32]	; (8003208 <HAL_RCC_OscConfig+0x280>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe f86d 	bl	80012cc <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fe f869 	bl	80012cc <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d903      	bls.n	800320c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e166      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
 8003208:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	4b92      	ldr	r3, [pc, #584]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 800320e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ee      	bne.n	80031f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80a4 	beq.w	800336e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003226:	4b8c      	ldr	r3, [pc, #560]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10d      	bne.n	800324e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	4b89      	ldr	r3, [pc, #548]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	4a88      	ldr	r2, [pc, #544]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323c:	6413      	str	r3, [r2, #64]	; 0x40
 800323e:	4b86      	ldr	r3, [pc, #536]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324a:	2301      	movs	r3, #1
 800324c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324e:	4b83      	ldr	r3, [pc, #524]	; (800345c <HAL_RCC_OscConfig+0x4d4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d118      	bne.n	800328c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800325a:	4b80      	ldr	r3, [pc, #512]	; (800345c <HAL_RCC_OscConfig+0x4d4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7f      	ldr	r2, [pc, #508]	; (800345c <HAL_RCC_OscConfig+0x4d4>)
 8003260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003266:	f7fe f831 	bl	80012cc <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326e:	f7fe f82d 	bl	80012cc <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b64      	cmp	r3, #100	; 0x64
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e12a      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003280:	4b76      	ldr	r3, [pc, #472]	; (800345c <HAL_RCC_OscConfig+0x4d4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d106      	bne.n	80032a2 <HAL_RCC_OscConfig+0x31a>
 8003294:	4b70      	ldr	r3, [pc, #448]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	4a6f      	ldr	r2, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6713      	str	r3, [r2, #112]	; 0x70
 80032a0:	e02d      	b.n	80032fe <HAL_RCC_OscConfig+0x376>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x33c>
 80032aa:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a6a      	ldr	r2, [pc, #424]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
 80032b6:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a67      	ldr	r2, [pc, #412]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032bc:	f023 0304 	bic.w	r3, r3, #4
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
 80032c2:	e01c      	b.n	80032fe <HAL_RCC_OscConfig+0x376>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d10c      	bne.n	80032e6 <HAL_RCC_OscConfig+0x35e>
 80032cc:	4b62      	ldr	r3, [pc, #392]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a61      	ldr	r2, [pc, #388]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
 80032d8:	4b5f      	ldr	r3, [pc, #380]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a5e      	ldr	r2, [pc, #376]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
 80032e4:	e00b      	b.n	80032fe <HAL_RCC_OscConfig+0x376>
 80032e6:	4b5c      	ldr	r3, [pc, #368]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a5b      	ldr	r2, [pc, #364]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	4b59      	ldr	r3, [pc, #356]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a58      	ldr	r2, [pc, #352]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	f023 0304 	bic.w	r3, r3, #4
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d015      	beq.n	8003332 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7fd ffe1 	bl	80012cc <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fd ffdd 	bl	80012cc <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0d8      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003324:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ee      	beq.n	800330e <HAL_RCC_OscConfig+0x386>
 8003330:	e014      	b.n	800335c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fd ffcb 	bl	80012cc <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fd ffc7 	bl	80012cc <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0c2      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ee      	bne.n	800333a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d105      	bne.n	800336e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a3c      	ldr	r2, [pc, #240]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80ae 	beq.w	80034d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003378:	4b37      	ldr	r3, [pc, #220]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d06d      	beq.n	8003460 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d14b      	bne.n	8003424 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a31      	ldr	r2, [pc, #196]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd ff98 	bl	80012cc <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fd ff94 	bl	80012cc <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e091      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	4b29      	ldr	r3, [pc, #164]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	3b01      	subs	r3, #1
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	061b      	lsls	r3, r3, #24
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	071b      	lsls	r3, r3, #28
 80033ea:	491b      	ldr	r1, [pc, #108]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fd ff66 	bl	80012cc <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fd ff62 	bl	80012cc <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e05f      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x47c>
 8003422:	e057      	b.n	80034d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 800342a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fd ff4c 	bl	80012cc <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7fd ff48 	bl	80012cc <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e045      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_RCC_OscConfig+0x4d0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x4b0>
 8003456:	e03d      	b.n	80034d4 <HAL_RCC_OscConfig+0x54c>
 8003458:	40023800 	.word	0x40023800
 800345c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003460:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <HAL_RCC_OscConfig+0x558>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d030      	beq.n	80034d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d129      	bne.n	80034d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d122      	bne.n	80034d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003496:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003498:	4293      	cmp	r3, r2
 800349a:	d119      	bne.n	80034d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	3b01      	subs	r3, #1
 80034aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d10f      	bne.n	80034d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0d0      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034fc:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d910      	bls.n	800352c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b67      	ldr	r3, [pc, #412]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 020f 	bic.w	r2, r3, #15
 8003512:	4965      	ldr	r1, [pc, #404]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0b8      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d020      	beq.n	800357a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 800354a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800354e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	494d      	ldr	r1, [pc, #308]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d040      	beq.n	8003608 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d115      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e07f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b41      	ldr	r3, [pc, #260]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e073      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06b      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c6:	4b39      	ldr	r3, [pc, #228]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 0203 	bic.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4936      	ldr	r1, [pc, #216]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d8:	f7fd fe78 	bl	80012cc <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e0:	f7fd fe74 	bl	80012cc <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e053      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 020c 	and.w	r2, r3, #12
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	429a      	cmp	r2, r3
 8003606:	d1eb      	bne.n	80035e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003608:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d210      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 020f 	bic.w	r2, r3, #15
 800361e:	4922      	ldr	r1, [pc, #136]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e032      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4916      	ldr	r1, [pc, #88]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	490e      	ldr	r1, [pc, #56]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003676:	f000 f821 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 800367a:	4601      	mov	r1, r0
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <HAL_RCC_ClockConfig+0x1cc>)
 8003688:	5cd3      	ldrb	r3, [r2, r3]
 800368a:	fa21 f303 	lsr.w	r3, r1, r3
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1d4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd fdd4 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023c00 	.word	0x40023c00
 80036ac:	40023800 	.word	0x40023800
 80036b0:	08007624 	.word	0x08007624
 80036b4:	20000000 	.word	0x20000000
 80036b8:	20000004 	.word	0x20000004

080036bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	2300      	movs	r3, #0
 80036cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d2:	4b63      	ldr	r3, [pc, #396]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d007      	beq.n	80036ee <HAL_RCC_GetSysClockFreq+0x32>
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d008      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x38>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 80b4 	bne.w	8003850 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b5e      	ldr	r3, [pc, #376]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036ea:	60bb      	str	r3, [r7, #8]
      break;
 80036ec:	e0b3      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ee:	4b5e      	ldr	r3, [pc, #376]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036f0:	60bb      	str	r3, [r7, #8]
      break;
 80036f2:	e0b0      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f4:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036fe:	4b58      	ldr	r3, [pc, #352]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d04a      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370a:	4b55      	ldr	r3, [pc, #340]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	ea03 0501 	and.w	r5, r3, r1
 8003720:	ea04 0602 	and.w	r6, r4, r2
 8003724:	4629      	mov	r1, r5
 8003726:	4632      	mov	r2, r6
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	f04f 0400 	mov.w	r4, #0
 8003730:	0154      	lsls	r4, r2, #5
 8003732:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003736:	014b      	lsls	r3, r1, #5
 8003738:	4619      	mov	r1, r3
 800373a:	4622      	mov	r2, r4
 800373c:	1b49      	subs	r1, r1, r5
 800373e:	eb62 0206 	sbc.w	r2, r2, r6
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	f04f 0400 	mov.w	r4, #0
 800374a:	0194      	lsls	r4, r2, #6
 800374c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003750:	018b      	lsls	r3, r1, #6
 8003752:	1a5b      	subs	r3, r3, r1
 8003754:	eb64 0402 	sbc.w	r4, r4, r2
 8003758:	f04f 0100 	mov.w	r1, #0
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	00e2      	lsls	r2, r4, #3
 8003762:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003766:	00d9      	lsls	r1, r3, #3
 8003768:	460b      	mov	r3, r1
 800376a:	4614      	mov	r4, r2
 800376c:	195b      	adds	r3, r3, r5
 800376e:	eb44 0406 	adc.w	r4, r4, r6
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	0262      	lsls	r2, r4, #9
 800377c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003780:	0259      	lsls	r1, r3, #9
 8003782:	460b      	mov	r3, r1
 8003784:	4614      	mov	r4, r2
 8003786:	4618      	mov	r0, r3
 8003788:	4621      	mov	r1, r4
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f04f 0400 	mov.w	r4, #0
 8003790:	461a      	mov	r2, r3
 8003792:	4623      	mov	r3, r4
 8003794:	f7fc fdac 	bl	80002f0 <__aeabi_uldivmod>
 8003798:	4603      	mov	r3, r0
 800379a:	460c      	mov	r4, r1
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e049      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a0:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	ea03 0501 	and.w	r5, r3, r1
 80037b6:	ea04 0602 	and.w	r6, r4, r2
 80037ba:	4629      	mov	r1, r5
 80037bc:	4632      	mov	r2, r6
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	f04f 0400 	mov.w	r4, #0
 80037c6:	0154      	lsls	r4, r2, #5
 80037c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037cc:	014b      	lsls	r3, r1, #5
 80037ce:	4619      	mov	r1, r3
 80037d0:	4622      	mov	r2, r4
 80037d2:	1b49      	subs	r1, r1, r5
 80037d4:	eb62 0206 	sbc.w	r2, r2, r6
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	f04f 0400 	mov.w	r4, #0
 80037e0:	0194      	lsls	r4, r2, #6
 80037e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037e6:	018b      	lsls	r3, r1, #6
 80037e8:	1a5b      	subs	r3, r3, r1
 80037ea:	eb64 0402 	sbc.w	r4, r4, r2
 80037ee:	f04f 0100 	mov.w	r1, #0
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	00e2      	lsls	r2, r4, #3
 80037f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037fc:	00d9      	lsls	r1, r3, #3
 80037fe:	460b      	mov	r3, r1
 8003800:	4614      	mov	r4, r2
 8003802:	195b      	adds	r3, r3, r5
 8003804:	eb44 0406 	adc.w	r4, r4, r6
 8003808:	f04f 0100 	mov.w	r1, #0
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	02a2      	lsls	r2, r4, #10
 8003812:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003816:	0299      	lsls	r1, r3, #10
 8003818:	460b      	mov	r3, r1
 800381a:	4614      	mov	r4, r2
 800381c:	4618      	mov	r0, r3
 800381e:	4621      	mov	r1, r4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f04f 0400 	mov.w	r4, #0
 8003826:	461a      	mov	r2, r3
 8003828:	4623      	mov	r3, r4
 800382a:	f7fc fd61 	bl	80002f0 <__aeabi_uldivmod>
 800382e:	4603      	mov	r3, r0
 8003830:	460c      	mov	r4, r1
 8003832:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	3301      	adds	r3, #1
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	60bb      	str	r3, [r7, #8]
      break;
 800384e:	e002      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003852:	60bb      	str	r3, [r7, #8]
      break;
 8003854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003856:	68bb      	ldr	r3, [r7, #8]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003860:	40023800 	.word	0x40023800
 8003864:	00f42400 	.word	0x00f42400
 8003868:	007a1200 	.word	0x007a1200

0800386c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <HAL_RCC_GetHCLKFreq+0x14>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20000000 	.word	0x20000000

08003884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003888:	f7ff fff0 	bl	800386c <HAL_RCC_GetHCLKFreq>
 800388c:	4601      	mov	r1, r0
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	0a9b      	lsrs	r3, r3, #10
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	4a03      	ldr	r2, [pc, #12]	; (80038a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800389a:	5cd3      	ldrb	r3, [r2, r3]
 800389c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40023800 	.word	0x40023800
 80038a8:	08007634 	.word	0x08007634

080038ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038b0:	f7ff ffdc 	bl	800386c <HAL_RCC_GetHCLKFreq>
 80038b4:	4601      	mov	r1, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0b5b      	lsrs	r3, r3, #13
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c2:	5cd3      	ldrb	r3, [r2, r3]
 80038c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	08007634 	.word	0x08007634

080038d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d012      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038fc:	4b69      	ldr	r3, [pc, #420]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a68      	ldr	r2, [pc, #416]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003902:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003906:	6093      	str	r3, [r2, #8]
 8003908:	4b66      	ldr	r3, [pc, #408]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	4964      	ldr	r1, [pc, #400]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d017      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800392e:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003934:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	4959      	ldr	r1, [pc, #356]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d017      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800396a:	4b4e      	ldr	r3, [pc, #312]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003970:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	494a      	ldr	r1, [pc, #296]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003988:	d101      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800398a:	2301      	movs	r3, #1
 800398c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 808b 	beq.w	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b3a      	ldr	r3, [pc, #232]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	4a39      	ldr	r2, [pc, #228]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6413      	str	r3, [r2, #64]	; 0x40
 80039c4:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a34      	ldr	r2, [pc, #208]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039dc:	f7fd fc76 	bl	80012cc <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e4:	f7fd fc72 	bl	80012cc <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e38d      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039f6:	4b2c      	ldr	r3, [pc, #176]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a02:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d035      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d02e      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a20:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a42:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d114      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd fc3a 	bl	80012cc <HAL_GetTick>
 8003a58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fc36 	bl	80012cc <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e34f      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0ee      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a8a:	d111      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	4901      	ldr	r1, [pc, #4]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40007000 	.word	0x40007000
 8003aac:	0ffffcff 	.word	0x0ffffcff
 8003ab0:	4bb3      	ldr	r3, [pc, #716]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4ab2      	ldr	r2, [pc, #712]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003aba:	6093      	str	r3, [r2, #8]
 8003abc:	4bb0      	ldr	r3, [pc, #704]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003abe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	49ad      	ldr	r1, [pc, #692]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d010      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ada:	4ba9      	ldr	r3, [pc, #676]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae0:	4aa7      	ldr	r2, [pc, #668]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003aea:	4ba5      	ldr	r3, [pc, #660]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	49a2      	ldr	r1, [pc, #648]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b08:	4b9d      	ldr	r3, [pc, #628]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b16:	499a      	ldr	r1, [pc, #616]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b2a:	4b95      	ldr	r3, [pc, #596]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b38:	4991      	ldr	r1, [pc, #580]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b4c:	4b8c      	ldr	r3, [pc, #560]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5a:	4989      	ldr	r1, [pc, #548]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b6e:	4b84      	ldr	r3, [pc, #528]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	4980      	ldr	r1, [pc, #512]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b90:	4b7b      	ldr	r3, [pc, #492]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f023 0203 	bic.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	4978      	ldr	r1, [pc, #480]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bb2:	4b73      	ldr	r3, [pc, #460]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	f023 020c 	bic.w	r2, r3, #12
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc0:	496f      	ldr	r1, [pc, #444]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	4967      	ldr	r1, [pc, #412]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf6:	4b62      	ldr	r3, [pc, #392]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c04:	495e      	ldr	r1, [pc, #376]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	4956      	ldr	r1, [pc, #344]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c3a:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	494d      	ldr	r1, [pc, #308]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c5c:	4b48      	ldr	r3, [pc, #288]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	4945      	ldr	r1, [pc, #276]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c7e:	4b40      	ldr	r3, [pc, #256]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8c:	493c      	ldr	r1, [pc, #240]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ca0:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cae:	4934      	ldr	r1, [pc, #208]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d011      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cc2:	4b2f      	ldr	r3, [pc, #188]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd0:	492b      	ldr	r1, [pc, #172]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d02:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d10:	491b      	ldr	r1, [pc, #108]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d24:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d34:	4912      	ldr	r1, [pc, #72]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d48:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d58:	4909      	ldr	r1, [pc, #36]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00f      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7c:	e002      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	4985      	ldr	r1, [pc, #532]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d98:	4b80      	ldr	r3, [pc, #512]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da8:	497c      	ldr	r1, [pc, #496]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d005      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dbe:	f040 80d6 	bne.w	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dc2:	4b76      	ldr	r3, [pc, #472]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a75      	ldr	r2, [pc, #468]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dce:	f7fd fa7d 	bl	80012cc <HAL_GetTick>
 8003dd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dd6:	f7fd fa79 	bl	80012cc <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b64      	cmp	r3, #100	; 0x64
 8003de2:	d901      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e194      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003de8:	4b6c      	ldr	r3, [pc, #432]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f0      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d021      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d11d      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e08:	4b64      	ldr	r3, [pc, #400]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e16:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1c:	0e1b      	lsrs	r3, r3, #24
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	019a      	lsls	r2, r3, #6
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	061b      	lsls	r3, r3, #24
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	071b      	lsls	r3, r3, #28
 8003e3c:	4957      	ldr	r1, [pc, #348]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02e      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6e:	d129      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e70:	4b4a      	ldr	r3, [pc, #296]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e84:	0f1b      	lsrs	r3, r3, #28
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	019a      	lsls	r2, r3, #6
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	061b      	lsls	r3, r3, #24
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	071b      	lsls	r3, r3, #28
 8003ea4:	493d      	ldr	r1, [pc, #244]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003eac:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb2:	f023 021f 	bic.w	r2, r3, #31
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	4937      	ldr	r1, [pc, #220]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01d      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ed0:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed6:	0e1b      	lsrs	r3, r3, #24
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ede:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee4:	0f1b      	lsrs	r3, r3, #28
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	019a      	lsls	r2, r3, #6
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	431a      	orrs	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	071b      	lsls	r3, r3, #28
 8003f04:	4925      	ldr	r1, [pc, #148]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d011      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	019a      	lsls	r2, r3, #6
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	041b      	lsls	r3, r3, #16
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	061b      	lsls	r3, r3, #24
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	071b      	lsls	r3, r3, #28
 8003f34:	4919      	ldr	r1, [pc, #100]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f3c:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a16      	ldr	r2, [pc, #88]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f48:	f7fd f9c0 	bl	80012cc <HAL_GetTick>
 8003f4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f50:	f7fd f9bc 	bl	80012cc <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0d7      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f040 80cd 	bne.w	8004110 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f82:	f7fd f9a3 	bl	80012cc <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f8a:	f7fd f99f 	bl	80012cc <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b64      	cmp	r3, #100	; 0x64
 8003f96:	d903      	bls.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e0ba      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003f9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fa0:	4b5e      	ldr	r3, [pc, #376]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fac:	d0ed      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d02e      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d12a      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fd6:	4b51      	ldr	r3, [pc, #324]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fe4:	4b4d      	ldr	r3, [pc, #308]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	0f1b      	lsrs	r3, r3, #28
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	019a      	lsls	r2, r3, #6
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	431a      	orrs	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	071b      	lsls	r3, r3, #28
 800400a:	4944      	ldr	r1, [pc, #272]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004012:	4b42      	ldr	r3, [pc, #264]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004018:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	3b01      	subs	r3, #1
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	493d      	ldr	r1, [pc, #244]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d022      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800403c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004040:	d11d      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004042:	4b36      	ldr	r3, [pc, #216]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004048:	0e1b      	lsrs	r3, r3, #24
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004050:	4b32      	ldr	r3, [pc, #200]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	0f1b      	lsrs	r3, r3, #28
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	019a      	lsls	r2, r3, #6
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	041b      	lsls	r3, r3, #16
 800406a:	431a      	orrs	r2, r3
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	061b      	lsls	r3, r3, #24
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	071b      	lsls	r3, r3, #28
 8004076:	4929      	ldr	r1, [pc, #164]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d028      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	0e1b      	lsrs	r3, r3, #24
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004098:	4b20      	ldr	r3, [pc, #128]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	0c1b      	lsrs	r3, r3, #16
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	019a      	lsls	r2, r3, #6
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	431a      	orrs	r2, r3
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	4917      	ldr	r1, [pc, #92]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	4911      	ldr	r1, [pc, #68]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a0e      	ldr	r2, [pc, #56]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e8:	f7fd f8f0 	bl	80012cc <HAL_GetTick>
 80040ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040f0:	f7fd f8ec 	bl	80012cc <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e007      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800410a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800410e:	d1ef      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e040      	b.n	80041b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fc fec4 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2224      	movs	r2, #36	; 0x24
 800414c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f8be 	bl	80042e0 <UART_SetConfig>
 8004164:	4603      	mov	r3, r0
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e022      	b.n	80041b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fb5c 	bl	8004834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800418a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800419a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fbe3 	bl	8004978 <UART_CheckIdleState>
 80041b2:	4603      	mov	r3, r0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d17f      	bne.n	80042d4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_UART_Transmit+0x24>
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e078      	b.n	80042d6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Transmit+0x36>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e071      	b.n	80042d6 <HAL_UART_Transmit+0x11a>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2221      	movs	r2, #33	; 0x21
 8004204:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004206:	f7fd f861 	bl	80012cc <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	88fa      	ldrh	r2, [r7, #6]
 8004218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004224:	d108      	bne.n	8004238 <HAL_UART_Transmit+0x7c>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	e003      	b.n	8004240 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004248:	e02c      	b.n	80042a4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2200      	movs	r2, #0
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fbd4 	bl	8004a02 <UART_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e038      	b.n	80042d6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004278:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	3302      	adds	r3, #2
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	e007      	b.n	8004292 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	3301      	adds	r3, #1
 8004290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1cc      	bne.n	800424a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2200      	movs	r2, #0
 80042b8:	2140      	movs	r1, #64	; 0x40
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fba1 	bl	8004a02 <UART_WaitOnFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e005      	b.n	80042d6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4bb1      	ldr	r3, [pc, #708]	; (80045d4 <UART_SetConfig+0x2f4>)
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	6939      	ldr	r1, [r7, #16]
 8004318:	430b      	orrs	r3, r1
 800431a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a9f      	ldr	r2, [pc, #636]	; (80045d8 <UART_SetConfig+0x2f8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d121      	bne.n	80043a4 <UART_SetConfig+0xc4>
 8004360:	4b9e      	ldr	r3, [pc, #632]	; (80045dc <UART_SetConfig+0x2fc>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b03      	cmp	r3, #3
 800436c:	d816      	bhi.n	800439c <UART_SetConfig+0xbc>
 800436e:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <UART_SetConfig+0x94>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	08004385 	.word	0x08004385
 8004378:	08004391 	.word	0x08004391
 800437c:	0800438b 	.word	0x0800438b
 8004380:	08004397 	.word	0x08004397
 8004384:	2301      	movs	r3, #1
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e151      	b.n	800462e <UART_SetConfig+0x34e>
 800438a:	2302      	movs	r3, #2
 800438c:	77fb      	strb	r3, [r7, #31]
 800438e:	e14e      	b.n	800462e <UART_SetConfig+0x34e>
 8004390:	2304      	movs	r3, #4
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e14b      	b.n	800462e <UART_SetConfig+0x34e>
 8004396:	2308      	movs	r3, #8
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e148      	b.n	800462e <UART_SetConfig+0x34e>
 800439c:	2310      	movs	r3, #16
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	bf00      	nop
 80043a2:	e144      	b.n	800462e <UART_SetConfig+0x34e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a8d      	ldr	r2, [pc, #564]	; (80045e0 <UART_SetConfig+0x300>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d134      	bne.n	8004418 <UART_SetConfig+0x138>
 80043ae:	4b8b      	ldr	r3, [pc, #556]	; (80045dc <UART_SetConfig+0x2fc>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b0c      	cmp	r3, #12
 80043ba:	d829      	bhi.n	8004410 <UART_SetConfig+0x130>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <UART_SetConfig+0xe4>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043f9 	.word	0x080043f9
 80043c8:	08004411 	.word	0x08004411
 80043cc:	08004411 	.word	0x08004411
 80043d0:	08004411 	.word	0x08004411
 80043d4:	08004405 	.word	0x08004405
 80043d8:	08004411 	.word	0x08004411
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004411 	.word	0x08004411
 80043e4:	080043ff 	.word	0x080043ff
 80043e8:	08004411 	.word	0x08004411
 80043ec:	08004411 	.word	0x08004411
 80043f0:	08004411 	.word	0x08004411
 80043f4:	0800440b 	.word	0x0800440b
 80043f8:	2300      	movs	r3, #0
 80043fa:	77fb      	strb	r3, [r7, #31]
 80043fc:	e117      	b.n	800462e <UART_SetConfig+0x34e>
 80043fe:	2302      	movs	r3, #2
 8004400:	77fb      	strb	r3, [r7, #31]
 8004402:	e114      	b.n	800462e <UART_SetConfig+0x34e>
 8004404:	2304      	movs	r3, #4
 8004406:	77fb      	strb	r3, [r7, #31]
 8004408:	e111      	b.n	800462e <UART_SetConfig+0x34e>
 800440a:	2308      	movs	r3, #8
 800440c:	77fb      	strb	r3, [r7, #31]
 800440e:	e10e      	b.n	800462e <UART_SetConfig+0x34e>
 8004410:	2310      	movs	r3, #16
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	bf00      	nop
 8004416:	e10a      	b.n	800462e <UART_SetConfig+0x34e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a71      	ldr	r2, [pc, #452]	; (80045e4 <UART_SetConfig+0x304>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d120      	bne.n	8004464 <UART_SetConfig+0x184>
 8004422:	4b6e      	ldr	r3, [pc, #440]	; (80045dc <UART_SetConfig+0x2fc>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800442c:	2b10      	cmp	r3, #16
 800442e:	d00f      	beq.n	8004450 <UART_SetConfig+0x170>
 8004430:	2b10      	cmp	r3, #16
 8004432:	d802      	bhi.n	800443a <UART_SetConfig+0x15a>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <UART_SetConfig+0x164>
 8004438:	e010      	b.n	800445c <UART_SetConfig+0x17c>
 800443a:	2b20      	cmp	r3, #32
 800443c:	d005      	beq.n	800444a <UART_SetConfig+0x16a>
 800443e:	2b30      	cmp	r3, #48	; 0x30
 8004440:	d009      	beq.n	8004456 <UART_SetConfig+0x176>
 8004442:	e00b      	b.n	800445c <UART_SetConfig+0x17c>
 8004444:	2300      	movs	r3, #0
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e0f1      	b.n	800462e <UART_SetConfig+0x34e>
 800444a:	2302      	movs	r3, #2
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e0ee      	b.n	800462e <UART_SetConfig+0x34e>
 8004450:	2304      	movs	r3, #4
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e0eb      	b.n	800462e <UART_SetConfig+0x34e>
 8004456:	2308      	movs	r3, #8
 8004458:	77fb      	strb	r3, [r7, #31]
 800445a:	e0e8      	b.n	800462e <UART_SetConfig+0x34e>
 800445c:	2310      	movs	r3, #16
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	bf00      	nop
 8004462:	e0e4      	b.n	800462e <UART_SetConfig+0x34e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a5f      	ldr	r2, [pc, #380]	; (80045e8 <UART_SetConfig+0x308>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d120      	bne.n	80044b0 <UART_SetConfig+0x1d0>
 800446e:	4b5b      	ldr	r3, [pc, #364]	; (80045dc <UART_SetConfig+0x2fc>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d00f      	beq.n	800449c <UART_SetConfig+0x1bc>
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d802      	bhi.n	8004486 <UART_SetConfig+0x1a6>
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <UART_SetConfig+0x1b0>
 8004484:	e010      	b.n	80044a8 <UART_SetConfig+0x1c8>
 8004486:	2b80      	cmp	r3, #128	; 0x80
 8004488:	d005      	beq.n	8004496 <UART_SetConfig+0x1b6>
 800448a:	2bc0      	cmp	r3, #192	; 0xc0
 800448c:	d009      	beq.n	80044a2 <UART_SetConfig+0x1c2>
 800448e:	e00b      	b.n	80044a8 <UART_SetConfig+0x1c8>
 8004490:	2300      	movs	r3, #0
 8004492:	77fb      	strb	r3, [r7, #31]
 8004494:	e0cb      	b.n	800462e <UART_SetConfig+0x34e>
 8004496:	2302      	movs	r3, #2
 8004498:	77fb      	strb	r3, [r7, #31]
 800449a:	e0c8      	b.n	800462e <UART_SetConfig+0x34e>
 800449c:	2304      	movs	r3, #4
 800449e:	77fb      	strb	r3, [r7, #31]
 80044a0:	e0c5      	b.n	800462e <UART_SetConfig+0x34e>
 80044a2:	2308      	movs	r3, #8
 80044a4:	77fb      	strb	r3, [r7, #31]
 80044a6:	e0c2      	b.n	800462e <UART_SetConfig+0x34e>
 80044a8:	2310      	movs	r3, #16
 80044aa:	77fb      	strb	r3, [r7, #31]
 80044ac:	bf00      	nop
 80044ae:	e0be      	b.n	800462e <UART_SetConfig+0x34e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a4d      	ldr	r2, [pc, #308]	; (80045ec <UART_SetConfig+0x30c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d124      	bne.n	8004504 <UART_SetConfig+0x224>
 80044ba:	4b48      	ldr	r3, [pc, #288]	; (80045dc <UART_SetConfig+0x2fc>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c8:	d012      	beq.n	80044f0 <UART_SetConfig+0x210>
 80044ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ce:	d802      	bhi.n	80044d6 <UART_SetConfig+0x1f6>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <UART_SetConfig+0x204>
 80044d4:	e012      	b.n	80044fc <UART_SetConfig+0x21c>
 80044d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044da:	d006      	beq.n	80044ea <UART_SetConfig+0x20a>
 80044dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e0:	d009      	beq.n	80044f6 <UART_SetConfig+0x216>
 80044e2:	e00b      	b.n	80044fc <UART_SetConfig+0x21c>
 80044e4:	2300      	movs	r3, #0
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e0a1      	b.n	800462e <UART_SetConfig+0x34e>
 80044ea:	2302      	movs	r3, #2
 80044ec:	77fb      	strb	r3, [r7, #31]
 80044ee:	e09e      	b.n	800462e <UART_SetConfig+0x34e>
 80044f0:	2304      	movs	r3, #4
 80044f2:	77fb      	strb	r3, [r7, #31]
 80044f4:	e09b      	b.n	800462e <UART_SetConfig+0x34e>
 80044f6:	2308      	movs	r3, #8
 80044f8:	77fb      	strb	r3, [r7, #31]
 80044fa:	e098      	b.n	800462e <UART_SetConfig+0x34e>
 80044fc:	2310      	movs	r3, #16
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	bf00      	nop
 8004502:	e094      	b.n	800462e <UART_SetConfig+0x34e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a39      	ldr	r2, [pc, #228]	; (80045f0 <UART_SetConfig+0x310>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d124      	bne.n	8004558 <UART_SetConfig+0x278>
 800450e:	4b33      	ldr	r3, [pc, #204]	; (80045dc <UART_SetConfig+0x2fc>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451c:	d012      	beq.n	8004544 <UART_SetConfig+0x264>
 800451e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004522:	d802      	bhi.n	800452a <UART_SetConfig+0x24a>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <UART_SetConfig+0x258>
 8004528:	e012      	b.n	8004550 <UART_SetConfig+0x270>
 800452a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800452e:	d006      	beq.n	800453e <UART_SetConfig+0x25e>
 8004530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004534:	d009      	beq.n	800454a <UART_SetConfig+0x26a>
 8004536:	e00b      	b.n	8004550 <UART_SetConfig+0x270>
 8004538:	2301      	movs	r3, #1
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e077      	b.n	800462e <UART_SetConfig+0x34e>
 800453e:	2302      	movs	r3, #2
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e074      	b.n	800462e <UART_SetConfig+0x34e>
 8004544:	2304      	movs	r3, #4
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e071      	b.n	800462e <UART_SetConfig+0x34e>
 800454a:	2308      	movs	r3, #8
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e06e      	b.n	800462e <UART_SetConfig+0x34e>
 8004550:	2310      	movs	r3, #16
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	bf00      	nop
 8004556:	e06a      	b.n	800462e <UART_SetConfig+0x34e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a25      	ldr	r2, [pc, #148]	; (80045f4 <UART_SetConfig+0x314>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d124      	bne.n	80045ac <UART_SetConfig+0x2cc>
 8004562:	4b1e      	ldr	r3, [pc, #120]	; (80045dc <UART_SetConfig+0x2fc>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800456c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004570:	d012      	beq.n	8004598 <UART_SetConfig+0x2b8>
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004576:	d802      	bhi.n	800457e <UART_SetConfig+0x29e>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <UART_SetConfig+0x2ac>
 800457c:	e012      	b.n	80045a4 <UART_SetConfig+0x2c4>
 800457e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004582:	d006      	beq.n	8004592 <UART_SetConfig+0x2b2>
 8004584:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004588:	d009      	beq.n	800459e <UART_SetConfig+0x2be>
 800458a:	e00b      	b.n	80045a4 <UART_SetConfig+0x2c4>
 800458c:	2300      	movs	r3, #0
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e04d      	b.n	800462e <UART_SetConfig+0x34e>
 8004592:	2302      	movs	r3, #2
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e04a      	b.n	800462e <UART_SetConfig+0x34e>
 8004598:	2304      	movs	r3, #4
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e047      	b.n	800462e <UART_SetConfig+0x34e>
 800459e:	2308      	movs	r3, #8
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e044      	b.n	800462e <UART_SetConfig+0x34e>
 80045a4:	2310      	movs	r3, #16
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	bf00      	nop
 80045aa:	e040      	b.n	800462e <UART_SetConfig+0x34e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <UART_SetConfig+0x318>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d139      	bne.n	800462a <UART_SetConfig+0x34a>
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <UART_SetConfig+0x2fc>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045c4:	d027      	beq.n	8004616 <UART_SetConfig+0x336>
 80045c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ca:	d817      	bhi.n	80045fc <UART_SetConfig+0x31c>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01c      	beq.n	800460a <UART_SetConfig+0x32a>
 80045d0:	e027      	b.n	8004622 <UART_SetConfig+0x342>
 80045d2:	bf00      	nop
 80045d4:	efff69f3 	.word	0xefff69f3
 80045d8:	40011000 	.word	0x40011000
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40004400 	.word	0x40004400
 80045e4:	40004800 	.word	0x40004800
 80045e8:	40004c00 	.word	0x40004c00
 80045ec:	40005000 	.word	0x40005000
 80045f0:	40011400 	.word	0x40011400
 80045f4:	40007800 	.word	0x40007800
 80045f8:	40007c00 	.word	0x40007c00
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004600:	d006      	beq.n	8004610 <UART_SetConfig+0x330>
 8004602:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004606:	d009      	beq.n	800461c <UART_SetConfig+0x33c>
 8004608:	e00b      	b.n	8004622 <UART_SetConfig+0x342>
 800460a:	2300      	movs	r3, #0
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e00e      	b.n	800462e <UART_SetConfig+0x34e>
 8004610:	2302      	movs	r3, #2
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e00b      	b.n	800462e <UART_SetConfig+0x34e>
 8004616:	2304      	movs	r3, #4
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e008      	b.n	800462e <UART_SetConfig+0x34e>
 800461c:	2308      	movs	r3, #8
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e005      	b.n	800462e <UART_SetConfig+0x34e>
 8004622:	2310      	movs	r3, #16
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	bf00      	nop
 8004628:	e001      	b.n	800462e <UART_SetConfig+0x34e>
 800462a:	2310      	movs	r3, #16
 800462c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004636:	d17f      	bne.n	8004738 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004638:	7ffb      	ldrb	r3, [r7, #31]
 800463a:	2b08      	cmp	r3, #8
 800463c:	d85c      	bhi.n	80046f8 <UART_SetConfig+0x418>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <UART_SetConfig+0x364>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004669 	.word	0x08004669
 8004648:	08004689 	.word	0x08004689
 800464c:	080046a9 	.word	0x080046a9
 8004650:	080046f9 	.word	0x080046f9
 8004654:	080046c1 	.word	0x080046c1
 8004658:	080046f9 	.word	0x080046f9
 800465c:	080046f9 	.word	0x080046f9
 8004660:	080046f9 	.word	0x080046f9
 8004664:	080046e1 	.word	0x080046e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004668:	f7ff f90c 	bl	8003884 <HAL_RCC_GetPCLK1Freq>
 800466c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	005a      	lsls	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	441a      	add	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	b29b      	uxth	r3, r3
 8004684:	61bb      	str	r3, [r7, #24]
        break;
 8004686:	e03a      	b.n	80046fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004688:	f7ff f910 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 800468c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	005a      	lsls	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	61bb      	str	r3, [r7, #24]
        break;
 80046a6:	e02a      	b.n	80046fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	085a      	lsrs	r2, r3, #1
 80046ae:	4b5f      	ldr	r3, [pc, #380]	; (800482c <UART_SetConfig+0x54c>)
 80046b0:	4413      	add	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6852      	ldr	r2, [r2, #4]
 80046b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	61bb      	str	r3, [r7, #24]
        break;
 80046be:	e01e      	b.n	80046fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c0:	f7fe fffc 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 80046c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	005a      	lsls	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	441a      	add	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	b29b      	uxth	r3, r3
 80046dc:	61bb      	str	r3, [r7, #24]
        break;
 80046de:	e00e      	b.n	80046fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	61bb      	str	r3, [r7, #24]
        break;
 80046f6:	e002      	b.n	80046fe <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
        break;
 80046fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b0f      	cmp	r3, #15
 8004702:	d916      	bls.n	8004732 <UART_SetConfig+0x452>
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470a:	d212      	bcs.n	8004732 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f023 030f 	bic.w	r3, r3, #15
 8004714:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	b29b      	uxth	r3, r3
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	b29a      	uxth	r2, r3
 8004722:	897b      	ldrh	r3, [r7, #10]
 8004724:	4313      	orrs	r3, r2
 8004726:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	897a      	ldrh	r2, [r7, #10]
 800472e:	60da      	str	r2, [r3, #12]
 8004730:	e070      	b.n	8004814 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
 8004736:	e06d      	b.n	8004814 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004738:	7ffb      	ldrb	r3, [r7, #31]
 800473a:	2b08      	cmp	r3, #8
 800473c:	d859      	bhi.n	80047f2 <UART_SetConfig+0x512>
 800473e:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <UART_SetConfig+0x464>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	08004769 	.word	0x08004769
 8004748:	08004787 	.word	0x08004787
 800474c:	080047a5 	.word	0x080047a5
 8004750:	080047f3 	.word	0x080047f3
 8004754:	080047bd 	.word	0x080047bd
 8004758:	080047f3 	.word	0x080047f3
 800475c:	080047f3 	.word	0x080047f3
 8004760:	080047f3 	.word	0x080047f3
 8004764:	080047db 	.word	0x080047db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004768:	f7ff f88c 	bl	8003884 <HAL_RCC_GetPCLK1Freq>
 800476c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	085a      	lsrs	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	441a      	add	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	b29b      	uxth	r3, r3
 8004782:	61bb      	str	r3, [r7, #24]
        break;
 8004784:	e038      	b.n	80047f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004786:	f7ff f891 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 800478a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	085a      	lsrs	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	441a      	add	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	fbb2 f3f3 	udiv	r3, r2, r3
 800479e:	b29b      	uxth	r3, r3
 80047a0:	61bb      	str	r3, [r7, #24]
        break;
 80047a2:	e029      	b.n	80047f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	085a      	lsrs	r2, r3, #1
 80047aa:	4b21      	ldr	r3, [pc, #132]	; (8004830 <UART_SetConfig+0x550>)
 80047ac:	4413      	add	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6852      	ldr	r2, [r2, #4]
 80047b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	61bb      	str	r3, [r7, #24]
        break;
 80047ba:	e01d      	b.n	80047f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047bc:	f7fe ff7e 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 80047c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	085a      	lsrs	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	441a      	add	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	61bb      	str	r3, [r7, #24]
        break;
 80047d8:	e00e      	b.n	80047f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	61bb      	str	r3, [r7, #24]
        break;
 80047f0:	e002      	b.n	80047f8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
        break;
 80047f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b0f      	cmp	r3, #15
 80047fc:	d908      	bls.n	8004810 <UART_SetConfig+0x530>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004804:	d204      	bcs.n	8004810 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	e001      	b.n	8004814 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004820:	7dfb      	ldrb	r3, [r7, #23]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	01e84800 	.word	0x01e84800
 8004830:	00f42400 	.word	0x00f42400

08004834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01a      	beq.n	800494a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004932:	d10a      	bne.n	800494a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af02      	add	r7, sp, #8
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004986:	f7fc fca1 	bl	80012cc <HAL_GetTick>
 800498a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b08      	cmp	r3, #8
 8004998:	d10e      	bne.n	80049b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800499a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f82a 	bl	8004a02 <UART_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e020      	b.n	80049fa <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d10e      	bne.n	80049e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f814 	bl	8004a02 <UART_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e00a      	b.n	80049fa <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a12:	e05d      	b.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d059      	beq.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1c:	f7fc fc56 	bl	80012cc <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d11b      	bne.n	8004a6a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e042      	b.n	8004af0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02b      	beq.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a86:	d123      	bne.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a90:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aa0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0201 	bic.w	r2, r2, #1
 8004ab0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e00f      	b.n	8004af0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d092      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af8:	b084      	sub	sp, #16
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	f107 001c 	add.w	r0, r7, #28
 8004b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d120      	bne.n	8004b52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	4b20      	ldr	r3, [pc, #128]	; (8004ba4 <USB_CoreInit+0xac>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d105      	bne.n	8004b46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa52 	bl	8004ff0 <USB_CoreReset>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	73fb      	strb	r3, [r7, #15]
 8004b50:	e010      	b.n	8004b74 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa46 	bl	8004ff0 <USB_CoreReset>
 8004b64:	4603      	mov	r3, r0
 8004b66:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d10b      	bne.n	8004b92 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f043 0206 	orr.w	r2, r3, #6
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f043 0220 	orr.w	r2, r3, #32
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b9e:	b004      	add	sp, #16
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	ffbdffbf 	.word	0xffbdffbf

08004ba8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f023 0201 	bic.w	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d106      	bne.n	8004bf6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
 8004bf4:	e00b      	b.n	8004c0e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	60da      	str	r2, [r3, #12]
 8004c08:	e001      	b.n	8004c0e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e003      	b.n	8004c16 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c0e:	2032      	movs	r0, #50	; 0x32
 8004c10:	f7fc fb68 	bl	80012e4 <HAL_Delay>

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c20:	b084      	sub	sp, #16
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	e009      	b.n	8004c54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	3340      	adds	r3, #64	; 0x40
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	3301      	adds	r3, #1
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2b0e      	cmp	r3, #14
 8004c58:	d9f2      	bls.n	8004c40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d11c      	bne.n	8004c9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c6e:	f043 0302 	orr.w	r3, r3, #2
 8004c72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e005      	b.n	8004ca6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cac:	461a      	mov	r2, r3
 8004cae:	2300      	movs	r3, #0
 8004cb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	4619      	mov	r1, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	680b      	ldr	r3, [r1, #0]
 8004cc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d10c      	bne.n	8004ce6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f959 	bl	8004f8c <USB_SetDevSpeed>
 8004cda:	e018      	b.n	8004d0e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cdc:	2101      	movs	r1, #1
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f954 	bl	8004f8c <USB_SetDevSpeed>
 8004ce4:	e013      	b.n	8004d0e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d10c      	bne.n	8004d06 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f949 	bl	8004f8c <USB_SetDevSpeed>
 8004cfa:	e008      	b.n	8004d0e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f944 	bl	8004f8c <USB_SetDevSpeed>
 8004d04:	e003      	b.n	8004d0e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d06:	2103      	movs	r1, #3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f93f 	bl	8004f8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d0e:	2110      	movs	r1, #16
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f8f3 	bl	8004efc <USB_FlushTxFifo>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f911 	bl	8004f48 <USB_FlushRxFifo>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	461a      	mov	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	461a      	mov	r2, r3
 8004d44:	2300      	movs	r3, #0
 8004d46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2300      	movs	r3, #0
 8004d52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	e043      	b.n	8004de2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d70:	d118      	bne.n	8004da4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	461a      	mov	r2, r3
 8004d86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	e013      	b.n	8004db6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e008      	b.n	8004db6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	3301      	adds	r3, #1
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d3b7      	bcc.n	8004d5a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e043      	b.n	8004e78 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e06:	d118      	bne.n	8004e3a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e013      	b.n	8004e4c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	461a      	mov	r2, r3
 8004e32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	e008      	b.n	8004e4c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e46:	461a      	mov	r2, r3
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	3301      	adds	r3, #1
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d3b7      	bcc.n	8004df0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ea0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f043 0210 	orr.w	r2, r3, #16
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <USB_DevInit+0x2d4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f043 0208 	orr.w	r2, r3, #8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d105      	bne.n	8004ee4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <USB_DevInit+0x2d8>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ef0:	b004      	add	sp, #16
 8004ef2:	4770      	bx	lr
 8004ef4:	803c3800 	.word	0x803c3800
 8004ef8:	40000004 	.word	0x40000004

08004efc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	019b      	lsls	r3, r3, #6
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <USB_FlushTxFifo+0x48>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e006      	b.n	8004f36 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d0f0      	beq.n	8004f16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	00030d40 	.word	0x00030d40

08004f48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2210      	movs	r2, #16
 8004f58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <USB_FlushRxFifo+0x40>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e006      	b.n	8004f7a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d0f0      	beq.n	8004f5a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	00030d40 	.word	0x00030d40

08004f8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fac:	4313      	orrs	r3, r2
 8004fae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004fde:	2003      	movs	r0, #3
 8004fe0:	f7fc f980 	bl	80012e4 <HAL_Delay>

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4a13      	ldr	r2, [pc, #76]	; (8005054 <USB_CoreReset+0x64>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e01b      	b.n	8005046 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	daf2      	bge.n	8004ffc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f043 0201 	orr.w	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <USB_CoreReset+0x64>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d901      	bls.n	8005038 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e006      	b.n	8005046 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b01      	cmp	r3, #1
 8005042:	d0f0      	beq.n	8005026 <USB_CoreReset+0x36>

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	00030d40 	.word	0x00030d40

08005058 <__errno>:
 8005058:	4b01      	ldr	r3, [pc, #4]	; (8005060 <__errno+0x8>)
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	2000000c 	.word	0x2000000c

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4e0d      	ldr	r6, [pc, #52]	; (800509c <__libc_init_array+0x38>)
 8005068:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506a:	1ba4      	subs	r4, r4, r6
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	2500      	movs	r5, #0
 8005070:	42a5      	cmp	r5, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	4e0b      	ldr	r6, [pc, #44]	; (80050a4 <__libc_init_array+0x40>)
 8005076:	4c0c      	ldr	r4, [pc, #48]	; (80050a8 <__libc_init_array+0x44>)
 8005078:	f002 fab8 	bl	80075ec <_init>
 800507c:	1ba4      	subs	r4, r4, r6
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	2500      	movs	r5, #0
 8005082:	42a5      	cmp	r5, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800508c:	4798      	blx	r3
 800508e:	3501      	adds	r5, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005096:	4798      	blx	r3
 8005098:	3501      	adds	r5, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	08007908 	.word	0x08007908
 80050a0:	08007908 	.word	0x08007908
 80050a4:	08007908 	.word	0x08007908
 80050a8:	0800790c 	.word	0x0800790c

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <__cvt>:
 80050bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050be:	ed2d 8b02 	vpush	{d8}
 80050c2:	eeb0 8b40 	vmov.f64	d8, d0
 80050c6:	b085      	sub	sp, #20
 80050c8:	4617      	mov	r7, r2
 80050ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80050cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80050ce:	ee18 2a90 	vmov	r2, s17
 80050d2:	f025 0520 	bic.w	r5, r5, #32
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	bfb6      	itet	lt
 80050da:	222d      	movlt	r2, #45	; 0x2d
 80050dc:	2200      	movge	r2, #0
 80050de:	eeb1 8b40 	vneglt.f64	d8, d0
 80050e2:	2d46      	cmp	r5, #70	; 0x46
 80050e4:	460c      	mov	r4, r1
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	d004      	beq.n	80050f4 <__cvt+0x38>
 80050ea:	2d45      	cmp	r5, #69	; 0x45
 80050ec:	d100      	bne.n	80050f0 <__cvt+0x34>
 80050ee:	3401      	adds	r4, #1
 80050f0:	2102      	movs	r1, #2
 80050f2:	e000      	b.n	80050f6 <__cvt+0x3a>
 80050f4:	2103      	movs	r1, #3
 80050f6:	ab03      	add	r3, sp, #12
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	ab02      	add	r3, sp, #8
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	4622      	mov	r2, r4
 8005100:	4633      	mov	r3, r6
 8005102:	eeb0 0b48 	vmov.f64	d0, d8
 8005106:	f000 fcb7 	bl	8005a78 <_dtoa_r>
 800510a:	2d47      	cmp	r5, #71	; 0x47
 800510c:	d101      	bne.n	8005112 <__cvt+0x56>
 800510e:	07fb      	lsls	r3, r7, #31
 8005110:	d51e      	bpl.n	8005150 <__cvt+0x94>
 8005112:	2d46      	cmp	r5, #70	; 0x46
 8005114:	eb00 0304 	add.w	r3, r0, r4
 8005118:	d10c      	bne.n	8005134 <__cvt+0x78>
 800511a:	7802      	ldrb	r2, [r0, #0]
 800511c:	2a30      	cmp	r2, #48	; 0x30
 800511e:	d107      	bne.n	8005130 <__cvt+0x74>
 8005120:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	bf1c      	itt	ne
 800512a:	f1c4 0401 	rsbne	r4, r4, #1
 800512e:	6034      	strne	r4, [r6, #0]
 8005130:	6832      	ldr	r2, [r6, #0]
 8005132:	4413      	add	r3, r2
 8005134:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513c:	d007      	beq.n	800514e <__cvt+0x92>
 800513e:	2130      	movs	r1, #48	; 0x30
 8005140:	9a03      	ldr	r2, [sp, #12]
 8005142:	429a      	cmp	r2, r3
 8005144:	d204      	bcs.n	8005150 <__cvt+0x94>
 8005146:	1c54      	adds	r4, r2, #1
 8005148:	9403      	str	r4, [sp, #12]
 800514a:	7011      	strb	r1, [r2, #0]
 800514c:	e7f8      	b.n	8005140 <__cvt+0x84>
 800514e:	9303      	str	r3, [sp, #12]
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005154:	1a1b      	subs	r3, r3, r0
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	b005      	add	sp, #20
 800515a:	ecbd 8b02 	vpop	{d8}
 800515e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005160 <__exponent>:
 8005160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005162:	2900      	cmp	r1, #0
 8005164:	4604      	mov	r4, r0
 8005166:	bfba      	itte	lt
 8005168:	4249      	neglt	r1, r1
 800516a:	232d      	movlt	r3, #45	; 0x2d
 800516c:	232b      	movge	r3, #43	; 0x2b
 800516e:	2909      	cmp	r1, #9
 8005170:	f804 2b02 	strb.w	r2, [r4], #2
 8005174:	7043      	strb	r3, [r0, #1]
 8005176:	dd20      	ble.n	80051ba <__exponent+0x5a>
 8005178:	f10d 0307 	add.w	r3, sp, #7
 800517c:	461f      	mov	r7, r3
 800517e:	260a      	movs	r6, #10
 8005180:	fb91 f5f6 	sdiv	r5, r1, r6
 8005184:	fb06 1115 	mls	r1, r6, r5, r1
 8005188:	3130      	adds	r1, #48	; 0x30
 800518a:	2d09      	cmp	r5, #9
 800518c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005190:	f103 32ff 	add.w	r2, r3, #4294967295
 8005194:	4629      	mov	r1, r5
 8005196:	dc09      	bgt.n	80051ac <__exponent+0x4c>
 8005198:	3130      	adds	r1, #48	; 0x30
 800519a:	3b02      	subs	r3, #2
 800519c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80051a0:	42bb      	cmp	r3, r7
 80051a2:	4622      	mov	r2, r4
 80051a4:	d304      	bcc.n	80051b0 <__exponent+0x50>
 80051a6:	1a10      	subs	r0, r2, r0
 80051a8:	b003      	add	sp, #12
 80051aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ac:	4613      	mov	r3, r2
 80051ae:	e7e7      	b.n	8005180 <__exponent+0x20>
 80051b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051b4:	f804 2b01 	strb.w	r2, [r4], #1
 80051b8:	e7f2      	b.n	80051a0 <__exponent+0x40>
 80051ba:	2330      	movs	r3, #48	; 0x30
 80051bc:	4419      	add	r1, r3
 80051be:	7083      	strb	r3, [r0, #2]
 80051c0:	1d02      	adds	r2, r0, #4
 80051c2:	70c1      	strb	r1, [r0, #3]
 80051c4:	e7ef      	b.n	80051a6 <__exponent+0x46>
	...

080051c8 <_printf_float>:
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	b08d      	sub	sp, #52	; 0x34
 80051ce:	460c      	mov	r4, r1
 80051d0:	4616      	mov	r6, r2
 80051d2:	461f      	mov	r7, r3
 80051d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80051d8:	4605      	mov	r5, r0
 80051da:	f001 fa63 	bl	80066a4 <_localeconv_r>
 80051de:	f8d0 b000 	ldr.w	fp, [r0]
 80051e2:	4658      	mov	r0, fp
 80051e4:	f7fb f82c 	bl	8000240 <strlen>
 80051e8:	2300      	movs	r3, #0
 80051ea:	930a      	str	r3, [sp, #40]	; 0x28
 80051ec:	f8d8 3000 	ldr.w	r3, [r8]
 80051f0:	9005      	str	r0, [sp, #20]
 80051f2:	3307      	adds	r3, #7
 80051f4:	f023 0307 	bic.w	r3, r3, #7
 80051f8:	f103 0108 	add.w	r1, r3, #8
 80051fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	f8c8 1000 	str.w	r1, [r8]
 8005206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800520a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800520e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8005498 <_printf_float+0x2d0>
 8005212:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005216:	eeb0 6bc0 	vabs.f64	d6, d0
 800521a:	eeb4 6b47 	vcmp.f64	d6, d7
 800521e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005222:	dd24      	ble.n	800526e <_printf_float+0xa6>
 8005224:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522c:	d502      	bpl.n	8005234 <_printf_float+0x6c>
 800522e:	232d      	movs	r3, #45	; 0x2d
 8005230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005234:	499a      	ldr	r1, [pc, #616]	; (80054a0 <_printf_float+0x2d8>)
 8005236:	4b9b      	ldr	r3, [pc, #620]	; (80054a4 <_printf_float+0x2dc>)
 8005238:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800523c:	bf8c      	ite	hi
 800523e:	4688      	movhi	r8, r1
 8005240:	4698      	movls	r8, r3
 8005242:	f022 0204 	bic.w	r2, r2, #4
 8005246:	2303      	movs	r3, #3
 8005248:	6123      	str	r3, [r4, #16]
 800524a:	6022      	str	r2, [r4, #0]
 800524c:	f04f 0a00 	mov.w	sl, #0
 8005250:	9700      	str	r7, [sp, #0]
 8005252:	4633      	mov	r3, r6
 8005254:	aa0b      	add	r2, sp, #44	; 0x2c
 8005256:	4621      	mov	r1, r4
 8005258:	4628      	mov	r0, r5
 800525a:	f000 f9e1 	bl	8005620 <_printf_common>
 800525e:	3001      	adds	r0, #1
 8005260:	f040 8089 	bne.w	8005376 <_printf_float+0x1ae>
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	b00d      	add	sp, #52	; 0x34
 800526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526e:	eeb4 0b40 	vcmp.f64	d0, d0
 8005272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005276:	d702      	bvc.n	800527e <_printf_float+0xb6>
 8005278:	498b      	ldr	r1, [pc, #556]	; (80054a8 <_printf_float+0x2e0>)
 800527a:	4b8c      	ldr	r3, [pc, #560]	; (80054ac <_printf_float+0x2e4>)
 800527c:	e7dc      	b.n	8005238 <_printf_float+0x70>
 800527e:	6861      	ldr	r1, [r4, #4]
 8005280:	1c4b      	adds	r3, r1, #1
 8005282:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005286:	ab0a      	add	r3, sp, #40	; 0x28
 8005288:	a809      	add	r0, sp, #36	; 0x24
 800528a:	d13b      	bne.n	8005304 <_printf_float+0x13c>
 800528c:	2106      	movs	r1, #6
 800528e:	6061      	str	r1, [r4, #4]
 8005290:	f04f 0c00 	mov.w	ip, #0
 8005294:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8005298:	e9cd 0900 	strd	r0, r9, [sp]
 800529c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052a0:	6022      	str	r2, [r4, #0]
 80052a2:	6861      	ldr	r1, [r4, #4]
 80052a4:	4628      	mov	r0, r5
 80052a6:	f7ff ff09 	bl	80050bc <__cvt>
 80052aa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80052ae:	2b47      	cmp	r3, #71	; 0x47
 80052b0:	4680      	mov	r8, r0
 80052b2:	d109      	bne.n	80052c8 <_printf_float+0x100>
 80052b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b6:	1cd8      	adds	r0, r3, #3
 80052b8:	db02      	blt.n	80052c0 <_printf_float+0xf8>
 80052ba:	6862      	ldr	r2, [r4, #4]
 80052bc:	4293      	cmp	r3, r2
 80052be:	dd47      	ble.n	8005350 <_printf_float+0x188>
 80052c0:	f1a9 0902 	sub.w	r9, r9, #2
 80052c4:	fa5f f989 	uxtb.w	r9, r9
 80052c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ce:	d824      	bhi.n	800531a <_printf_float+0x152>
 80052d0:	3901      	subs	r1, #1
 80052d2:	464a      	mov	r2, r9
 80052d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052d8:	9109      	str	r1, [sp, #36]	; 0x24
 80052da:	f7ff ff41 	bl	8005160 <__exponent>
 80052de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052e0:	1813      	adds	r3, r2, r0
 80052e2:	2a01      	cmp	r2, #1
 80052e4:	4682      	mov	sl, r0
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	dc02      	bgt.n	80052f0 <_printf_float+0x128>
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	07d1      	lsls	r1, r2, #31
 80052ee:	d501      	bpl.n	80052f4 <_printf_float+0x12c>
 80052f0:	3301      	adds	r3, #1
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0a9      	beq.n	8005250 <_printf_float+0x88>
 80052fc:	232d      	movs	r3, #45	; 0x2d
 80052fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005302:	e7a5      	b.n	8005250 <_printf_float+0x88>
 8005304:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8005308:	f000 8178 	beq.w	80055fc <_printf_float+0x434>
 800530c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005310:	d1be      	bne.n	8005290 <_printf_float+0xc8>
 8005312:	2900      	cmp	r1, #0
 8005314:	d1bc      	bne.n	8005290 <_printf_float+0xc8>
 8005316:	2101      	movs	r1, #1
 8005318:	e7b9      	b.n	800528e <_printf_float+0xc6>
 800531a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800531e:	d119      	bne.n	8005354 <_printf_float+0x18c>
 8005320:	2900      	cmp	r1, #0
 8005322:	6863      	ldr	r3, [r4, #4]
 8005324:	dd0c      	ble.n	8005340 <_printf_float+0x178>
 8005326:	6121      	str	r1, [r4, #16]
 8005328:	b913      	cbnz	r3, 8005330 <_printf_float+0x168>
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	07d2      	lsls	r2, r2, #31
 800532e:	d502      	bpl.n	8005336 <_printf_float+0x16e>
 8005330:	3301      	adds	r3, #1
 8005332:	440b      	add	r3, r1
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005338:	65a3      	str	r3, [r4, #88]	; 0x58
 800533a:	f04f 0a00 	mov.w	sl, #0
 800533e:	e7d9      	b.n	80052f4 <_printf_float+0x12c>
 8005340:	b913      	cbnz	r3, 8005348 <_printf_float+0x180>
 8005342:	6822      	ldr	r2, [r4, #0]
 8005344:	07d0      	lsls	r0, r2, #31
 8005346:	d501      	bpl.n	800534c <_printf_float+0x184>
 8005348:	3302      	adds	r3, #2
 800534a:	e7f3      	b.n	8005334 <_printf_float+0x16c>
 800534c:	2301      	movs	r3, #1
 800534e:	e7f1      	b.n	8005334 <_printf_float+0x16c>
 8005350:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005354:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005358:	4293      	cmp	r3, r2
 800535a:	db05      	blt.n	8005368 <_printf_float+0x1a0>
 800535c:	6822      	ldr	r2, [r4, #0]
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	07d1      	lsls	r1, r2, #31
 8005362:	d5e8      	bpl.n	8005336 <_printf_float+0x16e>
 8005364:	3301      	adds	r3, #1
 8005366:	e7e5      	b.n	8005334 <_printf_float+0x16c>
 8005368:	2b00      	cmp	r3, #0
 800536a:	bfd4      	ite	le
 800536c:	f1c3 0302 	rsble	r3, r3, #2
 8005370:	2301      	movgt	r3, #1
 8005372:	4413      	add	r3, r2
 8005374:	e7de      	b.n	8005334 <_printf_float+0x16c>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	055a      	lsls	r2, r3, #21
 800537a:	d407      	bmi.n	800538c <_printf_float+0x1c4>
 800537c:	6923      	ldr	r3, [r4, #16]
 800537e:	4642      	mov	r2, r8
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	d12a      	bne.n	80053e0 <_printf_float+0x218>
 800538a:	e76b      	b.n	8005264 <_printf_float+0x9c>
 800538c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005390:	f240 80de 	bls.w	8005550 <_printf_float+0x388>
 8005394:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005398:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a0:	d133      	bne.n	800540a <_printf_float+0x242>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4a42      	ldr	r2, [pc, #264]	; (80054b0 <_printf_float+0x2e8>)
 80053a6:	4631      	mov	r1, r6
 80053a8:	4628      	mov	r0, r5
 80053aa:	47b8      	blx	r7
 80053ac:	3001      	adds	r0, #1
 80053ae:	f43f af59 	beq.w	8005264 <_printf_float+0x9c>
 80053b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053b6:	429a      	cmp	r2, r3
 80053b8:	db02      	blt.n	80053c0 <_printf_float+0x1f8>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	07d8      	lsls	r0, r3, #31
 80053be:	d50f      	bpl.n	80053e0 <_printf_float+0x218>
 80053c0:	9b05      	ldr	r3, [sp, #20]
 80053c2:	465a      	mov	r2, fp
 80053c4:	4631      	mov	r1, r6
 80053c6:	4628      	mov	r0, r5
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f af4a 	beq.w	8005264 <_printf_float+0x9c>
 80053d0:	f04f 0800 	mov.w	r8, #0
 80053d4:	f104 091a 	add.w	r9, r4, #26
 80053d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053da:	3b01      	subs	r3, #1
 80053dc:	4543      	cmp	r3, r8
 80053de:	dc09      	bgt.n	80053f4 <_printf_float+0x22c>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	079b      	lsls	r3, r3, #30
 80053e4:	f100 8105 	bmi.w	80055f2 <_printf_float+0x42a>
 80053e8:	68e0      	ldr	r0, [r4, #12]
 80053ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ec:	4298      	cmp	r0, r3
 80053ee:	bfb8      	it	lt
 80053f0:	4618      	movlt	r0, r3
 80053f2:	e739      	b.n	8005268 <_printf_float+0xa0>
 80053f4:	2301      	movs	r3, #1
 80053f6:	464a      	mov	r2, r9
 80053f8:	4631      	mov	r1, r6
 80053fa:	4628      	mov	r0, r5
 80053fc:	47b8      	blx	r7
 80053fe:	3001      	adds	r0, #1
 8005400:	f43f af30 	beq.w	8005264 <_printf_float+0x9c>
 8005404:	f108 0801 	add.w	r8, r8, #1
 8005408:	e7e6      	b.n	80053d8 <_printf_float+0x210>
 800540a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	dc2b      	bgt.n	8005468 <_printf_float+0x2a0>
 8005410:	2301      	movs	r3, #1
 8005412:	4a27      	ldr	r2, [pc, #156]	; (80054b0 <_printf_float+0x2e8>)
 8005414:	4631      	mov	r1, r6
 8005416:	4628      	mov	r0, r5
 8005418:	47b8      	blx	r7
 800541a:	3001      	adds	r0, #1
 800541c:	f43f af22 	beq.w	8005264 <_printf_float+0x9c>
 8005420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005422:	b923      	cbnz	r3, 800542e <_printf_float+0x266>
 8005424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005426:	b913      	cbnz	r3, 800542e <_printf_float+0x266>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	07d9      	lsls	r1, r3, #31
 800542c:	d5d8      	bpl.n	80053e0 <_printf_float+0x218>
 800542e:	9b05      	ldr	r3, [sp, #20]
 8005430:	465a      	mov	r2, fp
 8005432:	4631      	mov	r1, r6
 8005434:	4628      	mov	r0, r5
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	f43f af13 	beq.w	8005264 <_printf_float+0x9c>
 800543e:	f04f 0900 	mov.w	r9, #0
 8005442:	f104 0a1a 	add.w	sl, r4, #26
 8005446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005448:	425b      	negs	r3, r3
 800544a:	454b      	cmp	r3, r9
 800544c:	dc01      	bgt.n	8005452 <_printf_float+0x28a>
 800544e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005450:	e795      	b.n	800537e <_printf_float+0x1b6>
 8005452:	2301      	movs	r3, #1
 8005454:	4652      	mov	r2, sl
 8005456:	4631      	mov	r1, r6
 8005458:	4628      	mov	r0, r5
 800545a:	47b8      	blx	r7
 800545c:	3001      	adds	r0, #1
 800545e:	f43f af01 	beq.w	8005264 <_printf_float+0x9c>
 8005462:	f109 0901 	add.w	r9, r9, #1
 8005466:	e7ee      	b.n	8005446 <_printf_float+0x27e>
 8005468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800546a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800546c:	429a      	cmp	r2, r3
 800546e:	bfa8      	it	ge
 8005470:	461a      	movge	r2, r3
 8005472:	2a00      	cmp	r2, #0
 8005474:	4691      	mov	r9, r2
 8005476:	dd07      	ble.n	8005488 <_printf_float+0x2c0>
 8005478:	4613      	mov	r3, r2
 800547a:	4631      	mov	r1, r6
 800547c:	4642      	mov	r2, r8
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f aeee 	beq.w	8005264 <_printf_float+0x9c>
 8005488:	f104 031a 	add.w	r3, r4, #26
 800548c:	f04f 0a00 	mov.w	sl, #0
 8005490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005494:	9307      	str	r3, [sp, #28]
 8005496:	e017      	b.n	80054c8 <_printf_float+0x300>
 8005498:	ffffffff 	.word	0xffffffff
 800549c:	7fefffff 	.word	0x7fefffff
 80054a0:	08007644 	.word	0x08007644
 80054a4:	08007640 	.word	0x08007640
 80054a8:	0800764c 	.word	0x0800764c
 80054ac:	08007648 	.word	0x08007648
 80054b0:	08007650 	.word	0x08007650
 80054b4:	2301      	movs	r3, #1
 80054b6:	9a07      	ldr	r2, [sp, #28]
 80054b8:	4631      	mov	r1, r6
 80054ba:	4628      	mov	r0, r5
 80054bc:	47b8      	blx	r7
 80054be:	3001      	adds	r0, #1
 80054c0:	f43f aed0 	beq.w	8005264 <_printf_float+0x9c>
 80054c4:	f10a 0a01 	add.w	sl, sl, #1
 80054c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054ca:	9306      	str	r3, [sp, #24]
 80054cc:	eba3 0309 	sub.w	r3, r3, r9
 80054d0:	4553      	cmp	r3, sl
 80054d2:	dcef      	bgt.n	80054b4 <_printf_float+0x2ec>
 80054d4:	9b06      	ldr	r3, [sp, #24]
 80054d6:	4498      	add	r8, r3
 80054d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054dc:	429a      	cmp	r2, r3
 80054de:	db15      	blt.n	800550c <_printf_float+0x344>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	07da      	lsls	r2, r3, #31
 80054e4:	d412      	bmi.n	800550c <_printf_float+0x344>
 80054e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e8:	9a06      	ldr	r2, [sp, #24]
 80054ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054ec:	1a9a      	subs	r2, r3, r2
 80054ee:	eba3 0a01 	sub.w	sl, r3, r1
 80054f2:	4592      	cmp	sl, r2
 80054f4:	bfa8      	it	ge
 80054f6:	4692      	movge	sl, r2
 80054f8:	f1ba 0f00 	cmp.w	sl, #0
 80054fc:	dc0e      	bgt.n	800551c <_printf_float+0x354>
 80054fe:	f04f 0800 	mov.w	r8, #0
 8005502:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005506:	f104 091a 	add.w	r9, r4, #26
 800550a:	e019      	b.n	8005540 <_printf_float+0x378>
 800550c:	9b05      	ldr	r3, [sp, #20]
 800550e:	465a      	mov	r2, fp
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	d1e5      	bne.n	80054e6 <_printf_float+0x31e>
 800551a:	e6a3      	b.n	8005264 <_printf_float+0x9c>
 800551c:	4653      	mov	r3, sl
 800551e:	4642      	mov	r2, r8
 8005520:	4631      	mov	r1, r6
 8005522:	4628      	mov	r0, r5
 8005524:	47b8      	blx	r7
 8005526:	3001      	adds	r0, #1
 8005528:	d1e9      	bne.n	80054fe <_printf_float+0x336>
 800552a:	e69b      	b.n	8005264 <_printf_float+0x9c>
 800552c:	2301      	movs	r3, #1
 800552e:	464a      	mov	r2, r9
 8005530:	4631      	mov	r1, r6
 8005532:	4628      	mov	r0, r5
 8005534:	47b8      	blx	r7
 8005536:	3001      	adds	r0, #1
 8005538:	f43f ae94 	beq.w	8005264 <_printf_float+0x9c>
 800553c:	f108 0801 	add.w	r8, r8, #1
 8005540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	eba3 030a 	sub.w	r3, r3, sl
 800554a:	4543      	cmp	r3, r8
 800554c:	dcee      	bgt.n	800552c <_printf_float+0x364>
 800554e:	e747      	b.n	80053e0 <_printf_float+0x218>
 8005550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005552:	2a01      	cmp	r2, #1
 8005554:	dc01      	bgt.n	800555a <_printf_float+0x392>
 8005556:	07db      	lsls	r3, r3, #31
 8005558:	d539      	bpl.n	80055ce <_printf_float+0x406>
 800555a:	2301      	movs	r3, #1
 800555c:	4642      	mov	r2, r8
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	f43f ae7d 	beq.w	8005264 <_printf_float+0x9c>
 800556a:	9b05      	ldr	r3, [sp, #20]
 800556c:	465a      	mov	r2, fp
 800556e:	4631      	mov	r1, r6
 8005570:	4628      	mov	r0, r5
 8005572:	47b8      	blx	r7
 8005574:	3001      	adds	r0, #1
 8005576:	f108 0801 	add.w	r8, r8, #1
 800557a:	f43f ae73 	beq.w	8005264 <_printf_float+0x9c>
 800557e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005584:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005590:	d018      	beq.n	80055c4 <_printf_float+0x3fc>
 8005592:	4642      	mov	r2, r8
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	d10e      	bne.n	80055bc <_printf_float+0x3f4>
 800559e:	e661      	b.n	8005264 <_printf_float+0x9c>
 80055a0:	2301      	movs	r3, #1
 80055a2:	464a      	mov	r2, r9
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	f43f ae5a 	beq.w	8005264 <_printf_float+0x9c>
 80055b0:	f108 0801 	add.w	r8, r8, #1
 80055b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b6:	3b01      	subs	r3, #1
 80055b8:	4543      	cmp	r3, r8
 80055ba:	dcf1      	bgt.n	80055a0 <_printf_float+0x3d8>
 80055bc:	4653      	mov	r3, sl
 80055be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055c2:	e6dd      	b.n	8005380 <_printf_float+0x1b8>
 80055c4:	f04f 0800 	mov.w	r8, #0
 80055c8:	f104 091a 	add.w	r9, r4, #26
 80055cc:	e7f2      	b.n	80055b4 <_printf_float+0x3ec>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e7df      	b.n	8005592 <_printf_float+0x3ca>
 80055d2:	2301      	movs	r3, #1
 80055d4:	464a      	mov	r2, r9
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f ae41 	beq.w	8005264 <_printf_float+0x9c>
 80055e2:	f108 0801 	add.w	r8, r8, #1
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	4543      	cmp	r3, r8
 80055ee:	dcf0      	bgt.n	80055d2 <_printf_float+0x40a>
 80055f0:	e6fa      	b.n	80053e8 <_printf_float+0x220>
 80055f2:	f04f 0800 	mov.w	r8, #0
 80055f6:	f104 0919 	add.w	r9, r4, #25
 80055fa:	e7f4      	b.n	80055e6 <_printf_float+0x41e>
 80055fc:	2900      	cmp	r1, #0
 80055fe:	f43f ae8a 	beq.w	8005316 <_printf_float+0x14e>
 8005602:	f04f 0c00 	mov.w	ip, #0
 8005606:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800560a:	e9cd 0900 	strd	r0, r9, [sp]
 800560e:	6022      	str	r2, [r4, #0]
 8005610:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005614:	4628      	mov	r0, r5
 8005616:	f7ff fd51 	bl	80050bc <__cvt>
 800561a:	4680      	mov	r8, r0
 800561c:	e64a      	b.n	80052b4 <_printf_float+0xec>
 800561e:	bf00      	nop

08005620 <_printf_common>:
 8005620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005624:	4691      	mov	r9, r2
 8005626:	461f      	mov	r7, r3
 8005628:	688a      	ldr	r2, [r1, #8]
 800562a:	690b      	ldr	r3, [r1, #16]
 800562c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005630:	4293      	cmp	r3, r2
 8005632:	bfb8      	it	lt
 8005634:	4613      	movlt	r3, r2
 8005636:	f8c9 3000 	str.w	r3, [r9]
 800563a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800563e:	4606      	mov	r6, r0
 8005640:	460c      	mov	r4, r1
 8005642:	b112      	cbz	r2, 800564a <_printf_common+0x2a>
 8005644:	3301      	adds	r3, #1
 8005646:	f8c9 3000 	str.w	r3, [r9]
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	0699      	lsls	r1, r3, #26
 800564e:	bf42      	ittt	mi
 8005650:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005654:	3302      	addmi	r3, #2
 8005656:	f8c9 3000 	strmi.w	r3, [r9]
 800565a:	6825      	ldr	r5, [r4, #0]
 800565c:	f015 0506 	ands.w	r5, r5, #6
 8005660:	d107      	bne.n	8005672 <_printf_common+0x52>
 8005662:	f104 0a19 	add.w	sl, r4, #25
 8005666:	68e3      	ldr	r3, [r4, #12]
 8005668:	f8d9 2000 	ldr.w	r2, [r9]
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	42ab      	cmp	r3, r5
 8005670:	dc28      	bgt.n	80056c4 <_printf_common+0xa4>
 8005672:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	3300      	adds	r3, #0
 800567a:	bf18      	it	ne
 800567c:	2301      	movne	r3, #1
 800567e:	0692      	lsls	r2, r2, #26
 8005680:	d42d      	bmi.n	80056de <_printf_common+0xbe>
 8005682:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005686:	4639      	mov	r1, r7
 8005688:	4630      	mov	r0, r6
 800568a:	47c0      	blx	r8
 800568c:	3001      	adds	r0, #1
 800568e:	d020      	beq.n	80056d2 <_printf_common+0xb2>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	68e5      	ldr	r5, [r4, #12]
 8005694:	f8d9 2000 	ldr.w	r2, [r9]
 8005698:	f003 0306 	and.w	r3, r3, #6
 800569c:	2b04      	cmp	r3, #4
 800569e:	bf08      	it	eq
 80056a0:	1aad      	subeq	r5, r5, r2
 80056a2:	68a3      	ldr	r3, [r4, #8]
 80056a4:	6922      	ldr	r2, [r4, #16]
 80056a6:	bf0c      	ite	eq
 80056a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056ac:	2500      	movne	r5, #0
 80056ae:	4293      	cmp	r3, r2
 80056b0:	bfc4      	itt	gt
 80056b2:	1a9b      	subgt	r3, r3, r2
 80056b4:	18ed      	addgt	r5, r5, r3
 80056b6:	f04f 0900 	mov.w	r9, #0
 80056ba:	341a      	adds	r4, #26
 80056bc:	454d      	cmp	r5, r9
 80056be:	d11a      	bne.n	80056f6 <_printf_common+0xd6>
 80056c0:	2000      	movs	r0, #0
 80056c2:	e008      	b.n	80056d6 <_printf_common+0xb6>
 80056c4:	2301      	movs	r3, #1
 80056c6:	4652      	mov	r2, sl
 80056c8:	4639      	mov	r1, r7
 80056ca:	4630      	mov	r0, r6
 80056cc:	47c0      	blx	r8
 80056ce:	3001      	adds	r0, #1
 80056d0:	d103      	bne.n	80056da <_printf_common+0xba>
 80056d2:	f04f 30ff 	mov.w	r0, #4294967295
 80056d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056da:	3501      	adds	r5, #1
 80056dc:	e7c3      	b.n	8005666 <_printf_common+0x46>
 80056de:	18e1      	adds	r1, r4, r3
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	2030      	movs	r0, #48	; 0x30
 80056e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056e8:	4422      	add	r2, r4
 80056ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056f2:	3302      	adds	r3, #2
 80056f4:	e7c5      	b.n	8005682 <_printf_common+0x62>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4622      	mov	r2, r4
 80056fa:	4639      	mov	r1, r7
 80056fc:	4630      	mov	r0, r6
 80056fe:	47c0      	blx	r8
 8005700:	3001      	adds	r0, #1
 8005702:	d0e6      	beq.n	80056d2 <_printf_common+0xb2>
 8005704:	f109 0901 	add.w	r9, r9, #1
 8005708:	e7d8      	b.n	80056bc <_printf_common+0x9c>
	...

0800570c <_printf_i>:
 800570c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005710:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005714:	460c      	mov	r4, r1
 8005716:	7e09      	ldrb	r1, [r1, #24]
 8005718:	b085      	sub	sp, #20
 800571a:	296e      	cmp	r1, #110	; 0x6e
 800571c:	4617      	mov	r7, r2
 800571e:	4606      	mov	r6, r0
 8005720:	4698      	mov	r8, r3
 8005722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005724:	f000 80b3 	beq.w	800588e <_printf_i+0x182>
 8005728:	d822      	bhi.n	8005770 <_printf_i+0x64>
 800572a:	2963      	cmp	r1, #99	; 0x63
 800572c:	d036      	beq.n	800579c <_printf_i+0x90>
 800572e:	d80a      	bhi.n	8005746 <_printf_i+0x3a>
 8005730:	2900      	cmp	r1, #0
 8005732:	f000 80b9 	beq.w	80058a8 <_printf_i+0x19c>
 8005736:	2958      	cmp	r1, #88	; 0x58
 8005738:	f000 8083 	beq.w	8005842 <_printf_i+0x136>
 800573c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005740:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005744:	e032      	b.n	80057ac <_printf_i+0xa0>
 8005746:	2964      	cmp	r1, #100	; 0x64
 8005748:	d001      	beq.n	800574e <_printf_i+0x42>
 800574a:	2969      	cmp	r1, #105	; 0x69
 800574c:	d1f6      	bne.n	800573c <_printf_i+0x30>
 800574e:	6820      	ldr	r0, [r4, #0]
 8005750:	6813      	ldr	r3, [r2, #0]
 8005752:	0605      	lsls	r5, r0, #24
 8005754:	f103 0104 	add.w	r1, r3, #4
 8005758:	d52a      	bpl.n	80057b0 <_printf_i+0xa4>
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6011      	str	r1, [r2, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	da03      	bge.n	800576a <_printf_i+0x5e>
 8005762:	222d      	movs	r2, #45	; 0x2d
 8005764:	425b      	negs	r3, r3
 8005766:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800576a:	486f      	ldr	r0, [pc, #444]	; (8005928 <_printf_i+0x21c>)
 800576c:	220a      	movs	r2, #10
 800576e:	e039      	b.n	80057e4 <_printf_i+0xd8>
 8005770:	2973      	cmp	r1, #115	; 0x73
 8005772:	f000 809d 	beq.w	80058b0 <_printf_i+0x1a4>
 8005776:	d808      	bhi.n	800578a <_printf_i+0x7e>
 8005778:	296f      	cmp	r1, #111	; 0x6f
 800577a:	d020      	beq.n	80057be <_printf_i+0xb2>
 800577c:	2970      	cmp	r1, #112	; 0x70
 800577e:	d1dd      	bne.n	800573c <_printf_i+0x30>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	f043 0320 	orr.w	r3, r3, #32
 8005786:	6023      	str	r3, [r4, #0]
 8005788:	e003      	b.n	8005792 <_printf_i+0x86>
 800578a:	2975      	cmp	r1, #117	; 0x75
 800578c:	d017      	beq.n	80057be <_printf_i+0xb2>
 800578e:	2978      	cmp	r1, #120	; 0x78
 8005790:	d1d4      	bne.n	800573c <_printf_i+0x30>
 8005792:	2378      	movs	r3, #120	; 0x78
 8005794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005798:	4864      	ldr	r0, [pc, #400]	; (800592c <_printf_i+0x220>)
 800579a:	e055      	b.n	8005848 <_printf_i+0x13c>
 800579c:	6813      	ldr	r3, [r2, #0]
 800579e:	1d19      	adds	r1, r3, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6011      	str	r1, [r2, #0]
 80057a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057ac:	2301      	movs	r3, #1
 80057ae:	e08c      	b.n	80058ca <_printf_i+0x1be>
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6011      	str	r1, [r2, #0]
 80057b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057b8:	bf18      	it	ne
 80057ba:	b21b      	sxthne	r3, r3
 80057bc:	e7cf      	b.n	800575e <_printf_i+0x52>
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	6825      	ldr	r5, [r4, #0]
 80057c2:	1d18      	adds	r0, r3, #4
 80057c4:	6010      	str	r0, [r2, #0]
 80057c6:	0628      	lsls	r0, r5, #24
 80057c8:	d501      	bpl.n	80057ce <_printf_i+0xc2>
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	e002      	b.n	80057d4 <_printf_i+0xc8>
 80057ce:	0668      	lsls	r0, r5, #25
 80057d0:	d5fb      	bpl.n	80057ca <_printf_i+0xbe>
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	4854      	ldr	r0, [pc, #336]	; (8005928 <_printf_i+0x21c>)
 80057d6:	296f      	cmp	r1, #111	; 0x6f
 80057d8:	bf14      	ite	ne
 80057da:	220a      	movne	r2, #10
 80057dc:	2208      	moveq	r2, #8
 80057de:	2100      	movs	r1, #0
 80057e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057e4:	6865      	ldr	r5, [r4, #4]
 80057e6:	60a5      	str	r5, [r4, #8]
 80057e8:	2d00      	cmp	r5, #0
 80057ea:	f2c0 8095 	blt.w	8005918 <_printf_i+0x20c>
 80057ee:	6821      	ldr	r1, [r4, #0]
 80057f0:	f021 0104 	bic.w	r1, r1, #4
 80057f4:	6021      	str	r1, [r4, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d13d      	bne.n	8005876 <_printf_i+0x16a>
 80057fa:	2d00      	cmp	r5, #0
 80057fc:	f040 808e 	bne.w	800591c <_printf_i+0x210>
 8005800:	4665      	mov	r5, ip
 8005802:	2a08      	cmp	r2, #8
 8005804:	d10b      	bne.n	800581e <_printf_i+0x112>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	07db      	lsls	r3, r3, #31
 800580a:	d508      	bpl.n	800581e <_printf_i+0x112>
 800580c:	6923      	ldr	r3, [r4, #16]
 800580e:	6862      	ldr	r2, [r4, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	bfde      	ittt	le
 8005814:	2330      	movle	r3, #48	; 0x30
 8005816:	f805 3c01 	strble.w	r3, [r5, #-1]
 800581a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800581e:	ebac 0305 	sub.w	r3, ip, r5
 8005822:	6123      	str	r3, [r4, #16]
 8005824:	f8cd 8000 	str.w	r8, [sp]
 8005828:	463b      	mov	r3, r7
 800582a:	aa03      	add	r2, sp, #12
 800582c:	4621      	mov	r1, r4
 800582e:	4630      	mov	r0, r6
 8005830:	f7ff fef6 	bl	8005620 <_printf_common>
 8005834:	3001      	adds	r0, #1
 8005836:	d14d      	bne.n	80058d4 <_printf_i+0x1c8>
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	b005      	add	sp, #20
 800583e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005842:	4839      	ldr	r0, [pc, #228]	; (8005928 <_printf_i+0x21c>)
 8005844:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005848:	6813      	ldr	r3, [r2, #0]
 800584a:	6821      	ldr	r1, [r4, #0]
 800584c:	1d1d      	adds	r5, r3, #4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6015      	str	r5, [r2, #0]
 8005852:	060a      	lsls	r2, r1, #24
 8005854:	d50b      	bpl.n	800586e <_printf_i+0x162>
 8005856:	07ca      	lsls	r2, r1, #31
 8005858:	bf44      	itt	mi
 800585a:	f041 0120 	orrmi.w	r1, r1, #32
 800585e:	6021      	strmi	r1, [r4, #0]
 8005860:	b91b      	cbnz	r3, 800586a <_printf_i+0x15e>
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	f022 0220 	bic.w	r2, r2, #32
 8005868:	6022      	str	r2, [r4, #0]
 800586a:	2210      	movs	r2, #16
 800586c:	e7b7      	b.n	80057de <_printf_i+0xd2>
 800586e:	064d      	lsls	r5, r1, #25
 8005870:	bf48      	it	mi
 8005872:	b29b      	uxthmi	r3, r3
 8005874:	e7ef      	b.n	8005856 <_printf_i+0x14a>
 8005876:	4665      	mov	r5, ip
 8005878:	fbb3 f1f2 	udiv	r1, r3, r2
 800587c:	fb02 3311 	mls	r3, r2, r1, r3
 8005880:	5cc3      	ldrb	r3, [r0, r3]
 8005882:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005886:	460b      	mov	r3, r1
 8005888:	2900      	cmp	r1, #0
 800588a:	d1f5      	bne.n	8005878 <_printf_i+0x16c>
 800588c:	e7b9      	b.n	8005802 <_printf_i+0xf6>
 800588e:	6813      	ldr	r3, [r2, #0]
 8005890:	6825      	ldr	r5, [r4, #0]
 8005892:	6961      	ldr	r1, [r4, #20]
 8005894:	1d18      	adds	r0, r3, #4
 8005896:	6010      	str	r0, [r2, #0]
 8005898:	0628      	lsls	r0, r5, #24
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	d501      	bpl.n	80058a2 <_printf_i+0x196>
 800589e:	6019      	str	r1, [r3, #0]
 80058a0:	e002      	b.n	80058a8 <_printf_i+0x19c>
 80058a2:	066a      	lsls	r2, r5, #25
 80058a4:	d5fb      	bpl.n	800589e <_printf_i+0x192>
 80058a6:	8019      	strh	r1, [r3, #0]
 80058a8:	2300      	movs	r3, #0
 80058aa:	6123      	str	r3, [r4, #16]
 80058ac:	4665      	mov	r5, ip
 80058ae:	e7b9      	b.n	8005824 <_printf_i+0x118>
 80058b0:	6813      	ldr	r3, [r2, #0]
 80058b2:	1d19      	adds	r1, r3, #4
 80058b4:	6011      	str	r1, [r2, #0]
 80058b6:	681d      	ldr	r5, [r3, #0]
 80058b8:	6862      	ldr	r2, [r4, #4]
 80058ba:	2100      	movs	r1, #0
 80058bc:	4628      	mov	r0, r5
 80058be:	f7fa fcc7 	bl	8000250 <memchr>
 80058c2:	b108      	cbz	r0, 80058c8 <_printf_i+0x1bc>
 80058c4:	1b40      	subs	r0, r0, r5
 80058c6:	6060      	str	r0, [r4, #4]
 80058c8:	6863      	ldr	r3, [r4, #4]
 80058ca:	6123      	str	r3, [r4, #16]
 80058cc:	2300      	movs	r3, #0
 80058ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d2:	e7a7      	b.n	8005824 <_printf_i+0x118>
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	462a      	mov	r2, r5
 80058d8:	4639      	mov	r1, r7
 80058da:	4630      	mov	r0, r6
 80058dc:	47c0      	blx	r8
 80058de:	3001      	adds	r0, #1
 80058e0:	d0aa      	beq.n	8005838 <_printf_i+0x12c>
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	079b      	lsls	r3, r3, #30
 80058e6:	d413      	bmi.n	8005910 <_printf_i+0x204>
 80058e8:	68e0      	ldr	r0, [r4, #12]
 80058ea:	9b03      	ldr	r3, [sp, #12]
 80058ec:	4298      	cmp	r0, r3
 80058ee:	bfb8      	it	lt
 80058f0:	4618      	movlt	r0, r3
 80058f2:	e7a3      	b.n	800583c <_printf_i+0x130>
 80058f4:	2301      	movs	r3, #1
 80058f6:	464a      	mov	r2, r9
 80058f8:	4639      	mov	r1, r7
 80058fa:	4630      	mov	r0, r6
 80058fc:	47c0      	blx	r8
 80058fe:	3001      	adds	r0, #1
 8005900:	d09a      	beq.n	8005838 <_printf_i+0x12c>
 8005902:	3501      	adds	r5, #1
 8005904:	68e3      	ldr	r3, [r4, #12]
 8005906:	9a03      	ldr	r2, [sp, #12]
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	42ab      	cmp	r3, r5
 800590c:	dcf2      	bgt.n	80058f4 <_printf_i+0x1e8>
 800590e:	e7eb      	b.n	80058e8 <_printf_i+0x1dc>
 8005910:	2500      	movs	r5, #0
 8005912:	f104 0919 	add.w	r9, r4, #25
 8005916:	e7f5      	b.n	8005904 <_printf_i+0x1f8>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ac      	bne.n	8005876 <_printf_i+0x16a>
 800591c:	7803      	ldrb	r3, [r0, #0]
 800591e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005922:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005926:	e76c      	b.n	8005802 <_printf_i+0xf6>
 8005928:	08007652 	.word	0x08007652
 800592c:	08007663 	.word	0x08007663

08005930 <iprintf>:
 8005930:	b40f      	push	{r0, r1, r2, r3}
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <iprintf+0x2c>)
 8005934:	b513      	push	{r0, r1, r4, lr}
 8005936:	681c      	ldr	r4, [r3, #0]
 8005938:	b124      	cbz	r4, 8005944 <iprintf+0x14>
 800593a:	69a3      	ldr	r3, [r4, #24]
 800593c:	b913      	cbnz	r3, 8005944 <iprintf+0x14>
 800593e:	4620      	mov	r0, r4
 8005940:	f000 fe26 	bl	8006590 <__sinit>
 8005944:	ab05      	add	r3, sp, #20
 8005946:	9a04      	ldr	r2, [sp, #16]
 8005948:	68a1      	ldr	r1, [r4, #8]
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	4620      	mov	r0, r4
 800594e:	f001 fa85 	bl	8006e5c <_vfiprintf_r>
 8005952:	b002      	add	sp, #8
 8005954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005958:	b004      	add	sp, #16
 800595a:	4770      	bx	lr
 800595c:	2000000c 	.word	0x2000000c

08005960 <quorem>:
 8005960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005964:	6903      	ldr	r3, [r0, #16]
 8005966:	690c      	ldr	r4, [r1, #16]
 8005968:	42a3      	cmp	r3, r4
 800596a:	4680      	mov	r8, r0
 800596c:	f2c0 8082 	blt.w	8005a74 <quorem+0x114>
 8005970:	3c01      	subs	r4, #1
 8005972:	f101 0714 	add.w	r7, r1, #20
 8005976:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800597a:	f100 0614 	add.w	r6, r0, #20
 800597e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005982:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005986:	eb06 030c 	add.w	r3, r6, ip
 800598a:	3501      	adds	r5, #1
 800598c:	eb07 090c 	add.w	r9, r7, ip
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	fbb0 f5f5 	udiv	r5, r0, r5
 8005996:	b395      	cbz	r5, 80059fe <quorem+0x9e>
 8005998:	f04f 0a00 	mov.w	sl, #0
 800599c:	4638      	mov	r0, r7
 800599e:	46b6      	mov	lr, r6
 80059a0:	46d3      	mov	fp, sl
 80059a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80059a6:	b293      	uxth	r3, r2
 80059a8:	fb05 a303 	mla	r3, r5, r3, sl
 80059ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	ebab 0303 	sub.w	r3, fp, r3
 80059b6:	0c12      	lsrs	r2, r2, #16
 80059b8:	f8de b000 	ldr.w	fp, [lr]
 80059bc:	fb05 a202 	mla	r2, r5, r2, sl
 80059c0:	fa13 f38b 	uxtah	r3, r3, fp
 80059c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80059c8:	fa1f fb82 	uxth.w	fp, r2
 80059cc:	f8de 2000 	ldr.w	r2, [lr]
 80059d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80059d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059d8:	b29b      	uxth	r3, r3
 80059da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059de:	4581      	cmp	r9, r0
 80059e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80059e4:	f84e 3b04 	str.w	r3, [lr], #4
 80059e8:	d2db      	bcs.n	80059a2 <quorem+0x42>
 80059ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80059ee:	b933      	cbnz	r3, 80059fe <quorem+0x9e>
 80059f0:	9b01      	ldr	r3, [sp, #4]
 80059f2:	3b04      	subs	r3, #4
 80059f4:	429e      	cmp	r6, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	d330      	bcc.n	8005a5c <quorem+0xfc>
 80059fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80059fe:	4640      	mov	r0, r8
 8005a00:	f001 f886 	bl	8006b10 <__mcmp>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	db25      	blt.n	8005a54 <quorem+0xf4>
 8005a08:	3501      	adds	r5, #1
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f04f 0c00 	mov.w	ip, #0
 8005a10:	f857 2b04 	ldr.w	r2, [r7], #4
 8005a14:	f8d0 e000 	ldr.w	lr, [r0]
 8005a18:	b293      	uxth	r3, r2
 8005a1a:	ebac 0303 	sub.w	r3, ip, r3
 8005a1e:	0c12      	lsrs	r2, r2, #16
 8005a20:	fa13 f38e 	uxtah	r3, r3, lr
 8005a24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a32:	45b9      	cmp	r9, r7
 8005a34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a38:	f840 3b04 	str.w	r3, [r0], #4
 8005a3c:	d2e8      	bcs.n	8005a10 <quorem+0xb0>
 8005a3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005a42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005a46:	b92a      	cbnz	r2, 8005a54 <quorem+0xf4>
 8005a48:	3b04      	subs	r3, #4
 8005a4a:	429e      	cmp	r6, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	d30b      	bcc.n	8005a68 <quorem+0x108>
 8005a50:	f8c8 4010 	str.w	r4, [r8, #16]
 8005a54:	4628      	mov	r0, r5
 8005a56:	b003      	add	sp, #12
 8005a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	3b04      	subs	r3, #4
 8005a60:	2a00      	cmp	r2, #0
 8005a62:	d1ca      	bne.n	80059fa <quorem+0x9a>
 8005a64:	3c01      	subs	r4, #1
 8005a66:	e7c5      	b.n	80059f4 <quorem+0x94>
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	3b04      	subs	r3, #4
 8005a6c:	2a00      	cmp	r2, #0
 8005a6e:	d1ef      	bne.n	8005a50 <quorem+0xf0>
 8005a70:	3c01      	subs	r4, #1
 8005a72:	e7ea      	b.n	8005a4a <quorem+0xea>
 8005a74:	2000      	movs	r0, #0
 8005a76:	e7ee      	b.n	8005a56 <quorem+0xf6>

08005a78 <_dtoa_r>:
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	ec57 6b10 	vmov	r6, r7, d0
 8005a80:	b095      	sub	sp, #84	; 0x54
 8005a82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a84:	9108      	str	r1, [sp, #32]
 8005a86:	4604      	mov	r4, r0
 8005a88:	920a      	str	r2, [sp, #40]	; 0x28
 8005a8a:	9311      	str	r3, [sp, #68]	; 0x44
 8005a8c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005a90:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005a94:	b93d      	cbnz	r5, 8005aa6 <_dtoa_r+0x2e>
 8005a96:	2010      	movs	r0, #16
 8005a98:	f000 fe12 	bl	80066c0 <malloc>
 8005a9c:	6260      	str	r0, [r4, #36]	; 0x24
 8005a9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005aa2:	6005      	str	r5, [r0, #0]
 8005aa4:	60c5      	str	r5, [r0, #12]
 8005aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa8:	6819      	ldr	r1, [r3, #0]
 8005aaa:	b151      	cbz	r1, 8005ac2 <_dtoa_r+0x4a>
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	604a      	str	r2, [r1, #4]
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4093      	lsls	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 fe49 	bl	800674e <_Bfree>
 8005abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	1e3b      	subs	r3, r7, #0
 8005ac4:	bfb9      	ittee	lt
 8005ac6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005aca:	9303      	strlt	r3, [sp, #12]
 8005acc:	2300      	movge	r3, #0
 8005ace:	f8c8 3000 	strge.w	r3, [r8]
 8005ad2:	9d03      	ldr	r5, [sp, #12]
 8005ad4:	4bac      	ldr	r3, [pc, #688]	; (8005d88 <_dtoa_r+0x310>)
 8005ad6:	bfbc      	itt	lt
 8005ad8:	2201      	movlt	r2, #1
 8005ada:	f8c8 2000 	strlt.w	r2, [r8]
 8005ade:	43ab      	bics	r3, r5
 8005ae0:	d11b      	bne.n	8005b1a <_dtoa_r+0xa2>
 8005ae2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ae4:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	9b02      	ldr	r3, [sp, #8]
 8005aec:	b923      	cbnz	r3, 8005af8 <_dtoa_r+0x80>
 8005aee:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005af2:	2d00      	cmp	r5, #0
 8005af4:	f000 84dd 	beq.w	80064b2 <_dtoa_r+0xa3a>
 8005af8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005afa:	b953      	cbnz	r3, 8005b12 <_dtoa_r+0x9a>
 8005afc:	4ba3      	ldr	r3, [pc, #652]	; (8005d8c <_dtoa_r+0x314>)
 8005afe:	e020      	b.n	8005b42 <_dtoa_r+0xca>
 8005b00:	4ba3      	ldr	r3, [pc, #652]	; (8005d90 <_dtoa_r+0x318>)
 8005b02:	9304      	str	r3, [sp, #16]
 8005b04:	3308      	adds	r3, #8
 8005b06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	9804      	ldr	r0, [sp, #16]
 8005b0c:	b015      	add	sp, #84	; 0x54
 8005b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b12:	4b9e      	ldr	r3, [pc, #632]	; (8005d8c <_dtoa_r+0x314>)
 8005b14:	9304      	str	r3, [sp, #16]
 8005b16:	3303      	adds	r3, #3
 8005b18:	e7f5      	b.n	8005b06 <_dtoa_r+0x8e>
 8005b1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b26:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005b2a:	d10c      	bne.n	8005b46 <_dtoa_r+0xce>
 8005b2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005b2e:	2301      	movs	r3, #1
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 84b9 	beq.w	80064ac <_dtoa_r+0xa34>
 8005b3a:	4b96      	ldr	r3, [pc, #600]	; (8005d94 <_dtoa_r+0x31c>)
 8005b3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	9304      	str	r3, [sp, #16]
 8005b44:	e7e1      	b.n	8005b0a <_dtoa_r+0x92>
 8005b46:	a913      	add	r1, sp, #76	; 0x4c
 8005b48:	aa12      	add	r2, sp, #72	; 0x48
 8005b4a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f001 f855 	bl	8006bfe <__d2b>
 8005b54:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8005b58:	9001      	str	r0, [sp, #4]
 8005b5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	d046      	beq.n	8005bee <_dtoa_r+0x176>
 8005b60:	9805      	ldr	r0, [sp, #20]
 8005b62:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8005b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b6a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8005b6e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b72:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8005b76:	2700      	movs	r7, #0
 8005b78:	ee07 aa90 	vmov	s15, sl
 8005b7c:	ec43 2b16 	vmov	d6, r2, r3
 8005b80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8005b84:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8005d70 <_dtoa_r+0x2f8>
 8005b88:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005b8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b90:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8005d78 <_dtoa_r+0x300>
 8005b94:	eea7 6b04 	vfma.f64	d6, d7, d4
 8005b98:	eeb0 7b46 	vmov.f64	d7, d6
 8005b9c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8005d80 <_dtoa_r+0x308>
 8005ba0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005ba4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005ba8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb0:	ee16 ba90 	vmov	fp, s13
 8005bb4:	d508      	bpl.n	8005bc8 <_dtoa_r+0x150>
 8005bb6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005bba:	eeb4 6b47 	vcmp.f64	d6, d7
 8005bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc2:	bf18      	it	ne
 8005bc4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005bc8:	f1bb 0f16 	cmp.w	fp, #22
 8005bcc:	d834      	bhi.n	8005c38 <_dtoa_r+0x1c0>
 8005bce:	4b72      	ldr	r3, [pc, #456]	; (8005d98 <_dtoa_r+0x320>)
 8005bd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005bd4:	ed93 7b00 	vldr	d7, [r3]
 8005bd8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005bdc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be4:	dd01      	ble.n	8005bea <_dtoa_r+0x172>
 8005be6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bea:	2300      	movs	r3, #0
 8005bec:	e025      	b.n	8005c3a <_dtoa_r+0x1c2>
 8005bee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bf0:	eb01 0a03 	add.w	sl, r1, r3
 8005bf4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	dd17      	ble.n	8005c2c <_dtoa_r+0x1b4>
 8005bfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005c00:	9a02      	ldr	r2, [sp, #8]
 8005c02:	409d      	lsls	r5, r3
 8005c04:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0c:	432b      	orrs	r3, r5
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005c16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c1e:	9805      	ldr	r0, [sp, #20]
 8005c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c24:	2701      	movs	r7, #1
 8005c26:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8005c2a:	e7a5      	b.n	8005b78 <_dtoa_r+0x100>
 8005c2c:	9a02      	ldr	r2, [sp, #8]
 8005c2e:	f1c3 0320 	rsb	r3, r3, #32
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	e7ea      	b.n	8005c0e <_dtoa_r+0x196>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	eba1 0a0a 	sub.w	sl, r1, sl
 8005c3e:	9310      	str	r3, [sp, #64]	; 0x40
 8005c40:	f1ba 0301 	subs.w	r3, sl, #1
 8005c44:	9307      	str	r3, [sp, #28]
 8005c46:	bf43      	ittte	mi
 8005c48:	2300      	movmi	r3, #0
 8005c4a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8005c4e:	9307      	strmi	r3, [sp, #28]
 8005c50:	f04f 0a00 	movpl.w	sl, #0
 8005c54:	f1bb 0f00 	cmp.w	fp, #0
 8005c58:	db19      	blt.n	8005c8e <_dtoa_r+0x216>
 8005c5a:	9b07      	ldr	r3, [sp, #28]
 8005c5c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005c60:	445b      	add	r3, fp
 8005c62:	9307      	str	r3, [sp, #28]
 8005c64:	f04f 0800 	mov.w	r8, #0
 8005c68:	9b08      	ldr	r3, [sp, #32]
 8005c6a:	2b09      	cmp	r3, #9
 8005c6c:	d866      	bhi.n	8005d3c <_dtoa_r+0x2c4>
 8005c6e:	2b05      	cmp	r3, #5
 8005c70:	bfc4      	itt	gt
 8005c72:	3b04      	subgt	r3, #4
 8005c74:	9308      	strgt	r3, [sp, #32]
 8005c76:	9b08      	ldr	r3, [sp, #32]
 8005c78:	f1a3 0302 	sub.w	r3, r3, #2
 8005c7c:	bfcc      	ite	gt
 8005c7e:	2500      	movgt	r5, #0
 8005c80:	2501      	movle	r5, #1
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d866      	bhi.n	8005d54 <_dtoa_r+0x2dc>
 8005c86:	e8df f003 	tbb	[pc, r3]
 8005c8a:	5755      	.short	0x5755
 8005c8c:	4909      	.short	0x4909
 8005c8e:	2300      	movs	r3, #0
 8005c90:	ebaa 0a0b 	sub.w	sl, sl, fp
 8005c94:	f1cb 0800 	rsb	r8, fp, #0
 8005c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c9a:	e7e5      	b.n	8005c68 <_dtoa_r+0x1f0>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	dd59      	ble.n	8005d5a <_dtoa_r+0x2e2>
 8005ca6:	9306      	str	r3, [sp, #24]
 8005ca8:	4699      	mov	r9, r3
 8005caa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cac:	2200      	movs	r2, #0
 8005cae:	6072      	str	r2, [r6, #4]
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	f102 0014 	add.w	r0, r2, #20
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	6871      	ldr	r1, [r6, #4]
 8005cba:	d953      	bls.n	8005d64 <_dtoa_r+0x2ec>
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 fd12 	bl	80066e6 <_Balloc>
 8005cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc4:	6030      	str	r0, [r6, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	9304      	str	r3, [sp, #16]
 8005cca:	f1b9 0f0e 	cmp.w	r9, #14
 8005cce:	f200 80c2 	bhi.w	8005e56 <_dtoa_r+0x3de>
 8005cd2:	2d00      	cmp	r5, #0
 8005cd4:	f000 80bf 	beq.w	8005e56 <_dtoa_r+0x3de>
 8005cd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cdc:	f1bb 0f00 	cmp.w	fp, #0
 8005ce0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005ce4:	f340 80e6 	ble.w	8005eb4 <_dtoa_r+0x43c>
 8005ce8:	4a2b      	ldr	r2, [pc, #172]	; (8005d98 <_dtoa_r+0x320>)
 8005cea:	f00b 030f 	and.w	r3, fp, #15
 8005cee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005cf2:	ed93 7b00 	vldr	d7, [r3]
 8005cf6:	ea4f 132b 	mov.w	r3, fp, asr #4
 8005cfa:	06da      	lsls	r2, r3, #27
 8005cfc:	f140 80d8 	bpl.w	8005eb0 <_dtoa_r+0x438>
 8005d00:	4a26      	ldr	r2, [pc, #152]	; (8005d9c <_dtoa_r+0x324>)
 8005d02:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8005d06:	ed92 6b08 	vldr	d6, [r2, #32]
 8005d0a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8005d0e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	2203      	movs	r2, #3
 8005d18:	4920      	ldr	r1, [pc, #128]	; (8005d9c <_dtoa_r+0x324>)
 8005d1a:	e04a      	b.n	8005db2 <_dtoa_r+0x33a>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d22:	445b      	add	r3, fp
 8005d24:	f103 0901 	add.w	r9, r3, #1
 8005d28:	9306      	str	r3, [sp, #24]
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	bfb8      	it	lt
 8005d30:	2301      	movlt	r3, #1
 8005d32:	e7ba      	b.n	8005caa <_dtoa_r+0x232>
 8005d34:	2300      	movs	r3, #0
 8005d36:	e7b2      	b.n	8005c9e <_dtoa_r+0x226>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e7f0      	b.n	8005d1e <_dtoa_r+0x2a6>
 8005d3c:	2501      	movs	r5, #1
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8005d44:	f04f 33ff 	mov.w	r3, #4294967295
 8005d48:	9306      	str	r3, [sp, #24]
 8005d4a:	4699      	mov	r9, r3
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2312      	movs	r3, #18
 8005d50:	920a      	str	r2, [sp, #40]	; 0x28
 8005d52:	e7aa      	b.n	8005caa <_dtoa_r+0x232>
 8005d54:	2301      	movs	r3, #1
 8005d56:	9309      	str	r3, [sp, #36]	; 0x24
 8005d58:	e7f4      	b.n	8005d44 <_dtoa_r+0x2cc>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	9306      	str	r3, [sp, #24]
 8005d5e:	4699      	mov	r9, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	e7f5      	b.n	8005d50 <_dtoa_r+0x2d8>
 8005d64:	3101      	adds	r1, #1
 8005d66:	6071      	str	r1, [r6, #4]
 8005d68:	0052      	lsls	r2, r2, #1
 8005d6a:	e7a2      	b.n	8005cb2 <_dtoa_r+0x23a>
 8005d6c:	f3af 8000 	nop.w
 8005d70:	636f4361 	.word	0x636f4361
 8005d74:	3fd287a7 	.word	0x3fd287a7
 8005d78:	8b60c8b3 	.word	0x8b60c8b3
 8005d7c:	3fc68a28 	.word	0x3fc68a28
 8005d80:	509f79fb 	.word	0x509f79fb
 8005d84:	3fd34413 	.word	0x3fd34413
 8005d88:	7ff00000 	.word	0x7ff00000
 8005d8c:	0800767d 	.word	0x0800767d
 8005d90:	08007674 	.word	0x08007674
 8005d94:	08007651 	.word	0x08007651
 8005d98:	08007710 	.word	0x08007710
 8005d9c:	080076e8 	.word	0x080076e8
 8005da0:	07de      	lsls	r6, r3, #31
 8005da2:	d504      	bpl.n	8005dae <_dtoa_r+0x336>
 8005da4:	ed91 6b00 	vldr	d6, [r1]
 8005da8:	3201      	adds	r2, #1
 8005daa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005dae:	105b      	asrs	r3, r3, #1
 8005db0:	3108      	adds	r1, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f4      	bne.n	8005da0 <_dtoa_r+0x328>
 8005db6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005dba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005dbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005dc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80a7 	beq.w	8005f18 <_dtoa_r+0x4a0>
 8005dca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005dce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dda:	f140 809d 	bpl.w	8005f18 <_dtoa_r+0x4a0>
 8005dde:	f1b9 0f00 	cmp.w	r9, #0
 8005de2:	f000 8099 	beq.w	8005f18 <_dtoa_r+0x4a0>
 8005de6:	9b06      	ldr	r3, [sp, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dd30      	ble.n	8005e4e <_dtoa_r+0x3d6>
 8005dec:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005df0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005df4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005df8:	9d06      	ldr	r5, [sp, #24]
 8005dfa:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005dfe:	3201      	adds	r2, #1
 8005e00:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005e04:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005e08:	ee07 2a90 	vmov	s15, r2
 8005e0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005e10:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005e14:	ed8d 5b02 	vstr	d5, [sp, #8]
 8005e18:	9a03      	ldr	r2, [sp, #12]
 8005e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e1e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	d17b      	bne.n	8005f1e <_dtoa_r+0x4a6>
 8005e26:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005e2a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005e2e:	ec41 0b17 	vmov	d7, r0, r1
 8005e32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3a:	f300 8253 	bgt.w	80062e4 <_dtoa_r+0x86c>
 8005e3e:	eeb1 7b47 	vneg.f64	d7, d7
 8005e42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4a:	f100 8249 	bmi.w	80062e0 <_dtoa_r+0x868>
 8005e4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f2c0 8119 	blt.w	8006090 <_dtoa_r+0x618>
 8005e5e:	f1bb 0f0e 	cmp.w	fp, #14
 8005e62:	f300 8115 	bgt.w	8006090 <_dtoa_r+0x618>
 8005e66:	4bc3      	ldr	r3, [pc, #780]	; (8006174 <_dtoa_r+0x6fc>)
 8005e68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e6c:	ed93 6b00 	vldr	d6, [r3]
 8005e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f280 80ba 	bge.w	8005fec <_dtoa_r+0x574>
 8005e78:	f1b9 0f00 	cmp.w	r9, #0
 8005e7c:	f300 80b6 	bgt.w	8005fec <_dtoa_r+0x574>
 8005e80:	f040 822d 	bne.w	80062de <_dtoa_r+0x866>
 8005e84:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005e88:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005e8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e98:	464d      	mov	r5, r9
 8005e9a:	464f      	mov	r7, r9
 8005e9c:	f280 8204 	bge.w	80062a8 <_dtoa_r+0x830>
 8005ea0:	9b04      	ldr	r3, [sp, #16]
 8005ea2:	9a04      	ldr	r2, [sp, #16]
 8005ea4:	1c5e      	adds	r6, r3, #1
 8005ea6:	2331      	movs	r3, #49	; 0x31
 8005ea8:	7013      	strb	r3, [r2, #0]
 8005eaa:	f10b 0b01 	add.w	fp, fp, #1
 8005eae:	e1ff      	b.n	80062b0 <_dtoa_r+0x838>
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	e731      	b.n	8005d18 <_dtoa_r+0x2a0>
 8005eb4:	d02e      	beq.n	8005f14 <_dtoa_r+0x49c>
 8005eb6:	f1cb 0300 	rsb	r3, fp, #0
 8005eba:	4aae      	ldr	r2, [pc, #696]	; (8006174 <_dtoa_r+0x6fc>)
 8005ebc:	f003 010f 	and.w	r1, r3, #15
 8005ec0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005ec4:	ed92 7b00 	vldr	d7, [r2]
 8005ec8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8005ecc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005ed0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005ed4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8005ed8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005edc:	49a6      	ldr	r1, [pc, #664]	; (8006178 <_dtoa_r+0x700>)
 8005ede:	111b      	asrs	r3, r3, #4
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	b93b      	cbnz	r3, 8005ef6 <_dtoa_r+0x47e>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f43f af6b 	beq.w	8005dc2 <_dtoa_r+0x34a>
 8005eec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef4:	e765      	b.n	8005dc2 <_dtoa_r+0x34a>
 8005ef6:	07dd      	lsls	r5, r3, #31
 8005ef8:	d509      	bpl.n	8005f0e <_dtoa_r+0x496>
 8005efa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8005efe:	ed91 7b00 	vldr	d7, [r1]
 8005f02:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005f06:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005f0a:	3201      	adds	r2, #1
 8005f0c:	2001      	movs	r0, #1
 8005f0e:	105b      	asrs	r3, r3, #1
 8005f10:	3108      	adds	r1, #8
 8005f12:	e7e7      	b.n	8005ee4 <_dtoa_r+0x46c>
 8005f14:	2202      	movs	r2, #2
 8005f16:	e754      	b.n	8005dc2 <_dtoa_r+0x34a>
 8005f18:	465b      	mov	r3, fp
 8005f1a:	464d      	mov	r5, r9
 8005f1c:	e770      	b.n	8005e00 <_dtoa_r+0x388>
 8005f1e:	4a95      	ldr	r2, [pc, #596]	; (8006174 <_dtoa_r+0x6fc>)
 8005f20:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8005f24:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f2a:	ec41 0b17 	vmov	d7, r0, r1
 8005f2e:	b35a      	cbz	r2, 8005f88 <_dtoa_r+0x510>
 8005f30:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005f34:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005f38:	9e04      	ldr	r6, [sp, #16]
 8005f3a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005f3e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005f42:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005f46:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005f4a:	ee14 2a90 	vmov	r2, s9
 8005f4e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005f52:	3230      	adds	r2, #48	; 0x30
 8005f54:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005f58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f60:	f806 2b01 	strb.w	r2, [r6], #1
 8005f64:	d43b      	bmi.n	8005fde <_dtoa_r+0x566>
 8005f66:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005f6a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f72:	d472      	bmi.n	800605a <_dtoa_r+0x5e2>
 8005f74:	9a04      	ldr	r2, [sp, #16]
 8005f76:	1ab2      	subs	r2, r6, r2
 8005f78:	4295      	cmp	r5, r2
 8005f7a:	f77f af68 	ble.w	8005e4e <_dtoa_r+0x3d6>
 8005f7e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005f82:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005f86:	e7de      	b.n	8005f46 <_dtoa_r+0x4ce>
 8005f88:	9a04      	ldr	r2, [sp, #16]
 8005f8a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005f8e:	1956      	adds	r6, r2, r5
 8005f90:	4611      	mov	r1, r2
 8005f92:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005f96:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005f9a:	ee14 2a90 	vmov	r2, s9
 8005f9e:	3230      	adds	r2, #48	; 0x30
 8005fa0:	f801 2b01 	strb.w	r2, [r1], #1
 8005fa4:	42b1      	cmp	r1, r6
 8005fa6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005faa:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005fae:	d11a      	bne.n	8005fe6 <_dtoa_r+0x56e>
 8005fb0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005fb4:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005fb8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc0:	dc4b      	bgt.n	800605a <_dtoa_r+0x5e2>
 8005fc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005fc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fce:	f57f af3e 	bpl.w	8005e4e <_dtoa_r+0x3d6>
 8005fd2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005fd6:	2a30      	cmp	r2, #48	; 0x30
 8005fd8:	f106 31ff 	add.w	r1, r6, #4294967295
 8005fdc:	d001      	beq.n	8005fe2 <_dtoa_r+0x56a>
 8005fde:	469b      	mov	fp, r3
 8005fe0:	e02a      	b.n	8006038 <_dtoa_r+0x5c0>
 8005fe2:	460e      	mov	r6, r1
 8005fe4:	e7f5      	b.n	8005fd2 <_dtoa_r+0x55a>
 8005fe6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005fea:	e7d4      	b.n	8005f96 <_dtoa_r+0x51e>
 8005fec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ff0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005ff4:	9e04      	ldr	r6, [sp, #16]
 8005ff6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005ffa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005ffe:	ee15 3a10 	vmov	r3, s10
 8006002:	3330      	adds	r3, #48	; 0x30
 8006004:	f806 3b01 	strb.w	r3, [r6], #1
 8006008:	9b04      	ldr	r3, [sp, #16]
 800600a:	1af3      	subs	r3, r6, r3
 800600c:	4599      	cmp	r9, r3
 800600e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006012:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006016:	d133      	bne.n	8006080 <_dtoa_r+0x608>
 8006018:	ee37 7b07 	vadd.f64	d7, d7, d7
 800601c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006024:	dc18      	bgt.n	8006058 <_dtoa_r+0x5e0>
 8006026:	eeb4 7b46 	vcmp.f64	d7, d6
 800602a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602e:	d103      	bne.n	8006038 <_dtoa_r+0x5c0>
 8006030:	ee15 3a10 	vmov	r3, s10
 8006034:	07db      	lsls	r3, r3, #31
 8006036:	d40f      	bmi.n	8006058 <_dtoa_r+0x5e0>
 8006038:	9901      	ldr	r1, [sp, #4]
 800603a:	4620      	mov	r0, r4
 800603c:	f000 fb87 	bl	800674e <_Bfree>
 8006040:	2300      	movs	r3, #0
 8006042:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006044:	7033      	strb	r3, [r6, #0]
 8006046:	f10b 0301 	add.w	r3, fp, #1
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800604e:	2b00      	cmp	r3, #0
 8006050:	f43f ad5b 	beq.w	8005b0a <_dtoa_r+0x92>
 8006054:	601e      	str	r6, [r3, #0]
 8006056:	e558      	b.n	8005b0a <_dtoa_r+0x92>
 8006058:	465b      	mov	r3, fp
 800605a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800605e:	2939      	cmp	r1, #57	; 0x39
 8006060:	f106 32ff 	add.w	r2, r6, #4294967295
 8006064:	d106      	bne.n	8006074 <_dtoa_r+0x5fc>
 8006066:	9904      	ldr	r1, [sp, #16]
 8006068:	4291      	cmp	r1, r2
 800606a:	d107      	bne.n	800607c <_dtoa_r+0x604>
 800606c:	2230      	movs	r2, #48	; 0x30
 800606e:	700a      	strb	r2, [r1, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	460a      	mov	r2, r1
 8006074:	7811      	ldrb	r1, [r2, #0]
 8006076:	3101      	adds	r1, #1
 8006078:	7011      	strb	r1, [r2, #0]
 800607a:	e7b0      	b.n	8005fde <_dtoa_r+0x566>
 800607c:	4616      	mov	r6, r2
 800607e:	e7ec      	b.n	800605a <_dtoa_r+0x5e2>
 8006080:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006084:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608c:	d1b3      	bne.n	8005ff6 <_dtoa_r+0x57e>
 800608e:	e7d3      	b.n	8006038 <_dtoa_r+0x5c0>
 8006090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006092:	2a00      	cmp	r2, #0
 8006094:	f000 808d 	beq.w	80061b2 <_dtoa_r+0x73a>
 8006098:	9a08      	ldr	r2, [sp, #32]
 800609a:	2a01      	cmp	r2, #1
 800609c:	dc72      	bgt.n	8006184 <_dtoa_r+0x70c>
 800609e:	2f00      	cmp	r7, #0
 80060a0:	d06c      	beq.n	800617c <_dtoa_r+0x704>
 80060a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060a6:	4645      	mov	r5, r8
 80060a8:	4656      	mov	r6, sl
 80060aa:	9a07      	ldr	r2, [sp, #28]
 80060ac:	2101      	movs	r1, #1
 80060ae:	441a      	add	r2, r3
 80060b0:	4620      	mov	r0, r4
 80060b2:	449a      	add	sl, r3
 80060b4:	9207      	str	r2, [sp, #28]
 80060b6:	f000 fbea 	bl	800688e <__i2b>
 80060ba:	4607      	mov	r7, r0
 80060bc:	2e00      	cmp	r6, #0
 80060be:	dd0b      	ble.n	80060d8 <_dtoa_r+0x660>
 80060c0:	9b07      	ldr	r3, [sp, #28]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	dd08      	ble.n	80060d8 <_dtoa_r+0x660>
 80060c6:	42b3      	cmp	r3, r6
 80060c8:	9a07      	ldr	r2, [sp, #28]
 80060ca:	bfa8      	it	ge
 80060cc:	4633      	movge	r3, r6
 80060ce:	ebaa 0a03 	sub.w	sl, sl, r3
 80060d2:	1af6      	subs	r6, r6, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	9307      	str	r3, [sp, #28]
 80060d8:	f1b8 0f00 	cmp.w	r8, #0
 80060dc:	d01d      	beq.n	800611a <_dtoa_r+0x6a2>
 80060de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d06a      	beq.n	80061ba <_dtoa_r+0x742>
 80060e4:	b18d      	cbz	r5, 800610a <_dtoa_r+0x692>
 80060e6:	4639      	mov	r1, r7
 80060e8:	462a      	mov	r2, r5
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 fc6e 	bl	80069cc <__pow5mult>
 80060f0:	9a01      	ldr	r2, [sp, #4]
 80060f2:	4601      	mov	r1, r0
 80060f4:	4607      	mov	r7, r0
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 fbd2 	bl	80068a0 <__multiply>
 80060fc:	9901      	ldr	r1, [sp, #4]
 80060fe:	900c      	str	r0, [sp, #48]	; 0x30
 8006100:	4620      	mov	r0, r4
 8006102:	f000 fb24 	bl	800674e <_Bfree>
 8006106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	ebb8 0205 	subs.w	r2, r8, r5
 800610e:	d004      	beq.n	800611a <_dtoa_r+0x6a2>
 8006110:	9901      	ldr	r1, [sp, #4]
 8006112:	4620      	mov	r0, r4
 8006114:	f000 fc5a 	bl	80069cc <__pow5mult>
 8006118:	9001      	str	r0, [sp, #4]
 800611a:	2101      	movs	r1, #1
 800611c:	4620      	mov	r0, r4
 800611e:	f000 fbb6 	bl	800688e <__i2b>
 8006122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006124:	4605      	mov	r5, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 81ca 	beq.w	80064c0 <_dtoa_r+0xa48>
 800612c:	461a      	mov	r2, r3
 800612e:	4601      	mov	r1, r0
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fc4b 	bl	80069cc <__pow5mult>
 8006136:	9b08      	ldr	r3, [sp, #32]
 8006138:	2b01      	cmp	r3, #1
 800613a:	4605      	mov	r5, r0
 800613c:	dc44      	bgt.n	80061c8 <_dtoa_r+0x750>
 800613e:	9b02      	ldr	r3, [sp, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d13c      	bne.n	80061be <_dtoa_r+0x746>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800614a:	2b00      	cmp	r3, #0
 800614c:	d137      	bne.n	80061be <_dtoa_r+0x746>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006154:	0d1b      	lsrs	r3, r3, #20
 8006156:	051b      	lsls	r3, r3, #20
 8006158:	2b00      	cmp	r3, #0
 800615a:	d033      	beq.n	80061c4 <_dtoa_r+0x74c>
 800615c:	9b07      	ldr	r3, [sp, #28]
 800615e:	3301      	adds	r3, #1
 8006160:	f10a 0a01 	add.w	sl, sl, #1
 8006164:	9307      	str	r3, [sp, #28]
 8006166:	f04f 0801 	mov.w	r8, #1
 800616a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800616c:	bb73      	cbnz	r3, 80061cc <_dtoa_r+0x754>
 800616e:	2001      	movs	r0, #1
 8006170:	e034      	b.n	80061dc <_dtoa_r+0x764>
 8006172:	bf00      	nop
 8006174:	08007710 	.word	0x08007710
 8006178:	080076e8 	.word	0x080076e8
 800617c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800617e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006182:	e790      	b.n	80060a6 <_dtoa_r+0x62e>
 8006184:	f109 35ff 	add.w	r5, r9, #4294967295
 8006188:	45a8      	cmp	r8, r5
 800618a:	bfbf      	itttt	lt
 800618c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800618e:	eba5 0808 	sublt.w	r8, r5, r8
 8006192:	4443      	addlt	r3, r8
 8006194:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8006196:	bfb6      	itet	lt
 8006198:	46a8      	movlt	r8, r5
 800619a:	eba8 0505 	subge.w	r5, r8, r5
 800619e:	2500      	movlt	r5, #0
 80061a0:	f1b9 0f00 	cmp.w	r9, #0
 80061a4:	bfb9      	ittee	lt
 80061a6:	ebaa 0609 	sublt.w	r6, sl, r9
 80061aa:	2300      	movlt	r3, #0
 80061ac:	4656      	movge	r6, sl
 80061ae:	464b      	movge	r3, r9
 80061b0:	e77b      	b.n	80060aa <_dtoa_r+0x632>
 80061b2:	4645      	mov	r5, r8
 80061b4:	4656      	mov	r6, sl
 80061b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80061b8:	e780      	b.n	80060bc <_dtoa_r+0x644>
 80061ba:	4642      	mov	r2, r8
 80061bc:	e7a8      	b.n	8006110 <_dtoa_r+0x698>
 80061be:	f04f 0800 	mov.w	r8, #0
 80061c2:	e7d2      	b.n	800616a <_dtoa_r+0x6f2>
 80061c4:	4698      	mov	r8, r3
 80061c6:	e7d0      	b.n	800616a <_dtoa_r+0x6f2>
 80061c8:	f04f 0800 	mov.w	r8, #0
 80061cc:	692b      	ldr	r3, [r5, #16]
 80061ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80061d2:	6918      	ldr	r0, [r3, #16]
 80061d4:	f000 fb0d 	bl	80067f2 <__hi0bits>
 80061d8:	f1c0 0020 	rsb	r0, r0, #32
 80061dc:	9b07      	ldr	r3, [sp, #28]
 80061de:	4418      	add	r0, r3
 80061e0:	f010 001f 	ands.w	r0, r0, #31
 80061e4:	d047      	beq.n	8006276 <_dtoa_r+0x7fe>
 80061e6:	f1c0 0320 	rsb	r3, r0, #32
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	dd3b      	ble.n	8006266 <_dtoa_r+0x7ee>
 80061ee:	9b07      	ldr	r3, [sp, #28]
 80061f0:	f1c0 001c 	rsb	r0, r0, #28
 80061f4:	4482      	add	sl, r0
 80061f6:	4406      	add	r6, r0
 80061f8:	4403      	add	r3, r0
 80061fa:	9307      	str	r3, [sp, #28]
 80061fc:	f1ba 0f00 	cmp.w	sl, #0
 8006200:	dd05      	ble.n	800620e <_dtoa_r+0x796>
 8006202:	4652      	mov	r2, sl
 8006204:	9901      	ldr	r1, [sp, #4]
 8006206:	4620      	mov	r0, r4
 8006208:	f000 fc2e 	bl	8006a68 <__lshift>
 800620c:	9001      	str	r0, [sp, #4]
 800620e:	9b07      	ldr	r3, [sp, #28]
 8006210:	2b00      	cmp	r3, #0
 8006212:	dd05      	ble.n	8006220 <_dtoa_r+0x7a8>
 8006214:	4629      	mov	r1, r5
 8006216:	461a      	mov	r2, r3
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fc25 	bl	8006a68 <__lshift>
 800621e:	4605      	mov	r5, r0
 8006220:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006222:	b353      	cbz	r3, 800627a <_dtoa_r+0x802>
 8006224:	4629      	mov	r1, r5
 8006226:	9801      	ldr	r0, [sp, #4]
 8006228:	f000 fc72 	bl	8006b10 <__mcmp>
 800622c:	2800      	cmp	r0, #0
 800622e:	da24      	bge.n	800627a <_dtoa_r+0x802>
 8006230:	2300      	movs	r3, #0
 8006232:	220a      	movs	r2, #10
 8006234:	9901      	ldr	r1, [sp, #4]
 8006236:	4620      	mov	r0, r4
 8006238:	f000 faa0 	bl	800677c <__multadd>
 800623c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623e:	9001      	str	r0, [sp, #4]
 8006240:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8142 	beq.w	80064ce <_dtoa_r+0xa56>
 800624a:	2300      	movs	r3, #0
 800624c:	4639      	mov	r1, r7
 800624e:	220a      	movs	r2, #10
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fa93 	bl	800677c <__multadd>
 8006256:	9b06      	ldr	r3, [sp, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	4607      	mov	r7, r0
 800625c:	dc4b      	bgt.n	80062f6 <_dtoa_r+0x87e>
 800625e:	9b08      	ldr	r3, [sp, #32]
 8006260:	2b02      	cmp	r3, #2
 8006262:	dd48      	ble.n	80062f6 <_dtoa_r+0x87e>
 8006264:	e011      	b.n	800628a <_dtoa_r+0x812>
 8006266:	d0c9      	beq.n	80061fc <_dtoa_r+0x784>
 8006268:	9a07      	ldr	r2, [sp, #28]
 800626a:	331c      	adds	r3, #28
 800626c:	441a      	add	r2, r3
 800626e:	449a      	add	sl, r3
 8006270:	441e      	add	r6, r3
 8006272:	4613      	mov	r3, r2
 8006274:	e7c1      	b.n	80061fa <_dtoa_r+0x782>
 8006276:	4603      	mov	r3, r0
 8006278:	e7f6      	b.n	8006268 <_dtoa_r+0x7f0>
 800627a:	f1b9 0f00 	cmp.w	r9, #0
 800627e:	dc34      	bgt.n	80062ea <_dtoa_r+0x872>
 8006280:	9b08      	ldr	r3, [sp, #32]
 8006282:	2b02      	cmp	r3, #2
 8006284:	dd31      	ble.n	80062ea <_dtoa_r+0x872>
 8006286:	f8cd 9018 	str.w	r9, [sp, #24]
 800628a:	9b06      	ldr	r3, [sp, #24]
 800628c:	b963      	cbnz	r3, 80062a8 <_dtoa_r+0x830>
 800628e:	4629      	mov	r1, r5
 8006290:	2205      	movs	r2, #5
 8006292:	4620      	mov	r0, r4
 8006294:	f000 fa72 	bl	800677c <__multadd>
 8006298:	4601      	mov	r1, r0
 800629a:	4605      	mov	r5, r0
 800629c:	9801      	ldr	r0, [sp, #4]
 800629e:	f000 fc37 	bl	8006b10 <__mcmp>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f73f adfc 	bgt.w	8005ea0 <_dtoa_r+0x428>
 80062a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062aa:	9e04      	ldr	r6, [sp, #16]
 80062ac:	ea6f 0b03 	mvn.w	fp, r3
 80062b0:	f04f 0900 	mov.w	r9, #0
 80062b4:	4629      	mov	r1, r5
 80062b6:	4620      	mov	r0, r4
 80062b8:	f000 fa49 	bl	800674e <_Bfree>
 80062bc:	2f00      	cmp	r7, #0
 80062be:	f43f aebb 	beq.w	8006038 <_dtoa_r+0x5c0>
 80062c2:	f1b9 0f00 	cmp.w	r9, #0
 80062c6:	d005      	beq.n	80062d4 <_dtoa_r+0x85c>
 80062c8:	45b9      	cmp	r9, r7
 80062ca:	d003      	beq.n	80062d4 <_dtoa_r+0x85c>
 80062cc:	4649      	mov	r1, r9
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 fa3d 	bl	800674e <_Bfree>
 80062d4:	4639      	mov	r1, r7
 80062d6:	4620      	mov	r0, r4
 80062d8:	f000 fa39 	bl	800674e <_Bfree>
 80062dc:	e6ac      	b.n	8006038 <_dtoa_r+0x5c0>
 80062de:	2500      	movs	r5, #0
 80062e0:	462f      	mov	r7, r5
 80062e2:	e7e1      	b.n	80062a8 <_dtoa_r+0x830>
 80062e4:	469b      	mov	fp, r3
 80062e6:	462f      	mov	r7, r5
 80062e8:	e5da      	b.n	8005ea0 <_dtoa_r+0x428>
 80062ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ec:	f8cd 9018 	str.w	r9, [sp, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80f3 	beq.w	80064dc <_dtoa_r+0xa64>
 80062f6:	2e00      	cmp	r6, #0
 80062f8:	dd05      	ble.n	8006306 <_dtoa_r+0x88e>
 80062fa:	4639      	mov	r1, r7
 80062fc:	4632      	mov	r2, r6
 80062fe:	4620      	mov	r0, r4
 8006300:	f000 fbb2 	bl	8006a68 <__lshift>
 8006304:	4607      	mov	r7, r0
 8006306:	f1b8 0f00 	cmp.w	r8, #0
 800630a:	d04c      	beq.n	80063a6 <_dtoa_r+0x92e>
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	4620      	mov	r0, r4
 8006310:	f000 f9e9 	bl	80066e6 <_Balloc>
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	3202      	adds	r2, #2
 8006318:	4606      	mov	r6, r0
 800631a:	0092      	lsls	r2, r2, #2
 800631c:	f107 010c 	add.w	r1, r7, #12
 8006320:	300c      	adds	r0, #12
 8006322:	f000 f9d5 	bl	80066d0 <memcpy>
 8006326:	2201      	movs	r2, #1
 8006328:	4631      	mov	r1, r6
 800632a:	4620      	mov	r0, r4
 800632c:	f000 fb9c 	bl	8006a68 <__lshift>
 8006330:	9b02      	ldr	r3, [sp, #8]
 8006332:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	46b9      	mov	r9, r7
 800633c:	9307      	str	r3, [sp, #28]
 800633e:	4607      	mov	r7, r0
 8006340:	4629      	mov	r1, r5
 8006342:	9801      	ldr	r0, [sp, #4]
 8006344:	f7ff fb0c 	bl	8005960 <quorem>
 8006348:	4649      	mov	r1, r9
 800634a:	4606      	mov	r6, r0
 800634c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006350:	9801      	ldr	r0, [sp, #4]
 8006352:	f000 fbdd 	bl	8006b10 <__mcmp>
 8006356:	463a      	mov	r2, r7
 8006358:	9002      	str	r0, [sp, #8]
 800635a:	4629      	mov	r1, r5
 800635c:	4620      	mov	r0, r4
 800635e:	f000 fbf1 	bl	8006b44 <__mdiff>
 8006362:	68c3      	ldr	r3, [r0, #12]
 8006364:	4602      	mov	r2, r0
 8006366:	bb03      	cbnz	r3, 80063aa <_dtoa_r+0x932>
 8006368:	4601      	mov	r1, r0
 800636a:	9009      	str	r0, [sp, #36]	; 0x24
 800636c:	9801      	ldr	r0, [sp, #4]
 800636e:	f000 fbcf 	bl	8006b10 <__mcmp>
 8006372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006374:	4603      	mov	r3, r0
 8006376:	4611      	mov	r1, r2
 8006378:	4620      	mov	r0, r4
 800637a:	9309      	str	r3, [sp, #36]	; 0x24
 800637c:	f000 f9e7 	bl	800674e <_Bfree>
 8006380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006382:	b9a3      	cbnz	r3, 80063ae <_dtoa_r+0x936>
 8006384:	9a08      	ldr	r2, [sp, #32]
 8006386:	b992      	cbnz	r2, 80063ae <_dtoa_r+0x936>
 8006388:	9a07      	ldr	r2, [sp, #28]
 800638a:	b982      	cbnz	r2, 80063ae <_dtoa_r+0x936>
 800638c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006390:	d029      	beq.n	80063e6 <_dtoa_r+0x96e>
 8006392:	9b02      	ldr	r3, [sp, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	dd01      	ble.n	800639c <_dtoa_r+0x924>
 8006398:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800639c:	f10a 0601 	add.w	r6, sl, #1
 80063a0:	f88a 8000 	strb.w	r8, [sl]
 80063a4:	e786      	b.n	80062b4 <_dtoa_r+0x83c>
 80063a6:	4638      	mov	r0, r7
 80063a8:	e7c2      	b.n	8006330 <_dtoa_r+0x8b8>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e7e3      	b.n	8006376 <_dtoa_r+0x8fe>
 80063ae:	9a02      	ldr	r2, [sp, #8]
 80063b0:	2a00      	cmp	r2, #0
 80063b2:	db04      	blt.n	80063be <_dtoa_r+0x946>
 80063b4:	d124      	bne.n	8006400 <_dtoa_r+0x988>
 80063b6:	9a08      	ldr	r2, [sp, #32]
 80063b8:	bb12      	cbnz	r2, 8006400 <_dtoa_r+0x988>
 80063ba:	9a07      	ldr	r2, [sp, #28]
 80063bc:	bb02      	cbnz	r2, 8006400 <_dtoa_r+0x988>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	ddec      	ble.n	800639c <_dtoa_r+0x924>
 80063c2:	2201      	movs	r2, #1
 80063c4:	9901      	ldr	r1, [sp, #4]
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 fb4e 	bl	8006a68 <__lshift>
 80063cc:	4629      	mov	r1, r5
 80063ce:	9001      	str	r0, [sp, #4]
 80063d0:	f000 fb9e 	bl	8006b10 <__mcmp>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	dc03      	bgt.n	80063e0 <_dtoa_r+0x968>
 80063d8:	d1e0      	bne.n	800639c <_dtoa_r+0x924>
 80063da:	f018 0f01 	tst.w	r8, #1
 80063de:	d0dd      	beq.n	800639c <_dtoa_r+0x924>
 80063e0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063e4:	d1d8      	bne.n	8006398 <_dtoa_r+0x920>
 80063e6:	2339      	movs	r3, #57	; 0x39
 80063e8:	f10a 0601 	add.w	r6, sl, #1
 80063ec:	f88a 3000 	strb.w	r3, [sl]
 80063f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063f4:	2b39      	cmp	r3, #57	; 0x39
 80063f6:	f106 32ff 	add.w	r2, r6, #4294967295
 80063fa:	d04c      	beq.n	8006496 <_dtoa_r+0xa1e>
 80063fc:	3301      	adds	r3, #1
 80063fe:	e051      	b.n	80064a4 <_dtoa_r+0xa2c>
 8006400:	2b00      	cmp	r3, #0
 8006402:	f10a 0601 	add.w	r6, sl, #1
 8006406:	dd05      	ble.n	8006414 <_dtoa_r+0x99c>
 8006408:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800640c:	d0eb      	beq.n	80063e6 <_dtoa_r+0x96e>
 800640e:	f108 0801 	add.w	r8, r8, #1
 8006412:	e7c5      	b.n	80063a0 <_dtoa_r+0x928>
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	9a06      	ldr	r2, [sp, #24]
 8006418:	f806 8c01 	strb.w	r8, [r6, #-1]
 800641c:	1af3      	subs	r3, r6, r3
 800641e:	4293      	cmp	r3, r2
 8006420:	d021      	beq.n	8006466 <_dtoa_r+0x9ee>
 8006422:	2300      	movs	r3, #0
 8006424:	220a      	movs	r2, #10
 8006426:	9901      	ldr	r1, [sp, #4]
 8006428:	4620      	mov	r0, r4
 800642a:	f000 f9a7 	bl	800677c <__multadd>
 800642e:	45b9      	cmp	r9, r7
 8006430:	9001      	str	r0, [sp, #4]
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	f04f 020a 	mov.w	r2, #10
 800643a:	4649      	mov	r1, r9
 800643c:	4620      	mov	r0, r4
 800643e:	d105      	bne.n	800644c <_dtoa_r+0x9d4>
 8006440:	f000 f99c 	bl	800677c <__multadd>
 8006444:	4681      	mov	r9, r0
 8006446:	4607      	mov	r7, r0
 8006448:	46b2      	mov	sl, r6
 800644a:	e779      	b.n	8006340 <_dtoa_r+0x8c8>
 800644c:	f000 f996 	bl	800677c <__multadd>
 8006450:	4639      	mov	r1, r7
 8006452:	4681      	mov	r9, r0
 8006454:	2300      	movs	r3, #0
 8006456:	220a      	movs	r2, #10
 8006458:	4620      	mov	r0, r4
 800645a:	f000 f98f 	bl	800677c <__multadd>
 800645e:	4607      	mov	r7, r0
 8006460:	e7f2      	b.n	8006448 <_dtoa_r+0x9d0>
 8006462:	f04f 0900 	mov.w	r9, #0
 8006466:	2201      	movs	r2, #1
 8006468:	9901      	ldr	r1, [sp, #4]
 800646a:	4620      	mov	r0, r4
 800646c:	f000 fafc 	bl	8006a68 <__lshift>
 8006470:	4629      	mov	r1, r5
 8006472:	9001      	str	r0, [sp, #4]
 8006474:	f000 fb4c 	bl	8006b10 <__mcmp>
 8006478:	2800      	cmp	r0, #0
 800647a:	dcb9      	bgt.n	80063f0 <_dtoa_r+0x978>
 800647c:	d102      	bne.n	8006484 <_dtoa_r+0xa0c>
 800647e:	f018 0f01 	tst.w	r8, #1
 8006482:	d1b5      	bne.n	80063f0 <_dtoa_r+0x978>
 8006484:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006488:	2b30      	cmp	r3, #48	; 0x30
 800648a:	f106 32ff 	add.w	r2, r6, #4294967295
 800648e:	f47f af11 	bne.w	80062b4 <_dtoa_r+0x83c>
 8006492:	4616      	mov	r6, r2
 8006494:	e7f6      	b.n	8006484 <_dtoa_r+0xa0c>
 8006496:	9b04      	ldr	r3, [sp, #16]
 8006498:	4293      	cmp	r3, r2
 800649a:	d105      	bne.n	80064a8 <_dtoa_r+0xa30>
 800649c:	9a04      	ldr	r2, [sp, #16]
 800649e:	f10b 0b01 	add.w	fp, fp, #1
 80064a2:	2331      	movs	r3, #49	; 0x31
 80064a4:	7013      	strb	r3, [r2, #0]
 80064a6:	e705      	b.n	80062b4 <_dtoa_r+0x83c>
 80064a8:	4616      	mov	r6, r2
 80064aa:	e7a1      	b.n	80063f0 <_dtoa_r+0x978>
 80064ac:	4b16      	ldr	r3, [pc, #88]	; (8006508 <_dtoa_r+0xa90>)
 80064ae:	f7ff bb48 	b.w	8005b42 <_dtoa_r+0xca>
 80064b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f47f ab23 	bne.w	8005b00 <_dtoa_r+0x88>
 80064ba:	4b14      	ldr	r3, [pc, #80]	; (800650c <_dtoa_r+0xa94>)
 80064bc:	f7ff bb41 	b.w	8005b42 <_dtoa_r+0xca>
 80064c0:	9b08      	ldr	r3, [sp, #32]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	f77f ae3b 	ble.w	800613e <_dtoa_r+0x6c6>
 80064c8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80064cc:	e64f      	b.n	800616e <_dtoa_r+0x6f6>
 80064ce:	9b06      	ldr	r3, [sp, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	dc03      	bgt.n	80064dc <_dtoa_r+0xa64>
 80064d4:	9b08      	ldr	r3, [sp, #32]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	f73f aed7 	bgt.w	800628a <_dtoa_r+0x812>
 80064dc:	9e04      	ldr	r6, [sp, #16]
 80064de:	9801      	ldr	r0, [sp, #4]
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7ff fa3d 	bl	8005960 <quorem>
 80064e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80064ea:	f806 8b01 	strb.w	r8, [r6], #1
 80064ee:	9b04      	ldr	r3, [sp, #16]
 80064f0:	9a06      	ldr	r2, [sp, #24]
 80064f2:	1af3      	subs	r3, r6, r3
 80064f4:	429a      	cmp	r2, r3
 80064f6:	ddb4      	ble.n	8006462 <_dtoa_r+0x9ea>
 80064f8:	2300      	movs	r3, #0
 80064fa:	220a      	movs	r2, #10
 80064fc:	9901      	ldr	r1, [sp, #4]
 80064fe:	4620      	mov	r0, r4
 8006500:	f000 f93c 	bl	800677c <__multadd>
 8006504:	9001      	str	r0, [sp, #4]
 8006506:	e7ea      	b.n	80064de <_dtoa_r+0xa66>
 8006508:	08007650 	.word	0x08007650
 800650c:	08007674 	.word	0x08007674

08006510 <std>:
 8006510:	2300      	movs	r3, #0
 8006512:	b510      	push	{r4, lr}
 8006514:	4604      	mov	r4, r0
 8006516:	e9c0 3300 	strd	r3, r3, [r0]
 800651a:	6083      	str	r3, [r0, #8]
 800651c:	8181      	strh	r1, [r0, #12]
 800651e:	6643      	str	r3, [r0, #100]	; 0x64
 8006520:	81c2      	strh	r2, [r0, #14]
 8006522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006526:	6183      	str	r3, [r0, #24]
 8006528:	4619      	mov	r1, r3
 800652a:	2208      	movs	r2, #8
 800652c:	305c      	adds	r0, #92	; 0x5c
 800652e:	f7fe fdbd 	bl	80050ac <memset>
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <std+0x38>)
 8006534:	6263      	str	r3, [r4, #36]	; 0x24
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <std+0x3c>)
 8006538:	62a3      	str	r3, [r4, #40]	; 0x28
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <std+0x40>)
 800653c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800653e:	4b05      	ldr	r3, [pc, #20]	; (8006554 <std+0x44>)
 8006540:	6224      	str	r4, [r4, #32]
 8006542:	6323      	str	r3, [r4, #48]	; 0x30
 8006544:	bd10      	pop	{r4, pc}
 8006546:	bf00      	nop
 8006548:	080070a9 	.word	0x080070a9
 800654c:	080070cb 	.word	0x080070cb
 8006550:	08007103 	.word	0x08007103
 8006554:	08007127 	.word	0x08007127

08006558 <_cleanup_r>:
 8006558:	4901      	ldr	r1, [pc, #4]	; (8006560 <_cleanup_r+0x8>)
 800655a:	f000 b885 	b.w	8006668 <_fwalk_reent>
 800655e:	bf00      	nop
 8006560:	08007401 	.word	0x08007401

08006564 <__sfmoreglue>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	1e4a      	subs	r2, r1, #1
 8006568:	2568      	movs	r5, #104	; 0x68
 800656a:	4355      	muls	r5, r2
 800656c:	460e      	mov	r6, r1
 800656e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006572:	f000 fbef 	bl	8006d54 <_malloc_r>
 8006576:	4604      	mov	r4, r0
 8006578:	b140      	cbz	r0, 800658c <__sfmoreglue+0x28>
 800657a:	2100      	movs	r1, #0
 800657c:	e9c0 1600 	strd	r1, r6, [r0]
 8006580:	300c      	adds	r0, #12
 8006582:	60a0      	str	r0, [r4, #8]
 8006584:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006588:	f7fe fd90 	bl	80050ac <memset>
 800658c:	4620      	mov	r0, r4
 800658e:	bd70      	pop	{r4, r5, r6, pc}

08006590 <__sinit>:
 8006590:	6983      	ldr	r3, [r0, #24]
 8006592:	b510      	push	{r4, lr}
 8006594:	4604      	mov	r4, r0
 8006596:	bb33      	cbnz	r3, 80065e6 <__sinit+0x56>
 8006598:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800659c:	6503      	str	r3, [r0, #80]	; 0x50
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <__sinit+0x58>)
 80065a0:	4a12      	ldr	r2, [pc, #72]	; (80065ec <__sinit+0x5c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6282      	str	r2, [r0, #40]	; 0x28
 80065a6:	4298      	cmp	r0, r3
 80065a8:	bf04      	itt	eq
 80065aa:	2301      	moveq	r3, #1
 80065ac:	6183      	streq	r3, [r0, #24]
 80065ae:	f000 f81f 	bl	80065f0 <__sfp>
 80065b2:	6060      	str	r0, [r4, #4]
 80065b4:	4620      	mov	r0, r4
 80065b6:	f000 f81b 	bl	80065f0 <__sfp>
 80065ba:	60a0      	str	r0, [r4, #8]
 80065bc:	4620      	mov	r0, r4
 80065be:	f000 f817 	bl	80065f0 <__sfp>
 80065c2:	2200      	movs	r2, #0
 80065c4:	60e0      	str	r0, [r4, #12]
 80065c6:	2104      	movs	r1, #4
 80065c8:	6860      	ldr	r0, [r4, #4]
 80065ca:	f7ff ffa1 	bl	8006510 <std>
 80065ce:	2201      	movs	r2, #1
 80065d0:	2109      	movs	r1, #9
 80065d2:	68a0      	ldr	r0, [r4, #8]
 80065d4:	f7ff ff9c 	bl	8006510 <std>
 80065d8:	2202      	movs	r2, #2
 80065da:	2112      	movs	r1, #18
 80065dc:	68e0      	ldr	r0, [r4, #12]
 80065de:	f7ff ff97 	bl	8006510 <std>
 80065e2:	2301      	movs	r3, #1
 80065e4:	61a3      	str	r3, [r4, #24]
 80065e6:	bd10      	pop	{r4, pc}
 80065e8:	0800763c 	.word	0x0800763c
 80065ec:	08006559 	.word	0x08006559

080065f0 <__sfp>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <__sfp+0x70>)
 80065f4:	681e      	ldr	r6, [r3, #0]
 80065f6:	69b3      	ldr	r3, [r6, #24]
 80065f8:	4607      	mov	r7, r0
 80065fa:	b913      	cbnz	r3, 8006602 <__sfp+0x12>
 80065fc:	4630      	mov	r0, r6
 80065fe:	f7ff ffc7 	bl	8006590 <__sinit>
 8006602:	3648      	adds	r6, #72	; 0x48
 8006604:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006608:	3b01      	subs	r3, #1
 800660a:	d503      	bpl.n	8006614 <__sfp+0x24>
 800660c:	6833      	ldr	r3, [r6, #0]
 800660e:	b133      	cbz	r3, 800661e <__sfp+0x2e>
 8006610:	6836      	ldr	r6, [r6, #0]
 8006612:	e7f7      	b.n	8006604 <__sfp+0x14>
 8006614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006618:	b16d      	cbz	r5, 8006636 <__sfp+0x46>
 800661a:	3468      	adds	r4, #104	; 0x68
 800661c:	e7f4      	b.n	8006608 <__sfp+0x18>
 800661e:	2104      	movs	r1, #4
 8006620:	4638      	mov	r0, r7
 8006622:	f7ff ff9f 	bl	8006564 <__sfmoreglue>
 8006626:	6030      	str	r0, [r6, #0]
 8006628:	2800      	cmp	r0, #0
 800662a:	d1f1      	bne.n	8006610 <__sfp+0x20>
 800662c:	230c      	movs	r3, #12
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	4604      	mov	r4, r0
 8006632:	4620      	mov	r0, r4
 8006634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006636:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <__sfp+0x74>)
 8006638:	6665      	str	r5, [r4, #100]	; 0x64
 800663a:	e9c4 5500 	strd	r5, r5, [r4]
 800663e:	60a5      	str	r5, [r4, #8]
 8006640:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006644:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006648:	2208      	movs	r2, #8
 800664a:	4629      	mov	r1, r5
 800664c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006650:	f7fe fd2c 	bl	80050ac <memset>
 8006654:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006658:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800665c:	e7e9      	b.n	8006632 <__sfp+0x42>
 800665e:	bf00      	nop
 8006660:	0800763c 	.word	0x0800763c
 8006664:	ffff0001 	.word	0xffff0001

08006668 <_fwalk_reent>:
 8006668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800666c:	4680      	mov	r8, r0
 800666e:	4689      	mov	r9, r1
 8006670:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006674:	2600      	movs	r6, #0
 8006676:	b914      	cbnz	r4, 800667e <_fwalk_reent+0x16>
 8006678:	4630      	mov	r0, r6
 800667a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800667e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006682:	3f01      	subs	r7, #1
 8006684:	d501      	bpl.n	800668a <_fwalk_reent+0x22>
 8006686:	6824      	ldr	r4, [r4, #0]
 8006688:	e7f5      	b.n	8006676 <_fwalk_reent+0xe>
 800668a:	89ab      	ldrh	r3, [r5, #12]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d907      	bls.n	80066a0 <_fwalk_reent+0x38>
 8006690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006694:	3301      	adds	r3, #1
 8006696:	d003      	beq.n	80066a0 <_fwalk_reent+0x38>
 8006698:	4629      	mov	r1, r5
 800669a:	4640      	mov	r0, r8
 800669c:	47c8      	blx	r9
 800669e:	4306      	orrs	r6, r0
 80066a0:	3568      	adds	r5, #104	; 0x68
 80066a2:	e7ee      	b.n	8006682 <_fwalk_reent+0x1a>

080066a4 <_localeconv_r>:
 80066a4:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <_localeconv_r+0x14>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a18      	ldr	r0, [r3, #32]
 80066aa:	4b04      	ldr	r3, [pc, #16]	; (80066bc <_localeconv_r+0x18>)
 80066ac:	2800      	cmp	r0, #0
 80066ae:	bf08      	it	eq
 80066b0:	4618      	moveq	r0, r3
 80066b2:	30f0      	adds	r0, #240	; 0xf0
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	2000000c 	.word	0x2000000c
 80066bc:	20000070 	.word	0x20000070

080066c0 <malloc>:
 80066c0:	4b02      	ldr	r3, [pc, #8]	; (80066cc <malloc+0xc>)
 80066c2:	4601      	mov	r1, r0
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	f000 bb45 	b.w	8006d54 <_malloc_r>
 80066ca:	bf00      	nop
 80066cc:	2000000c 	.word	0x2000000c

080066d0 <memcpy>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	1e43      	subs	r3, r0, #1
 80066d4:	440a      	add	r2, r1
 80066d6:	4291      	cmp	r1, r2
 80066d8:	d100      	bne.n	80066dc <memcpy+0xc>
 80066da:	bd10      	pop	{r4, pc}
 80066dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066e4:	e7f7      	b.n	80066d6 <memcpy+0x6>

080066e6 <_Balloc>:
 80066e6:	b570      	push	{r4, r5, r6, lr}
 80066e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066ea:	4604      	mov	r4, r0
 80066ec:	460e      	mov	r6, r1
 80066ee:	b93d      	cbnz	r5, 8006700 <_Balloc+0x1a>
 80066f0:	2010      	movs	r0, #16
 80066f2:	f7ff ffe5 	bl	80066c0 <malloc>
 80066f6:	6260      	str	r0, [r4, #36]	; 0x24
 80066f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066fc:	6005      	str	r5, [r0, #0]
 80066fe:	60c5      	str	r5, [r0, #12]
 8006700:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006702:	68eb      	ldr	r3, [r5, #12]
 8006704:	b183      	cbz	r3, 8006728 <_Balloc+0x42>
 8006706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800670e:	b9b8      	cbnz	r0, 8006740 <_Balloc+0x5a>
 8006710:	2101      	movs	r1, #1
 8006712:	fa01 f506 	lsl.w	r5, r1, r6
 8006716:	1d6a      	adds	r2, r5, #5
 8006718:	0092      	lsls	r2, r2, #2
 800671a:	4620      	mov	r0, r4
 800671c:	f000 fabe 	bl	8006c9c <_calloc_r>
 8006720:	b160      	cbz	r0, 800673c <_Balloc+0x56>
 8006722:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006726:	e00e      	b.n	8006746 <_Balloc+0x60>
 8006728:	2221      	movs	r2, #33	; 0x21
 800672a:	2104      	movs	r1, #4
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fab5 	bl	8006c9c <_calloc_r>
 8006732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006734:	60e8      	str	r0, [r5, #12]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e4      	bne.n	8006706 <_Balloc+0x20>
 800673c:	2000      	movs	r0, #0
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	6802      	ldr	r2, [r0, #0]
 8006742:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006746:	2300      	movs	r3, #0
 8006748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800674c:	e7f7      	b.n	800673e <_Balloc+0x58>

0800674e <_Bfree>:
 800674e:	b570      	push	{r4, r5, r6, lr}
 8006750:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006752:	4606      	mov	r6, r0
 8006754:	460d      	mov	r5, r1
 8006756:	b93c      	cbnz	r4, 8006768 <_Bfree+0x1a>
 8006758:	2010      	movs	r0, #16
 800675a:	f7ff ffb1 	bl	80066c0 <malloc>
 800675e:	6270      	str	r0, [r6, #36]	; 0x24
 8006760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006764:	6004      	str	r4, [r0, #0]
 8006766:	60c4      	str	r4, [r0, #12]
 8006768:	b13d      	cbz	r5, 800677a <_Bfree+0x2c>
 800676a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800676c:	686a      	ldr	r2, [r5, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006774:	6029      	str	r1, [r5, #0]
 8006776:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800677a:	bd70      	pop	{r4, r5, r6, pc}

0800677c <__multadd>:
 800677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006780:	690d      	ldr	r5, [r1, #16]
 8006782:	461f      	mov	r7, r3
 8006784:	4606      	mov	r6, r0
 8006786:	460c      	mov	r4, r1
 8006788:	f101 0c14 	add.w	ip, r1, #20
 800678c:	2300      	movs	r3, #0
 800678e:	f8dc 0000 	ldr.w	r0, [ip]
 8006792:	b281      	uxth	r1, r0
 8006794:	fb02 7101 	mla	r1, r2, r1, r7
 8006798:	0c0f      	lsrs	r7, r1, #16
 800679a:	0c00      	lsrs	r0, r0, #16
 800679c:	fb02 7000 	mla	r0, r2, r0, r7
 80067a0:	b289      	uxth	r1, r1
 80067a2:	3301      	adds	r3, #1
 80067a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80067a8:	429d      	cmp	r5, r3
 80067aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80067ae:	f84c 1b04 	str.w	r1, [ip], #4
 80067b2:	dcec      	bgt.n	800678e <__multadd+0x12>
 80067b4:	b1d7      	cbz	r7, 80067ec <__multadd+0x70>
 80067b6:	68a3      	ldr	r3, [r4, #8]
 80067b8:	42ab      	cmp	r3, r5
 80067ba:	dc12      	bgt.n	80067e2 <__multadd+0x66>
 80067bc:	6861      	ldr	r1, [r4, #4]
 80067be:	4630      	mov	r0, r6
 80067c0:	3101      	adds	r1, #1
 80067c2:	f7ff ff90 	bl	80066e6 <_Balloc>
 80067c6:	6922      	ldr	r2, [r4, #16]
 80067c8:	3202      	adds	r2, #2
 80067ca:	f104 010c 	add.w	r1, r4, #12
 80067ce:	4680      	mov	r8, r0
 80067d0:	0092      	lsls	r2, r2, #2
 80067d2:	300c      	adds	r0, #12
 80067d4:	f7ff ff7c 	bl	80066d0 <memcpy>
 80067d8:	4621      	mov	r1, r4
 80067da:	4630      	mov	r0, r6
 80067dc:	f7ff ffb7 	bl	800674e <_Bfree>
 80067e0:	4644      	mov	r4, r8
 80067e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067e6:	3501      	adds	r5, #1
 80067e8:	615f      	str	r7, [r3, #20]
 80067ea:	6125      	str	r5, [r4, #16]
 80067ec:	4620      	mov	r0, r4
 80067ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080067f2 <__hi0bits>:
 80067f2:	0c02      	lsrs	r2, r0, #16
 80067f4:	0412      	lsls	r2, r2, #16
 80067f6:	4603      	mov	r3, r0
 80067f8:	b9b2      	cbnz	r2, 8006828 <__hi0bits+0x36>
 80067fa:	0403      	lsls	r3, r0, #16
 80067fc:	2010      	movs	r0, #16
 80067fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006802:	bf04      	itt	eq
 8006804:	021b      	lsleq	r3, r3, #8
 8006806:	3008      	addeq	r0, #8
 8006808:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800680c:	bf04      	itt	eq
 800680e:	011b      	lsleq	r3, r3, #4
 8006810:	3004      	addeq	r0, #4
 8006812:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006816:	bf04      	itt	eq
 8006818:	009b      	lsleq	r3, r3, #2
 800681a:	3002      	addeq	r0, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	db06      	blt.n	800682e <__hi0bits+0x3c>
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	d503      	bpl.n	800682c <__hi0bits+0x3a>
 8006824:	3001      	adds	r0, #1
 8006826:	4770      	bx	lr
 8006828:	2000      	movs	r0, #0
 800682a:	e7e8      	b.n	80067fe <__hi0bits+0xc>
 800682c:	2020      	movs	r0, #32
 800682e:	4770      	bx	lr

08006830 <__lo0bits>:
 8006830:	6803      	ldr	r3, [r0, #0]
 8006832:	f013 0207 	ands.w	r2, r3, #7
 8006836:	4601      	mov	r1, r0
 8006838:	d00b      	beq.n	8006852 <__lo0bits+0x22>
 800683a:	07da      	lsls	r2, r3, #31
 800683c:	d423      	bmi.n	8006886 <__lo0bits+0x56>
 800683e:	0798      	lsls	r0, r3, #30
 8006840:	bf49      	itett	mi
 8006842:	085b      	lsrmi	r3, r3, #1
 8006844:	089b      	lsrpl	r3, r3, #2
 8006846:	2001      	movmi	r0, #1
 8006848:	600b      	strmi	r3, [r1, #0]
 800684a:	bf5c      	itt	pl
 800684c:	600b      	strpl	r3, [r1, #0]
 800684e:	2002      	movpl	r0, #2
 8006850:	4770      	bx	lr
 8006852:	b298      	uxth	r0, r3
 8006854:	b9a8      	cbnz	r0, 8006882 <__lo0bits+0x52>
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	2010      	movs	r0, #16
 800685a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800685e:	bf04      	itt	eq
 8006860:	0a1b      	lsreq	r3, r3, #8
 8006862:	3008      	addeq	r0, #8
 8006864:	071a      	lsls	r2, r3, #28
 8006866:	bf04      	itt	eq
 8006868:	091b      	lsreq	r3, r3, #4
 800686a:	3004      	addeq	r0, #4
 800686c:	079a      	lsls	r2, r3, #30
 800686e:	bf04      	itt	eq
 8006870:	089b      	lsreq	r3, r3, #2
 8006872:	3002      	addeq	r0, #2
 8006874:	07da      	lsls	r2, r3, #31
 8006876:	d402      	bmi.n	800687e <__lo0bits+0x4e>
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	d006      	beq.n	800688a <__lo0bits+0x5a>
 800687c:	3001      	adds	r0, #1
 800687e:	600b      	str	r3, [r1, #0]
 8006880:	4770      	bx	lr
 8006882:	4610      	mov	r0, r2
 8006884:	e7e9      	b.n	800685a <__lo0bits+0x2a>
 8006886:	2000      	movs	r0, #0
 8006888:	4770      	bx	lr
 800688a:	2020      	movs	r0, #32
 800688c:	4770      	bx	lr

0800688e <__i2b>:
 800688e:	b510      	push	{r4, lr}
 8006890:	460c      	mov	r4, r1
 8006892:	2101      	movs	r1, #1
 8006894:	f7ff ff27 	bl	80066e6 <_Balloc>
 8006898:	2201      	movs	r2, #1
 800689a:	6144      	str	r4, [r0, #20]
 800689c:	6102      	str	r2, [r0, #16]
 800689e:	bd10      	pop	{r4, pc}

080068a0 <__multiply>:
 80068a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	4614      	mov	r4, r2
 80068a6:	690a      	ldr	r2, [r1, #16]
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	bfb8      	it	lt
 80068ae:	460b      	movlt	r3, r1
 80068b0:	4688      	mov	r8, r1
 80068b2:	bfbc      	itt	lt
 80068b4:	46a0      	movlt	r8, r4
 80068b6:	461c      	movlt	r4, r3
 80068b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80068c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80068c8:	eb07 0609 	add.w	r6, r7, r9
 80068cc:	42b3      	cmp	r3, r6
 80068ce:	bfb8      	it	lt
 80068d0:	3101      	addlt	r1, #1
 80068d2:	f7ff ff08 	bl	80066e6 <_Balloc>
 80068d6:	f100 0514 	add.w	r5, r0, #20
 80068da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80068de:	462b      	mov	r3, r5
 80068e0:	2200      	movs	r2, #0
 80068e2:	4573      	cmp	r3, lr
 80068e4:	d316      	bcc.n	8006914 <__multiply+0x74>
 80068e6:	f104 0214 	add.w	r2, r4, #20
 80068ea:	f108 0114 	add.w	r1, r8, #20
 80068ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80068f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	9b00      	ldr	r3, [sp, #0]
 80068fa:	9201      	str	r2, [sp, #4]
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d80c      	bhi.n	800691a <__multiply+0x7a>
 8006900:	2e00      	cmp	r6, #0
 8006902:	dd03      	ble.n	800690c <__multiply+0x6c>
 8006904:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006908:	2b00      	cmp	r3, #0
 800690a:	d05d      	beq.n	80069c8 <__multiply+0x128>
 800690c:	6106      	str	r6, [r0, #16]
 800690e:	b003      	add	sp, #12
 8006910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006914:	f843 2b04 	str.w	r2, [r3], #4
 8006918:	e7e3      	b.n	80068e2 <__multiply+0x42>
 800691a:	f8b2 b000 	ldrh.w	fp, [r2]
 800691e:	f1bb 0f00 	cmp.w	fp, #0
 8006922:	d023      	beq.n	800696c <__multiply+0xcc>
 8006924:	4689      	mov	r9, r1
 8006926:	46ac      	mov	ip, r5
 8006928:	f04f 0800 	mov.w	r8, #0
 800692c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006930:	f8dc a000 	ldr.w	sl, [ip]
 8006934:	b2a3      	uxth	r3, r4
 8006936:	fa1f fa8a 	uxth.w	sl, sl
 800693a:	fb0b a303 	mla	r3, fp, r3, sl
 800693e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006942:	f8dc 4000 	ldr.w	r4, [ip]
 8006946:	4443      	add	r3, r8
 8006948:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800694c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006950:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006954:	46e2      	mov	sl, ip
 8006956:	b29b      	uxth	r3, r3
 8006958:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800695c:	454f      	cmp	r7, r9
 800695e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006962:	f84a 3b04 	str.w	r3, [sl], #4
 8006966:	d82b      	bhi.n	80069c0 <__multiply+0x120>
 8006968:	f8cc 8004 	str.w	r8, [ip, #4]
 800696c:	9b01      	ldr	r3, [sp, #4]
 800696e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006972:	3204      	adds	r2, #4
 8006974:	f1ba 0f00 	cmp.w	sl, #0
 8006978:	d020      	beq.n	80069bc <__multiply+0x11c>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	4689      	mov	r9, r1
 800697e:	46a8      	mov	r8, r5
 8006980:	f04f 0b00 	mov.w	fp, #0
 8006984:	f8b9 c000 	ldrh.w	ip, [r9]
 8006988:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800698c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006990:	445c      	add	r4, fp
 8006992:	46c4      	mov	ip, r8
 8006994:	b29b      	uxth	r3, r3
 8006996:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800699a:	f84c 3b04 	str.w	r3, [ip], #4
 800699e:	f859 3b04 	ldr.w	r3, [r9], #4
 80069a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80069a6:	0c1b      	lsrs	r3, r3, #16
 80069a8:	fb0a b303 	mla	r3, sl, r3, fp
 80069ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80069b0:	454f      	cmp	r7, r9
 80069b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80069b6:	d805      	bhi.n	80069c4 <__multiply+0x124>
 80069b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80069bc:	3504      	adds	r5, #4
 80069be:	e79b      	b.n	80068f8 <__multiply+0x58>
 80069c0:	46d4      	mov	ip, sl
 80069c2:	e7b3      	b.n	800692c <__multiply+0x8c>
 80069c4:	46e0      	mov	r8, ip
 80069c6:	e7dd      	b.n	8006984 <__multiply+0xe4>
 80069c8:	3e01      	subs	r6, #1
 80069ca:	e799      	b.n	8006900 <__multiply+0x60>

080069cc <__pow5mult>:
 80069cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d0:	4615      	mov	r5, r2
 80069d2:	f012 0203 	ands.w	r2, r2, #3
 80069d6:	4606      	mov	r6, r0
 80069d8:	460f      	mov	r7, r1
 80069da:	d007      	beq.n	80069ec <__pow5mult+0x20>
 80069dc:	3a01      	subs	r2, #1
 80069de:	4c21      	ldr	r4, [pc, #132]	; (8006a64 <__pow5mult+0x98>)
 80069e0:	2300      	movs	r3, #0
 80069e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069e6:	f7ff fec9 	bl	800677c <__multadd>
 80069ea:	4607      	mov	r7, r0
 80069ec:	10ad      	asrs	r5, r5, #2
 80069ee:	d035      	beq.n	8006a5c <__pow5mult+0x90>
 80069f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069f2:	b93c      	cbnz	r4, 8006a04 <__pow5mult+0x38>
 80069f4:	2010      	movs	r0, #16
 80069f6:	f7ff fe63 	bl	80066c0 <malloc>
 80069fa:	6270      	str	r0, [r6, #36]	; 0x24
 80069fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a00:	6004      	str	r4, [r0, #0]
 8006a02:	60c4      	str	r4, [r0, #12]
 8006a04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a0c:	b94c      	cbnz	r4, 8006a22 <__pow5mult+0x56>
 8006a0e:	f240 2171 	movw	r1, #625	; 0x271
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7ff ff3b 	bl	800688e <__i2b>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a1e:	4604      	mov	r4, r0
 8006a20:	6003      	str	r3, [r0, #0]
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	07eb      	lsls	r3, r5, #31
 8006a28:	d50a      	bpl.n	8006a40 <__pow5mult+0x74>
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f7ff ff36 	bl	80068a0 <__multiply>
 8006a34:	4639      	mov	r1, r7
 8006a36:	4681      	mov	r9, r0
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f7ff fe88 	bl	800674e <_Bfree>
 8006a3e:	464f      	mov	r7, r9
 8006a40:	106d      	asrs	r5, r5, #1
 8006a42:	d00b      	beq.n	8006a5c <__pow5mult+0x90>
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	b938      	cbnz	r0, 8006a58 <__pow5mult+0x8c>
 8006a48:	4622      	mov	r2, r4
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f7ff ff27 	bl	80068a0 <__multiply>
 8006a52:	6020      	str	r0, [r4, #0]
 8006a54:	f8c0 8000 	str.w	r8, [r0]
 8006a58:	4604      	mov	r4, r0
 8006a5a:	e7e4      	b.n	8006a26 <__pow5mult+0x5a>
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a62:	bf00      	nop
 8006a64:	080077d8 	.word	0x080077d8

08006a68 <__lshift>:
 8006a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	6849      	ldr	r1, [r1, #4]
 8006a76:	eb0a 0903 	add.w	r9, sl, r3
 8006a7a:	68a3      	ldr	r3, [r4, #8]
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	4616      	mov	r6, r2
 8006a80:	f109 0501 	add.w	r5, r9, #1
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	db32      	blt.n	8006aee <__lshift+0x86>
 8006a88:	4638      	mov	r0, r7
 8006a8a:	f7ff fe2c 	bl	80066e6 <_Balloc>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4680      	mov	r8, r0
 8006a92:	f100 0114 	add.w	r1, r0, #20
 8006a96:	461a      	mov	r2, r3
 8006a98:	4553      	cmp	r3, sl
 8006a9a:	db2b      	blt.n	8006af4 <__lshift+0x8c>
 8006a9c:	6920      	ldr	r0, [r4, #16]
 8006a9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006aa2:	f104 0314 	add.w	r3, r4, #20
 8006aa6:	f016 021f 	ands.w	r2, r6, #31
 8006aaa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006aae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ab2:	d025      	beq.n	8006b00 <__lshift+0x98>
 8006ab4:	f1c2 0e20 	rsb	lr, r2, #32
 8006ab8:	2000      	movs	r0, #0
 8006aba:	681e      	ldr	r6, [r3, #0]
 8006abc:	468a      	mov	sl, r1
 8006abe:	4096      	lsls	r6, r2
 8006ac0:	4330      	orrs	r0, r6
 8006ac2:	f84a 0b04 	str.w	r0, [sl], #4
 8006ac6:	f853 0b04 	ldr.w	r0, [r3], #4
 8006aca:	459c      	cmp	ip, r3
 8006acc:	fa20 f00e 	lsr.w	r0, r0, lr
 8006ad0:	d814      	bhi.n	8006afc <__lshift+0x94>
 8006ad2:	6048      	str	r0, [r1, #4]
 8006ad4:	b108      	cbz	r0, 8006ada <__lshift+0x72>
 8006ad6:	f109 0502 	add.w	r5, r9, #2
 8006ada:	3d01      	subs	r5, #1
 8006adc:	4638      	mov	r0, r7
 8006ade:	f8c8 5010 	str.w	r5, [r8, #16]
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	f7ff fe33 	bl	800674e <_Bfree>
 8006ae8:	4640      	mov	r0, r8
 8006aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aee:	3101      	adds	r1, #1
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	e7c7      	b.n	8006a84 <__lshift+0x1c>
 8006af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006af8:	3301      	adds	r3, #1
 8006afa:	e7cd      	b.n	8006a98 <__lshift+0x30>
 8006afc:	4651      	mov	r1, sl
 8006afe:	e7dc      	b.n	8006aba <__lshift+0x52>
 8006b00:	3904      	subs	r1, #4
 8006b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b06:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b0a:	459c      	cmp	ip, r3
 8006b0c:	d8f9      	bhi.n	8006b02 <__lshift+0x9a>
 8006b0e:	e7e4      	b.n	8006ada <__lshift+0x72>

08006b10 <__mcmp>:
 8006b10:	6903      	ldr	r3, [r0, #16]
 8006b12:	690a      	ldr	r2, [r1, #16]
 8006b14:	1a9b      	subs	r3, r3, r2
 8006b16:	b530      	push	{r4, r5, lr}
 8006b18:	d10c      	bne.n	8006b34 <__mcmp+0x24>
 8006b1a:	0092      	lsls	r2, r2, #2
 8006b1c:	3014      	adds	r0, #20
 8006b1e:	3114      	adds	r1, #20
 8006b20:	1884      	adds	r4, r0, r2
 8006b22:	4411      	add	r1, r2
 8006b24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b2c:	4295      	cmp	r5, r2
 8006b2e:	d003      	beq.n	8006b38 <__mcmp+0x28>
 8006b30:	d305      	bcc.n	8006b3e <__mcmp+0x2e>
 8006b32:	2301      	movs	r3, #1
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd30      	pop	{r4, r5, pc}
 8006b38:	42a0      	cmp	r0, r4
 8006b3a:	d3f3      	bcc.n	8006b24 <__mcmp+0x14>
 8006b3c:	e7fa      	b.n	8006b34 <__mcmp+0x24>
 8006b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b42:	e7f7      	b.n	8006b34 <__mcmp+0x24>

08006b44 <__mdiff>:
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	460d      	mov	r5, r1
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4628      	mov	r0, r5
 8006b50:	4614      	mov	r4, r2
 8006b52:	f7ff ffdd 	bl	8006b10 <__mcmp>
 8006b56:	1e06      	subs	r6, r0, #0
 8006b58:	d108      	bne.n	8006b6c <__mdiff+0x28>
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f7ff fdc2 	bl	80066e6 <_Balloc>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6c:	bfa4      	itt	ge
 8006b6e:	4623      	movge	r3, r4
 8006b70:	462c      	movge	r4, r5
 8006b72:	4638      	mov	r0, r7
 8006b74:	6861      	ldr	r1, [r4, #4]
 8006b76:	bfa6      	itte	ge
 8006b78:	461d      	movge	r5, r3
 8006b7a:	2600      	movge	r6, #0
 8006b7c:	2601      	movlt	r6, #1
 8006b7e:	f7ff fdb2 	bl	80066e6 <_Balloc>
 8006b82:	692b      	ldr	r3, [r5, #16]
 8006b84:	60c6      	str	r6, [r0, #12]
 8006b86:	6926      	ldr	r6, [r4, #16]
 8006b88:	f105 0914 	add.w	r9, r5, #20
 8006b8c:	f104 0214 	add.w	r2, r4, #20
 8006b90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006b94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006b98:	f100 0514 	add.w	r5, r0, #20
 8006b9c:	f04f 0e00 	mov.w	lr, #0
 8006ba0:	f852 ab04 	ldr.w	sl, [r2], #4
 8006ba4:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ba8:	fa1e f18a 	uxtah	r1, lr, sl
 8006bac:	b2a3      	uxth	r3, r4
 8006bae:	1ac9      	subs	r1, r1, r3
 8006bb0:	0c23      	lsrs	r3, r4, #16
 8006bb2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006bb6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bba:	b289      	uxth	r1, r1
 8006bbc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006bc0:	45c8      	cmp	r8, r9
 8006bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006bc6:	4694      	mov	ip, r2
 8006bc8:	f845 3b04 	str.w	r3, [r5], #4
 8006bcc:	d8e8      	bhi.n	8006ba0 <__mdiff+0x5c>
 8006bce:	45bc      	cmp	ip, r7
 8006bd0:	d304      	bcc.n	8006bdc <__mdiff+0x98>
 8006bd2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006bd6:	b183      	cbz	r3, 8006bfa <__mdiff+0xb6>
 8006bd8:	6106      	str	r6, [r0, #16]
 8006bda:	e7c5      	b.n	8006b68 <__mdiff+0x24>
 8006bdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006be0:	fa1e f381 	uxtah	r3, lr, r1
 8006be4:	141a      	asrs	r2, r3, #16
 8006be6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bf0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006bf4:	f845 3b04 	str.w	r3, [r5], #4
 8006bf8:	e7e9      	b.n	8006bce <__mdiff+0x8a>
 8006bfa:	3e01      	subs	r6, #1
 8006bfc:	e7e9      	b.n	8006bd2 <__mdiff+0x8e>

08006bfe <__d2b>:
 8006bfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c02:	460e      	mov	r6, r1
 8006c04:	2101      	movs	r1, #1
 8006c06:	ec59 8b10 	vmov	r8, r9, d0
 8006c0a:	4615      	mov	r5, r2
 8006c0c:	f7ff fd6b 	bl	80066e6 <_Balloc>
 8006c10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c14:	4607      	mov	r7, r0
 8006c16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c1a:	bb34      	cbnz	r4, 8006c6a <__d2b+0x6c>
 8006c1c:	9301      	str	r3, [sp, #4]
 8006c1e:	f1b8 0300 	subs.w	r3, r8, #0
 8006c22:	d027      	beq.n	8006c74 <__d2b+0x76>
 8006c24:	a802      	add	r0, sp, #8
 8006c26:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006c2a:	f7ff fe01 	bl	8006830 <__lo0bits>
 8006c2e:	9900      	ldr	r1, [sp, #0]
 8006c30:	b1f0      	cbz	r0, 8006c70 <__d2b+0x72>
 8006c32:	9a01      	ldr	r2, [sp, #4]
 8006c34:	f1c0 0320 	rsb	r3, r0, #32
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	40c2      	lsrs	r2, r0
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	9201      	str	r2, [sp, #4]
 8006c44:	9b01      	ldr	r3, [sp, #4]
 8006c46:	61bb      	str	r3, [r7, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	bf14      	ite	ne
 8006c4c:	2102      	movne	r1, #2
 8006c4e:	2101      	moveq	r1, #1
 8006c50:	6139      	str	r1, [r7, #16]
 8006c52:	b1c4      	cbz	r4, 8006c86 <__d2b+0x88>
 8006c54:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006c58:	4404      	add	r4, r0
 8006c5a:	6034      	str	r4, [r6, #0]
 8006c5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c60:	6028      	str	r0, [r5, #0]
 8006c62:	4638      	mov	r0, r7
 8006c64:	b003      	add	sp, #12
 8006c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c6e:	e7d5      	b.n	8006c1c <__d2b+0x1e>
 8006c70:	6179      	str	r1, [r7, #20]
 8006c72:	e7e7      	b.n	8006c44 <__d2b+0x46>
 8006c74:	a801      	add	r0, sp, #4
 8006c76:	f7ff fddb 	bl	8006830 <__lo0bits>
 8006c7a:	9b01      	ldr	r3, [sp, #4]
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	2101      	movs	r1, #1
 8006c80:	6139      	str	r1, [r7, #16]
 8006c82:	3020      	adds	r0, #32
 8006c84:	e7e5      	b.n	8006c52 <__d2b+0x54>
 8006c86:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006c8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c8e:	6030      	str	r0, [r6, #0]
 8006c90:	6918      	ldr	r0, [r3, #16]
 8006c92:	f7ff fdae 	bl	80067f2 <__hi0bits>
 8006c96:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006c9a:	e7e1      	b.n	8006c60 <__d2b+0x62>

08006c9c <_calloc_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	fb02 f401 	mul.w	r4, r2, r1
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	f000 f856 	bl	8006d54 <_malloc_r>
 8006ca8:	4605      	mov	r5, r0
 8006caa:	b118      	cbz	r0, 8006cb4 <_calloc_r+0x18>
 8006cac:	4622      	mov	r2, r4
 8006cae:	2100      	movs	r1, #0
 8006cb0:	f7fe f9fc 	bl	80050ac <memset>
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}

08006cb8 <_free_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4605      	mov	r5, r0
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	d045      	beq.n	8006d4c <_free_r+0x94>
 8006cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc4:	1f0c      	subs	r4, r1, #4
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bfb8      	it	lt
 8006cca:	18e4      	addlt	r4, r4, r3
 8006ccc:	f000 fc4a 	bl	8007564 <__malloc_lock>
 8006cd0:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <_free_r+0x98>)
 8006cd2:	6813      	ldr	r3, [r2, #0]
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	b933      	cbnz	r3, 8006ce6 <_free_r+0x2e>
 8006cd8:	6063      	str	r3, [r4, #4]
 8006cda:	6014      	str	r4, [r2, #0]
 8006cdc:	4628      	mov	r0, r5
 8006cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ce2:	f000 bc40 	b.w	8007566 <__malloc_unlock>
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	d90c      	bls.n	8006d04 <_free_r+0x4c>
 8006cea:	6821      	ldr	r1, [r4, #0]
 8006cec:	1862      	adds	r2, r4, r1
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	bf04      	itt	eq
 8006cf2:	681a      	ldreq	r2, [r3, #0]
 8006cf4:	685b      	ldreq	r3, [r3, #4]
 8006cf6:	6063      	str	r3, [r4, #4]
 8006cf8:	bf04      	itt	eq
 8006cfa:	1852      	addeq	r2, r2, r1
 8006cfc:	6022      	streq	r2, [r4, #0]
 8006cfe:	6004      	str	r4, [r0, #0]
 8006d00:	e7ec      	b.n	8006cdc <_free_r+0x24>
 8006d02:	4613      	mov	r3, r2
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	b10a      	cbz	r2, 8006d0c <_free_r+0x54>
 8006d08:	42a2      	cmp	r2, r4
 8006d0a:	d9fa      	bls.n	8006d02 <_free_r+0x4a>
 8006d0c:	6819      	ldr	r1, [r3, #0]
 8006d0e:	1858      	adds	r0, r3, r1
 8006d10:	42a0      	cmp	r0, r4
 8006d12:	d10b      	bne.n	8006d2c <_free_r+0x74>
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	4401      	add	r1, r0
 8006d18:	1858      	adds	r0, r3, r1
 8006d1a:	4282      	cmp	r2, r0
 8006d1c:	6019      	str	r1, [r3, #0]
 8006d1e:	d1dd      	bne.n	8006cdc <_free_r+0x24>
 8006d20:	6810      	ldr	r0, [r2, #0]
 8006d22:	6852      	ldr	r2, [r2, #4]
 8006d24:	605a      	str	r2, [r3, #4]
 8006d26:	4401      	add	r1, r0
 8006d28:	6019      	str	r1, [r3, #0]
 8006d2a:	e7d7      	b.n	8006cdc <_free_r+0x24>
 8006d2c:	d902      	bls.n	8006d34 <_free_r+0x7c>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	602b      	str	r3, [r5, #0]
 8006d32:	e7d3      	b.n	8006cdc <_free_r+0x24>
 8006d34:	6820      	ldr	r0, [r4, #0]
 8006d36:	1821      	adds	r1, r4, r0
 8006d38:	428a      	cmp	r2, r1
 8006d3a:	bf04      	itt	eq
 8006d3c:	6811      	ldreq	r1, [r2, #0]
 8006d3e:	6852      	ldreq	r2, [r2, #4]
 8006d40:	6062      	str	r2, [r4, #4]
 8006d42:	bf04      	itt	eq
 8006d44:	1809      	addeq	r1, r1, r0
 8006d46:	6021      	streq	r1, [r4, #0]
 8006d48:	605c      	str	r4, [r3, #4]
 8006d4a:	e7c7      	b.n	8006cdc <_free_r+0x24>
 8006d4c:	bd38      	pop	{r3, r4, r5, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000200 	.word	0x20000200

08006d54 <_malloc_r>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	1ccd      	adds	r5, r1, #3
 8006d58:	f025 0503 	bic.w	r5, r5, #3
 8006d5c:	3508      	adds	r5, #8
 8006d5e:	2d0c      	cmp	r5, #12
 8006d60:	bf38      	it	cc
 8006d62:	250c      	movcc	r5, #12
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	4606      	mov	r6, r0
 8006d68:	db01      	blt.n	8006d6e <_malloc_r+0x1a>
 8006d6a:	42a9      	cmp	r1, r5
 8006d6c:	d903      	bls.n	8006d76 <_malloc_r+0x22>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	6033      	str	r3, [r6, #0]
 8006d72:	2000      	movs	r0, #0
 8006d74:	bd70      	pop	{r4, r5, r6, pc}
 8006d76:	f000 fbf5 	bl	8007564 <__malloc_lock>
 8006d7a:	4a21      	ldr	r2, [pc, #132]	; (8006e00 <_malloc_r+0xac>)
 8006d7c:	6814      	ldr	r4, [r2, #0]
 8006d7e:	4621      	mov	r1, r4
 8006d80:	b991      	cbnz	r1, 8006da8 <_malloc_r+0x54>
 8006d82:	4c20      	ldr	r4, [pc, #128]	; (8006e04 <_malloc_r+0xb0>)
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	b91b      	cbnz	r3, 8006d90 <_malloc_r+0x3c>
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f000 f97d 	bl	8007088 <_sbrk_r>
 8006d8e:	6020      	str	r0, [r4, #0]
 8006d90:	4629      	mov	r1, r5
 8006d92:	4630      	mov	r0, r6
 8006d94:	f000 f978 	bl	8007088 <_sbrk_r>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d124      	bne.n	8006de6 <_malloc_r+0x92>
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	6033      	str	r3, [r6, #0]
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 fbe0 	bl	8007566 <__malloc_unlock>
 8006da6:	e7e4      	b.n	8006d72 <_malloc_r+0x1e>
 8006da8:	680b      	ldr	r3, [r1, #0]
 8006daa:	1b5b      	subs	r3, r3, r5
 8006dac:	d418      	bmi.n	8006de0 <_malloc_r+0x8c>
 8006dae:	2b0b      	cmp	r3, #11
 8006db0:	d90f      	bls.n	8006dd2 <_malloc_r+0x7e>
 8006db2:	600b      	str	r3, [r1, #0]
 8006db4:	50cd      	str	r5, [r1, r3]
 8006db6:	18cc      	adds	r4, r1, r3
 8006db8:	4630      	mov	r0, r6
 8006dba:	f000 fbd4 	bl	8007566 <__malloc_unlock>
 8006dbe:	f104 000b 	add.w	r0, r4, #11
 8006dc2:	1d23      	adds	r3, r4, #4
 8006dc4:	f020 0007 	bic.w	r0, r0, #7
 8006dc8:	1ac3      	subs	r3, r0, r3
 8006dca:	d0d3      	beq.n	8006d74 <_malloc_r+0x20>
 8006dcc:	425a      	negs	r2, r3
 8006dce:	50e2      	str	r2, [r4, r3]
 8006dd0:	e7d0      	b.n	8006d74 <_malloc_r+0x20>
 8006dd2:	428c      	cmp	r4, r1
 8006dd4:	684b      	ldr	r3, [r1, #4]
 8006dd6:	bf16      	itet	ne
 8006dd8:	6063      	strne	r3, [r4, #4]
 8006dda:	6013      	streq	r3, [r2, #0]
 8006ddc:	460c      	movne	r4, r1
 8006dde:	e7eb      	b.n	8006db8 <_malloc_r+0x64>
 8006de0:	460c      	mov	r4, r1
 8006de2:	6849      	ldr	r1, [r1, #4]
 8006de4:	e7cc      	b.n	8006d80 <_malloc_r+0x2c>
 8006de6:	1cc4      	adds	r4, r0, #3
 8006de8:	f024 0403 	bic.w	r4, r4, #3
 8006dec:	42a0      	cmp	r0, r4
 8006dee:	d005      	beq.n	8006dfc <_malloc_r+0xa8>
 8006df0:	1a21      	subs	r1, r4, r0
 8006df2:	4630      	mov	r0, r6
 8006df4:	f000 f948 	bl	8007088 <_sbrk_r>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d0cf      	beq.n	8006d9c <_malloc_r+0x48>
 8006dfc:	6025      	str	r5, [r4, #0]
 8006dfe:	e7db      	b.n	8006db8 <_malloc_r+0x64>
 8006e00:	20000200 	.word	0x20000200
 8006e04:	20000204 	.word	0x20000204

08006e08 <__sfputc_r>:
 8006e08:	6893      	ldr	r3, [r2, #8]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	b410      	push	{r4}
 8006e10:	6093      	str	r3, [r2, #8]
 8006e12:	da08      	bge.n	8006e26 <__sfputc_r+0x1e>
 8006e14:	6994      	ldr	r4, [r2, #24]
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	db01      	blt.n	8006e1e <__sfputc_r+0x16>
 8006e1a:	290a      	cmp	r1, #10
 8006e1c:	d103      	bne.n	8006e26 <__sfputc_r+0x1e>
 8006e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e22:	f000 b985 	b.w	8007130 <__swbuf_r>
 8006e26:	6813      	ldr	r3, [r2, #0]
 8006e28:	1c58      	adds	r0, r3, #1
 8006e2a:	6010      	str	r0, [r2, #0]
 8006e2c:	7019      	strb	r1, [r3, #0]
 8006e2e:	4608      	mov	r0, r1
 8006e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <__sfputs_r>:
 8006e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e38:	4606      	mov	r6, r0
 8006e3a:	460f      	mov	r7, r1
 8006e3c:	4614      	mov	r4, r2
 8006e3e:	18d5      	adds	r5, r2, r3
 8006e40:	42ac      	cmp	r4, r5
 8006e42:	d101      	bne.n	8006e48 <__sfputs_r+0x12>
 8006e44:	2000      	movs	r0, #0
 8006e46:	e007      	b.n	8006e58 <__sfputs_r+0x22>
 8006e48:	463a      	mov	r2, r7
 8006e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f7ff ffda 	bl	8006e08 <__sfputc_r>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d1f3      	bne.n	8006e40 <__sfputs_r+0xa>
 8006e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e5c <_vfiprintf_r>:
 8006e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	460c      	mov	r4, r1
 8006e62:	b09d      	sub	sp, #116	; 0x74
 8006e64:	4617      	mov	r7, r2
 8006e66:	461d      	mov	r5, r3
 8006e68:	4606      	mov	r6, r0
 8006e6a:	b118      	cbz	r0, 8006e74 <_vfiprintf_r+0x18>
 8006e6c:	6983      	ldr	r3, [r0, #24]
 8006e6e:	b90b      	cbnz	r3, 8006e74 <_vfiprintf_r+0x18>
 8006e70:	f7ff fb8e 	bl	8006590 <__sinit>
 8006e74:	4b7c      	ldr	r3, [pc, #496]	; (8007068 <_vfiprintf_r+0x20c>)
 8006e76:	429c      	cmp	r4, r3
 8006e78:	d158      	bne.n	8006f2c <_vfiprintf_r+0xd0>
 8006e7a:	6874      	ldr	r4, [r6, #4]
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	0718      	lsls	r0, r3, #28
 8006e80:	d55e      	bpl.n	8006f40 <_vfiprintf_r+0xe4>
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d05b      	beq.n	8006f40 <_vfiprintf_r+0xe4>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8c:	2320      	movs	r3, #32
 8006e8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e92:	2330      	movs	r3, #48	; 0x30
 8006e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e98:	9503      	str	r5, [sp, #12]
 8006e9a:	f04f 0b01 	mov.w	fp, #1
 8006e9e:	46b8      	mov	r8, r7
 8006ea0:	4645      	mov	r5, r8
 8006ea2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ea6:	b10b      	cbz	r3, 8006eac <_vfiprintf_r+0x50>
 8006ea8:	2b25      	cmp	r3, #37	; 0x25
 8006eaa:	d154      	bne.n	8006f56 <_vfiprintf_r+0xfa>
 8006eac:	ebb8 0a07 	subs.w	sl, r8, r7
 8006eb0:	d00b      	beq.n	8006eca <_vfiprintf_r+0x6e>
 8006eb2:	4653      	mov	r3, sl
 8006eb4:	463a      	mov	r2, r7
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7ff ffbc 	bl	8006e36 <__sfputs_r>
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	f000 80c2 	beq.w	8007048 <_vfiprintf_r+0x1ec>
 8006ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec6:	4453      	add	r3, sl
 8006ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eca:	f898 3000 	ldrb.w	r3, [r8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 80ba 	beq.w	8007048 <_vfiprintf_r+0x1ec>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ede:	9304      	str	r3, [sp, #16]
 8006ee0:	9307      	str	r3, [sp, #28]
 8006ee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ee8:	46a8      	mov	r8, r5
 8006eea:	2205      	movs	r2, #5
 8006eec:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006ef0:	485e      	ldr	r0, [pc, #376]	; (800706c <_vfiprintf_r+0x210>)
 8006ef2:	f7f9 f9ad 	bl	8000250 <memchr>
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	bb78      	cbnz	r0, 8006f5a <_vfiprintf_r+0xfe>
 8006efa:	06d9      	lsls	r1, r3, #27
 8006efc:	bf44      	itt	mi
 8006efe:	2220      	movmi	r2, #32
 8006f00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f04:	071a      	lsls	r2, r3, #28
 8006f06:	bf44      	itt	mi
 8006f08:	222b      	movmi	r2, #43	; 0x2b
 8006f0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f0e:	782a      	ldrb	r2, [r5, #0]
 8006f10:	2a2a      	cmp	r2, #42	; 0x2a
 8006f12:	d02a      	beq.n	8006f6a <_vfiprintf_r+0x10e>
 8006f14:	9a07      	ldr	r2, [sp, #28]
 8006f16:	46a8      	mov	r8, r5
 8006f18:	2000      	movs	r0, #0
 8006f1a:	250a      	movs	r5, #10
 8006f1c:	4641      	mov	r1, r8
 8006f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f22:	3b30      	subs	r3, #48	; 0x30
 8006f24:	2b09      	cmp	r3, #9
 8006f26:	d969      	bls.n	8006ffc <_vfiprintf_r+0x1a0>
 8006f28:	b360      	cbz	r0, 8006f84 <_vfiprintf_r+0x128>
 8006f2a:	e024      	b.n	8006f76 <_vfiprintf_r+0x11a>
 8006f2c:	4b50      	ldr	r3, [pc, #320]	; (8007070 <_vfiprintf_r+0x214>)
 8006f2e:	429c      	cmp	r4, r3
 8006f30:	d101      	bne.n	8006f36 <_vfiprintf_r+0xda>
 8006f32:	68b4      	ldr	r4, [r6, #8]
 8006f34:	e7a2      	b.n	8006e7c <_vfiprintf_r+0x20>
 8006f36:	4b4f      	ldr	r3, [pc, #316]	; (8007074 <_vfiprintf_r+0x218>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	bf08      	it	eq
 8006f3c:	68f4      	ldreq	r4, [r6, #12]
 8006f3e:	e79d      	b.n	8006e7c <_vfiprintf_r+0x20>
 8006f40:	4621      	mov	r1, r4
 8006f42:	4630      	mov	r0, r6
 8006f44:	f000 f958 	bl	80071f8 <__swsetup_r>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d09d      	beq.n	8006e88 <_vfiprintf_r+0x2c>
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f50:	b01d      	add	sp, #116	; 0x74
 8006f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f56:	46a8      	mov	r8, r5
 8006f58:	e7a2      	b.n	8006ea0 <_vfiprintf_r+0x44>
 8006f5a:	4a44      	ldr	r2, [pc, #272]	; (800706c <_vfiprintf_r+0x210>)
 8006f5c:	1a80      	subs	r0, r0, r2
 8006f5e:	fa0b f000 	lsl.w	r0, fp, r0
 8006f62:	4318      	orrs	r0, r3
 8006f64:	9004      	str	r0, [sp, #16]
 8006f66:	4645      	mov	r5, r8
 8006f68:	e7be      	b.n	8006ee8 <_vfiprintf_r+0x8c>
 8006f6a:	9a03      	ldr	r2, [sp, #12]
 8006f6c:	1d11      	adds	r1, r2, #4
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	9103      	str	r1, [sp, #12]
 8006f72:	2a00      	cmp	r2, #0
 8006f74:	db01      	blt.n	8006f7a <_vfiprintf_r+0x11e>
 8006f76:	9207      	str	r2, [sp, #28]
 8006f78:	e004      	b.n	8006f84 <_vfiprintf_r+0x128>
 8006f7a:	4252      	negs	r2, r2
 8006f7c:	f043 0302 	orr.w	r3, r3, #2
 8006f80:	9207      	str	r2, [sp, #28]
 8006f82:	9304      	str	r3, [sp, #16]
 8006f84:	f898 3000 	ldrb.w	r3, [r8]
 8006f88:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8a:	d10e      	bne.n	8006faa <_vfiprintf_r+0x14e>
 8006f8c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006f90:	2b2a      	cmp	r3, #42	; 0x2a
 8006f92:	d138      	bne.n	8007006 <_vfiprintf_r+0x1aa>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	1d1a      	adds	r2, r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	9203      	str	r2, [sp, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bfb8      	it	lt
 8006fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa4:	f108 0802 	add.w	r8, r8, #2
 8006fa8:	9305      	str	r3, [sp, #20]
 8006faa:	4d33      	ldr	r5, [pc, #204]	; (8007078 <_vfiprintf_r+0x21c>)
 8006fac:	f898 1000 	ldrb.w	r1, [r8]
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7f9 f94c 	bl	8000250 <memchr>
 8006fb8:	b140      	cbz	r0, 8006fcc <_vfiprintf_r+0x170>
 8006fba:	2340      	movs	r3, #64	; 0x40
 8006fbc:	1b40      	subs	r0, r0, r5
 8006fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	4303      	orrs	r3, r0
 8006fc6:	f108 0801 	add.w	r8, r8, #1
 8006fca:	9304      	str	r3, [sp, #16]
 8006fcc:	f898 1000 	ldrb.w	r1, [r8]
 8006fd0:	482a      	ldr	r0, [pc, #168]	; (800707c <_vfiprintf_r+0x220>)
 8006fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd6:	2206      	movs	r2, #6
 8006fd8:	f108 0701 	add.w	r7, r8, #1
 8006fdc:	f7f9 f938 	bl	8000250 <memchr>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d037      	beq.n	8007054 <_vfiprintf_r+0x1f8>
 8006fe4:	4b26      	ldr	r3, [pc, #152]	; (8007080 <_vfiprintf_r+0x224>)
 8006fe6:	bb1b      	cbnz	r3, 8007030 <_vfiprintf_r+0x1d4>
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	3307      	adds	r3, #7
 8006fec:	f023 0307 	bic.w	r3, r3, #7
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	9303      	str	r3, [sp, #12]
 8006ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff6:	444b      	add	r3, r9
 8006ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffa:	e750      	b.n	8006e9e <_vfiprintf_r+0x42>
 8006ffc:	fb05 3202 	mla	r2, r5, r2, r3
 8007000:	2001      	movs	r0, #1
 8007002:	4688      	mov	r8, r1
 8007004:	e78a      	b.n	8006f1c <_vfiprintf_r+0xc0>
 8007006:	2300      	movs	r3, #0
 8007008:	f108 0801 	add.w	r8, r8, #1
 800700c:	9305      	str	r3, [sp, #20]
 800700e:	4619      	mov	r1, r3
 8007010:	250a      	movs	r5, #10
 8007012:	4640      	mov	r0, r8
 8007014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007018:	3a30      	subs	r2, #48	; 0x30
 800701a:	2a09      	cmp	r2, #9
 800701c:	d903      	bls.n	8007026 <_vfiprintf_r+0x1ca>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0c3      	beq.n	8006faa <_vfiprintf_r+0x14e>
 8007022:	9105      	str	r1, [sp, #20]
 8007024:	e7c1      	b.n	8006faa <_vfiprintf_r+0x14e>
 8007026:	fb05 2101 	mla	r1, r5, r1, r2
 800702a:	2301      	movs	r3, #1
 800702c:	4680      	mov	r8, r0
 800702e:	e7f0      	b.n	8007012 <_vfiprintf_r+0x1b6>
 8007030:	ab03      	add	r3, sp, #12
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	4622      	mov	r2, r4
 8007036:	4b13      	ldr	r3, [pc, #76]	; (8007084 <_vfiprintf_r+0x228>)
 8007038:	a904      	add	r1, sp, #16
 800703a:	4630      	mov	r0, r6
 800703c:	f7fe f8c4 	bl	80051c8 <_printf_float>
 8007040:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007044:	4681      	mov	r9, r0
 8007046:	d1d5      	bne.n	8006ff4 <_vfiprintf_r+0x198>
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	065b      	lsls	r3, r3, #25
 800704c:	f53f af7e 	bmi.w	8006f4c <_vfiprintf_r+0xf0>
 8007050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007052:	e77d      	b.n	8006f50 <_vfiprintf_r+0xf4>
 8007054:	ab03      	add	r3, sp, #12
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4622      	mov	r2, r4
 800705a:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <_vfiprintf_r+0x228>)
 800705c:	a904      	add	r1, sp, #16
 800705e:	4630      	mov	r0, r6
 8007060:	f7fe fb54 	bl	800570c <_printf_i>
 8007064:	e7ec      	b.n	8007040 <_vfiprintf_r+0x1e4>
 8007066:	bf00      	nop
 8007068:	080076a4 	.word	0x080076a4
 800706c:	080077e4 	.word	0x080077e4
 8007070:	080076c4 	.word	0x080076c4
 8007074:	08007684 	.word	0x08007684
 8007078:	080077ea 	.word	0x080077ea
 800707c:	080077ee 	.word	0x080077ee
 8007080:	080051c9 	.word	0x080051c9
 8007084:	08006e37 	.word	0x08006e37

08007088 <_sbrk_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4c06      	ldr	r4, [pc, #24]	; (80070a4 <_sbrk_r+0x1c>)
 800708c:	2300      	movs	r3, #0
 800708e:	4605      	mov	r5, r0
 8007090:	4608      	mov	r0, r1
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	f7fa f854 	bl	8001140 <_sbrk>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_sbrk_r+0x1a>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_sbrk_r+0x1a>
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20000784 	.word	0x20000784

080070a8 <__sread>:
 80070a8:	b510      	push	{r4, lr}
 80070aa:	460c      	mov	r4, r1
 80070ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b0:	f000 fa5a 	bl	8007568 <_read_r>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	bfab      	itete	ge
 80070b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070ba:	89a3      	ldrhlt	r3, [r4, #12]
 80070bc:	181b      	addge	r3, r3, r0
 80070be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070c2:	bfac      	ite	ge
 80070c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80070c6:	81a3      	strhlt	r3, [r4, #12]
 80070c8:	bd10      	pop	{r4, pc}

080070ca <__swrite>:
 80070ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ce:	461f      	mov	r7, r3
 80070d0:	898b      	ldrh	r3, [r1, #12]
 80070d2:	05db      	lsls	r3, r3, #23
 80070d4:	4605      	mov	r5, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	4616      	mov	r6, r2
 80070da:	d505      	bpl.n	80070e8 <__swrite+0x1e>
 80070dc:	2302      	movs	r3, #2
 80070de:	2200      	movs	r2, #0
 80070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e4:	f000 f9b6 	bl	8007454 <_lseek_r>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	4632      	mov	r2, r6
 80070f6:	463b      	mov	r3, r7
 80070f8:	4628      	mov	r0, r5
 80070fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070fe:	f000 b869 	b.w	80071d4 <_write_r>

08007102 <__sseek>:
 8007102:	b510      	push	{r4, lr}
 8007104:	460c      	mov	r4, r1
 8007106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710a:	f000 f9a3 	bl	8007454 <_lseek_r>
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	bf15      	itete	ne
 8007114:	6560      	strne	r0, [r4, #84]	; 0x54
 8007116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800711a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800711e:	81a3      	strheq	r3, [r4, #12]
 8007120:	bf18      	it	ne
 8007122:	81a3      	strhne	r3, [r4, #12]
 8007124:	bd10      	pop	{r4, pc}

08007126 <__sclose>:
 8007126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800712a:	f000 b8d3 	b.w	80072d4 <_close_r>
	...

08007130 <__swbuf_r>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	460e      	mov	r6, r1
 8007134:	4614      	mov	r4, r2
 8007136:	4605      	mov	r5, r0
 8007138:	b118      	cbz	r0, 8007142 <__swbuf_r+0x12>
 800713a:	6983      	ldr	r3, [r0, #24]
 800713c:	b90b      	cbnz	r3, 8007142 <__swbuf_r+0x12>
 800713e:	f7ff fa27 	bl	8006590 <__sinit>
 8007142:	4b21      	ldr	r3, [pc, #132]	; (80071c8 <__swbuf_r+0x98>)
 8007144:	429c      	cmp	r4, r3
 8007146:	d12a      	bne.n	800719e <__swbuf_r+0x6e>
 8007148:	686c      	ldr	r4, [r5, #4]
 800714a:	69a3      	ldr	r3, [r4, #24]
 800714c:	60a3      	str	r3, [r4, #8]
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	071a      	lsls	r2, r3, #28
 8007152:	d52e      	bpl.n	80071b2 <__swbuf_r+0x82>
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	b363      	cbz	r3, 80071b2 <__swbuf_r+0x82>
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	6820      	ldr	r0, [r4, #0]
 800715c:	1ac0      	subs	r0, r0, r3
 800715e:	6963      	ldr	r3, [r4, #20]
 8007160:	b2f6      	uxtb	r6, r6
 8007162:	4283      	cmp	r3, r0
 8007164:	4637      	mov	r7, r6
 8007166:	dc04      	bgt.n	8007172 <__swbuf_r+0x42>
 8007168:	4621      	mov	r1, r4
 800716a:	4628      	mov	r0, r5
 800716c:	f000 f948 	bl	8007400 <_fflush_r>
 8007170:	bb28      	cbnz	r0, 80071be <__swbuf_r+0x8e>
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	3b01      	subs	r3, #1
 8007176:	60a3      	str	r3, [r4, #8]
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	6022      	str	r2, [r4, #0]
 800717e:	701e      	strb	r6, [r3, #0]
 8007180:	6963      	ldr	r3, [r4, #20]
 8007182:	3001      	adds	r0, #1
 8007184:	4283      	cmp	r3, r0
 8007186:	d004      	beq.n	8007192 <__swbuf_r+0x62>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	07db      	lsls	r3, r3, #31
 800718c:	d519      	bpl.n	80071c2 <__swbuf_r+0x92>
 800718e:	2e0a      	cmp	r6, #10
 8007190:	d117      	bne.n	80071c2 <__swbuf_r+0x92>
 8007192:	4621      	mov	r1, r4
 8007194:	4628      	mov	r0, r5
 8007196:	f000 f933 	bl	8007400 <_fflush_r>
 800719a:	b190      	cbz	r0, 80071c2 <__swbuf_r+0x92>
 800719c:	e00f      	b.n	80071be <__swbuf_r+0x8e>
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <__swbuf_r+0x9c>)
 80071a0:	429c      	cmp	r4, r3
 80071a2:	d101      	bne.n	80071a8 <__swbuf_r+0x78>
 80071a4:	68ac      	ldr	r4, [r5, #8]
 80071a6:	e7d0      	b.n	800714a <__swbuf_r+0x1a>
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <__swbuf_r+0xa0>)
 80071aa:	429c      	cmp	r4, r3
 80071ac:	bf08      	it	eq
 80071ae:	68ec      	ldreq	r4, [r5, #12]
 80071b0:	e7cb      	b.n	800714a <__swbuf_r+0x1a>
 80071b2:	4621      	mov	r1, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 f81f 	bl	80071f8 <__swsetup_r>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d0cc      	beq.n	8007158 <__swbuf_r+0x28>
 80071be:	f04f 37ff 	mov.w	r7, #4294967295
 80071c2:	4638      	mov	r0, r7
 80071c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c6:	bf00      	nop
 80071c8:	080076a4 	.word	0x080076a4
 80071cc:	080076c4 	.word	0x080076c4
 80071d0:	08007684 	.word	0x08007684

080071d4 <_write_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4c07      	ldr	r4, [pc, #28]	; (80071f4 <_write_r+0x20>)
 80071d8:	4605      	mov	r5, r0
 80071da:	4608      	mov	r0, r1
 80071dc:	4611      	mov	r1, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	6022      	str	r2, [r4, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f7f9 ff5b 	bl	800109e <_write>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_write_r+0x1e>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_write_r+0x1e>
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	20000784 	.word	0x20000784

080071f8 <__swsetup_r>:
 80071f8:	4b32      	ldr	r3, [pc, #200]	; (80072c4 <__swsetup_r+0xcc>)
 80071fa:	b570      	push	{r4, r5, r6, lr}
 80071fc:	681d      	ldr	r5, [r3, #0]
 80071fe:	4606      	mov	r6, r0
 8007200:	460c      	mov	r4, r1
 8007202:	b125      	cbz	r5, 800720e <__swsetup_r+0x16>
 8007204:	69ab      	ldr	r3, [r5, #24]
 8007206:	b913      	cbnz	r3, 800720e <__swsetup_r+0x16>
 8007208:	4628      	mov	r0, r5
 800720a:	f7ff f9c1 	bl	8006590 <__sinit>
 800720e:	4b2e      	ldr	r3, [pc, #184]	; (80072c8 <__swsetup_r+0xd0>)
 8007210:	429c      	cmp	r4, r3
 8007212:	d10f      	bne.n	8007234 <__swsetup_r+0x3c>
 8007214:	686c      	ldr	r4, [r5, #4]
 8007216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721a:	b29a      	uxth	r2, r3
 800721c:	0715      	lsls	r5, r2, #28
 800721e:	d42c      	bmi.n	800727a <__swsetup_r+0x82>
 8007220:	06d0      	lsls	r0, r2, #27
 8007222:	d411      	bmi.n	8007248 <__swsetup_r+0x50>
 8007224:	2209      	movs	r2, #9
 8007226:	6032      	str	r2, [r6, #0]
 8007228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	f04f 30ff 	mov.w	r0, #4294967295
 8007232:	e03e      	b.n	80072b2 <__swsetup_r+0xba>
 8007234:	4b25      	ldr	r3, [pc, #148]	; (80072cc <__swsetup_r+0xd4>)
 8007236:	429c      	cmp	r4, r3
 8007238:	d101      	bne.n	800723e <__swsetup_r+0x46>
 800723a:	68ac      	ldr	r4, [r5, #8]
 800723c:	e7eb      	b.n	8007216 <__swsetup_r+0x1e>
 800723e:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <__swsetup_r+0xd8>)
 8007240:	429c      	cmp	r4, r3
 8007242:	bf08      	it	eq
 8007244:	68ec      	ldreq	r4, [r5, #12]
 8007246:	e7e6      	b.n	8007216 <__swsetup_r+0x1e>
 8007248:	0751      	lsls	r1, r2, #29
 800724a:	d512      	bpl.n	8007272 <__swsetup_r+0x7a>
 800724c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800724e:	b141      	cbz	r1, 8007262 <__swsetup_r+0x6a>
 8007250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007254:	4299      	cmp	r1, r3
 8007256:	d002      	beq.n	800725e <__swsetup_r+0x66>
 8007258:	4630      	mov	r0, r6
 800725a:	f7ff fd2d 	bl	8006cb8 <_free_r>
 800725e:	2300      	movs	r3, #0
 8007260:	6363      	str	r3, [r4, #52]	; 0x34
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	2300      	movs	r3, #0
 800726c:	6063      	str	r3, [r4, #4]
 800726e:	6923      	ldr	r3, [r4, #16]
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	f043 0308 	orr.w	r3, r3, #8
 8007278:	81a3      	strh	r3, [r4, #12]
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	b94b      	cbnz	r3, 8007292 <__swsetup_r+0x9a>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007288:	d003      	beq.n	8007292 <__swsetup_r+0x9a>
 800728a:	4621      	mov	r1, r4
 800728c:	4630      	mov	r0, r6
 800728e:	f000 f917 	bl	80074c0 <__smakebuf_r>
 8007292:	89a2      	ldrh	r2, [r4, #12]
 8007294:	f012 0301 	ands.w	r3, r2, #1
 8007298:	d00c      	beq.n	80072b4 <__swsetup_r+0xbc>
 800729a:	2300      	movs	r3, #0
 800729c:	60a3      	str	r3, [r4, #8]
 800729e:	6963      	ldr	r3, [r4, #20]
 80072a0:	425b      	negs	r3, r3
 80072a2:	61a3      	str	r3, [r4, #24]
 80072a4:	6923      	ldr	r3, [r4, #16]
 80072a6:	b953      	cbnz	r3, 80072be <__swsetup_r+0xc6>
 80072a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80072b0:	d1ba      	bne.n	8007228 <__swsetup_r+0x30>
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	0792      	lsls	r2, r2, #30
 80072b6:	bf58      	it	pl
 80072b8:	6963      	ldrpl	r3, [r4, #20]
 80072ba:	60a3      	str	r3, [r4, #8]
 80072bc:	e7f2      	b.n	80072a4 <__swsetup_r+0xac>
 80072be:	2000      	movs	r0, #0
 80072c0:	e7f7      	b.n	80072b2 <__swsetup_r+0xba>
 80072c2:	bf00      	nop
 80072c4:	2000000c 	.word	0x2000000c
 80072c8:	080076a4 	.word	0x080076a4
 80072cc:	080076c4 	.word	0x080076c4
 80072d0:	08007684 	.word	0x08007684

080072d4 <_close_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4c06      	ldr	r4, [pc, #24]	; (80072f0 <_close_r+0x1c>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4605      	mov	r5, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	6023      	str	r3, [r4, #0]
 80072e0:	f7f9 fef9 	bl	80010d6 <_close>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_close_r+0x1a>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_close_r+0x1a>
 80072ec:	602b      	str	r3, [r5, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	20000784 	.word	0x20000784

080072f4 <__sflush_r>:
 80072f4:	898a      	ldrh	r2, [r1, #12]
 80072f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fa:	4605      	mov	r5, r0
 80072fc:	0710      	lsls	r0, r2, #28
 80072fe:	460c      	mov	r4, r1
 8007300:	d458      	bmi.n	80073b4 <__sflush_r+0xc0>
 8007302:	684b      	ldr	r3, [r1, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	dc05      	bgt.n	8007314 <__sflush_r+0x20>
 8007308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	dc02      	bgt.n	8007314 <__sflush_r+0x20>
 800730e:	2000      	movs	r0, #0
 8007310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007316:	2e00      	cmp	r6, #0
 8007318:	d0f9      	beq.n	800730e <__sflush_r+0x1a>
 800731a:	2300      	movs	r3, #0
 800731c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007320:	682f      	ldr	r7, [r5, #0]
 8007322:	6a21      	ldr	r1, [r4, #32]
 8007324:	602b      	str	r3, [r5, #0]
 8007326:	d032      	beq.n	800738e <__sflush_r+0x9a>
 8007328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	075a      	lsls	r2, r3, #29
 800732e:	d505      	bpl.n	800733c <__sflush_r+0x48>
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	1ac0      	subs	r0, r0, r3
 8007334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007336:	b10b      	cbz	r3, 800733c <__sflush_r+0x48>
 8007338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800733a:	1ac0      	subs	r0, r0, r3
 800733c:	2300      	movs	r3, #0
 800733e:	4602      	mov	r2, r0
 8007340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007342:	6a21      	ldr	r1, [r4, #32]
 8007344:	4628      	mov	r0, r5
 8007346:	47b0      	blx	r6
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	d106      	bne.n	800735c <__sflush_r+0x68>
 800734e:	6829      	ldr	r1, [r5, #0]
 8007350:	291d      	cmp	r1, #29
 8007352:	d848      	bhi.n	80073e6 <__sflush_r+0xf2>
 8007354:	4a29      	ldr	r2, [pc, #164]	; (80073fc <__sflush_r+0x108>)
 8007356:	40ca      	lsrs	r2, r1
 8007358:	07d6      	lsls	r6, r2, #31
 800735a:	d544      	bpl.n	80073e6 <__sflush_r+0xf2>
 800735c:	2200      	movs	r2, #0
 800735e:	6062      	str	r2, [r4, #4]
 8007360:	04d9      	lsls	r1, r3, #19
 8007362:	6922      	ldr	r2, [r4, #16]
 8007364:	6022      	str	r2, [r4, #0]
 8007366:	d504      	bpl.n	8007372 <__sflush_r+0x7e>
 8007368:	1c42      	adds	r2, r0, #1
 800736a:	d101      	bne.n	8007370 <__sflush_r+0x7c>
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	b903      	cbnz	r3, 8007372 <__sflush_r+0x7e>
 8007370:	6560      	str	r0, [r4, #84]	; 0x54
 8007372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007374:	602f      	str	r7, [r5, #0]
 8007376:	2900      	cmp	r1, #0
 8007378:	d0c9      	beq.n	800730e <__sflush_r+0x1a>
 800737a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800737e:	4299      	cmp	r1, r3
 8007380:	d002      	beq.n	8007388 <__sflush_r+0x94>
 8007382:	4628      	mov	r0, r5
 8007384:	f7ff fc98 	bl	8006cb8 <_free_r>
 8007388:	2000      	movs	r0, #0
 800738a:	6360      	str	r0, [r4, #52]	; 0x34
 800738c:	e7c0      	b.n	8007310 <__sflush_r+0x1c>
 800738e:	2301      	movs	r3, #1
 8007390:	4628      	mov	r0, r5
 8007392:	47b0      	blx	r6
 8007394:	1c41      	adds	r1, r0, #1
 8007396:	d1c8      	bne.n	800732a <__sflush_r+0x36>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0c5      	beq.n	800732a <__sflush_r+0x36>
 800739e:	2b1d      	cmp	r3, #29
 80073a0:	d001      	beq.n	80073a6 <__sflush_r+0xb2>
 80073a2:	2b16      	cmp	r3, #22
 80073a4:	d101      	bne.n	80073aa <__sflush_r+0xb6>
 80073a6:	602f      	str	r7, [r5, #0]
 80073a8:	e7b1      	b.n	800730e <__sflush_r+0x1a>
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	e7ad      	b.n	8007310 <__sflush_r+0x1c>
 80073b4:	690f      	ldr	r7, [r1, #16]
 80073b6:	2f00      	cmp	r7, #0
 80073b8:	d0a9      	beq.n	800730e <__sflush_r+0x1a>
 80073ba:	0793      	lsls	r3, r2, #30
 80073bc:	680e      	ldr	r6, [r1, #0]
 80073be:	bf08      	it	eq
 80073c0:	694b      	ldreq	r3, [r1, #20]
 80073c2:	600f      	str	r7, [r1, #0]
 80073c4:	bf18      	it	ne
 80073c6:	2300      	movne	r3, #0
 80073c8:	eba6 0807 	sub.w	r8, r6, r7
 80073cc:	608b      	str	r3, [r1, #8]
 80073ce:	f1b8 0f00 	cmp.w	r8, #0
 80073d2:	dd9c      	ble.n	800730e <__sflush_r+0x1a>
 80073d4:	4643      	mov	r3, r8
 80073d6:	463a      	mov	r2, r7
 80073d8:	6a21      	ldr	r1, [r4, #32]
 80073da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073dc:	4628      	mov	r0, r5
 80073de:	47b0      	blx	r6
 80073e0:	2800      	cmp	r0, #0
 80073e2:	dc06      	bgt.n	80073f2 <__sflush_r+0xfe>
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ea:	81a3      	strh	r3, [r4, #12]
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	e78e      	b.n	8007310 <__sflush_r+0x1c>
 80073f2:	4407      	add	r7, r0
 80073f4:	eba8 0800 	sub.w	r8, r8, r0
 80073f8:	e7e9      	b.n	80073ce <__sflush_r+0xda>
 80073fa:	bf00      	nop
 80073fc:	20400001 	.word	0x20400001

08007400 <_fflush_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	690b      	ldr	r3, [r1, #16]
 8007404:	4605      	mov	r5, r0
 8007406:	460c      	mov	r4, r1
 8007408:	b1db      	cbz	r3, 8007442 <_fflush_r+0x42>
 800740a:	b118      	cbz	r0, 8007414 <_fflush_r+0x14>
 800740c:	6983      	ldr	r3, [r0, #24]
 800740e:	b90b      	cbnz	r3, 8007414 <_fflush_r+0x14>
 8007410:	f7ff f8be 	bl	8006590 <__sinit>
 8007414:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <_fflush_r+0x48>)
 8007416:	429c      	cmp	r4, r3
 8007418:	d109      	bne.n	800742e <_fflush_r+0x2e>
 800741a:	686c      	ldr	r4, [r5, #4]
 800741c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007420:	b17b      	cbz	r3, 8007442 <_fflush_r+0x42>
 8007422:	4621      	mov	r1, r4
 8007424:	4628      	mov	r0, r5
 8007426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800742a:	f7ff bf63 	b.w	80072f4 <__sflush_r>
 800742e:	4b07      	ldr	r3, [pc, #28]	; (800744c <_fflush_r+0x4c>)
 8007430:	429c      	cmp	r4, r3
 8007432:	d101      	bne.n	8007438 <_fflush_r+0x38>
 8007434:	68ac      	ldr	r4, [r5, #8]
 8007436:	e7f1      	b.n	800741c <_fflush_r+0x1c>
 8007438:	4b05      	ldr	r3, [pc, #20]	; (8007450 <_fflush_r+0x50>)
 800743a:	429c      	cmp	r4, r3
 800743c:	bf08      	it	eq
 800743e:	68ec      	ldreq	r4, [r5, #12]
 8007440:	e7ec      	b.n	800741c <_fflush_r+0x1c>
 8007442:	2000      	movs	r0, #0
 8007444:	bd38      	pop	{r3, r4, r5, pc}
 8007446:	bf00      	nop
 8007448:	080076a4 	.word	0x080076a4
 800744c:	080076c4 	.word	0x080076c4
 8007450:	08007684 	.word	0x08007684

08007454 <_lseek_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4c07      	ldr	r4, [pc, #28]	; (8007474 <_lseek_r+0x20>)
 8007458:	4605      	mov	r5, r0
 800745a:	4608      	mov	r0, r1
 800745c:	4611      	mov	r1, r2
 800745e:	2200      	movs	r2, #0
 8007460:	6022      	str	r2, [r4, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	f7f9 fe5e 	bl	8001124 <_lseek>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_lseek_r+0x1e>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	b103      	cbz	r3, 8007472 <_lseek_r+0x1e>
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20000784 	.word	0x20000784

08007478 <__swhatbuf_r>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	460e      	mov	r6, r1
 800747c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007480:	2900      	cmp	r1, #0
 8007482:	b096      	sub	sp, #88	; 0x58
 8007484:	4614      	mov	r4, r2
 8007486:	461d      	mov	r5, r3
 8007488:	da07      	bge.n	800749a <__swhatbuf_r+0x22>
 800748a:	2300      	movs	r3, #0
 800748c:	602b      	str	r3, [r5, #0]
 800748e:	89b3      	ldrh	r3, [r6, #12]
 8007490:	061a      	lsls	r2, r3, #24
 8007492:	d410      	bmi.n	80074b6 <__swhatbuf_r+0x3e>
 8007494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007498:	e00e      	b.n	80074b8 <__swhatbuf_r+0x40>
 800749a:	466a      	mov	r2, sp
 800749c:	f000 f884 	bl	80075a8 <_fstat_r>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	dbf2      	blt.n	800748a <__swhatbuf_r+0x12>
 80074a4:	9a01      	ldr	r2, [sp, #4]
 80074a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074ae:	425a      	negs	r2, r3
 80074b0:	415a      	adcs	r2, r3
 80074b2:	602a      	str	r2, [r5, #0]
 80074b4:	e7ee      	b.n	8007494 <__swhatbuf_r+0x1c>
 80074b6:	2340      	movs	r3, #64	; 0x40
 80074b8:	2000      	movs	r0, #0
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	b016      	add	sp, #88	; 0x58
 80074be:	bd70      	pop	{r4, r5, r6, pc}

080074c0 <__smakebuf_r>:
 80074c0:	898b      	ldrh	r3, [r1, #12]
 80074c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074c4:	079d      	lsls	r5, r3, #30
 80074c6:	4606      	mov	r6, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	d507      	bpl.n	80074dc <__smakebuf_r+0x1c>
 80074cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	6123      	str	r3, [r4, #16]
 80074d4:	2301      	movs	r3, #1
 80074d6:	6163      	str	r3, [r4, #20]
 80074d8:	b002      	add	sp, #8
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	ab01      	add	r3, sp, #4
 80074de:	466a      	mov	r2, sp
 80074e0:	f7ff ffca 	bl	8007478 <__swhatbuf_r>
 80074e4:	9900      	ldr	r1, [sp, #0]
 80074e6:	4605      	mov	r5, r0
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7ff fc33 	bl	8006d54 <_malloc_r>
 80074ee:	b948      	cbnz	r0, 8007504 <__smakebuf_r+0x44>
 80074f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f4:	059a      	lsls	r2, r3, #22
 80074f6:	d4ef      	bmi.n	80074d8 <__smakebuf_r+0x18>
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	f043 0302 	orr.w	r3, r3, #2
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	e7e3      	b.n	80074cc <__smakebuf_r+0xc>
 8007504:	4b0d      	ldr	r3, [pc, #52]	; (800753c <__smakebuf_r+0x7c>)
 8007506:	62b3      	str	r3, [r6, #40]	; 0x28
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	6020      	str	r0, [r4, #0]
 800750c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	9b00      	ldr	r3, [sp, #0]
 8007514:	6163      	str	r3, [r4, #20]
 8007516:	9b01      	ldr	r3, [sp, #4]
 8007518:	6120      	str	r0, [r4, #16]
 800751a:	b15b      	cbz	r3, 8007534 <__smakebuf_r+0x74>
 800751c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007520:	4630      	mov	r0, r6
 8007522:	f000 f853 	bl	80075cc <_isatty_r>
 8007526:	b128      	cbz	r0, 8007534 <__smakebuf_r+0x74>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	f023 0303 	bic.w	r3, r3, #3
 800752e:	f043 0301 	orr.w	r3, r3, #1
 8007532:	81a3      	strh	r3, [r4, #12]
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	431d      	orrs	r5, r3
 8007538:	81a5      	strh	r5, [r4, #12]
 800753a:	e7cd      	b.n	80074d8 <__smakebuf_r+0x18>
 800753c:	08006559 	.word	0x08006559

08007540 <__ascii_mbtowc>:
 8007540:	b082      	sub	sp, #8
 8007542:	b901      	cbnz	r1, 8007546 <__ascii_mbtowc+0x6>
 8007544:	a901      	add	r1, sp, #4
 8007546:	b142      	cbz	r2, 800755a <__ascii_mbtowc+0x1a>
 8007548:	b14b      	cbz	r3, 800755e <__ascii_mbtowc+0x1e>
 800754a:	7813      	ldrb	r3, [r2, #0]
 800754c:	600b      	str	r3, [r1, #0]
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	1c10      	adds	r0, r2, #0
 8007552:	bf18      	it	ne
 8007554:	2001      	movne	r0, #1
 8007556:	b002      	add	sp, #8
 8007558:	4770      	bx	lr
 800755a:	4610      	mov	r0, r2
 800755c:	e7fb      	b.n	8007556 <__ascii_mbtowc+0x16>
 800755e:	f06f 0001 	mvn.w	r0, #1
 8007562:	e7f8      	b.n	8007556 <__ascii_mbtowc+0x16>

08007564 <__malloc_lock>:
 8007564:	4770      	bx	lr

08007566 <__malloc_unlock>:
 8007566:	4770      	bx	lr

08007568 <_read_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4c07      	ldr	r4, [pc, #28]	; (8007588 <_read_r+0x20>)
 800756c:	4605      	mov	r5, r0
 800756e:	4608      	mov	r0, r1
 8007570:	4611      	mov	r1, r2
 8007572:	2200      	movs	r2, #0
 8007574:	6022      	str	r2, [r4, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	f7f9 fd74 	bl	8001064 <_read>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_read_r+0x1e>
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	b103      	cbz	r3, 8007586 <_read_r+0x1e>
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	20000784 	.word	0x20000784

0800758c <__ascii_wctomb>:
 800758c:	b149      	cbz	r1, 80075a2 <__ascii_wctomb+0x16>
 800758e:	2aff      	cmp	r2, #255	; 0xff
 8007590:	bf85      	ittet	hi
 8007592:	238a      	movhi	r3, #138	; 0x8a
 8007594:	6003      	strhi	r3, [r0, #0]
 8007596:	700a      	strbls	r2, [r1, #0]
 8007598:	f04f 30ff 	movhi.w	r0, #4294967295
 800759c:	bf98      	it	ls
 800759e:	2001      	movls	r0, #1
 80075a0:	4770      	bx	lr
 80075a2:	4608      	mov	r0, r1
 80075a4:	4770      	bx	lr
	...

080075a8 <_fstat_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4c07      	ldr	r4, [pc, #28]	; (80075c8 <_fstat_r+0x20>)
 80075ac:	2300      	movs	r3, #0
 80075ae:	4605      	mov	r5, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	4611      	mov	r1, r2
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	f7f9 fd9a 	bl	80010ee <_fstat>
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	d102      	bne.n	80075c4 <_fstat_r+0x1c>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	b103      	cbz	r3, 80075c4 <_fstat_r+0x1c>
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
 80075c6:	bf00      	nop
 80075c8:	20000784 	.word	0x20000784

080075cc <_isatty_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4c06      	ldr	r4, [pc, #24]	; (80075e8 <_isatty_r+0x1c>)
 80075d0:	2300      	movs	r3, #0
 80075d2:	4605      	mov	r5, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	f7f9 fd99 	bl	800110e <_isatty>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_isatty_r+0x1a>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_isatty_r+0x1a>
 80075e4:	602b      	str	r3, [r5, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20000784 	.word	0x20000784

080075ec <_init>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	bf00      	nop
 80075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f2:	bc08      	pop	{r3}
 80075f4:	469e      	mov	lr, r3
 80075f6:	4770      	bx	lr

080075f8 <_fini>:
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	bf00      	nop
 80075fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fe:	bc08      	pop	{r3}
 8007600:	469e      	mov	lr, r3
 8007602:	4770      	bx	lr
