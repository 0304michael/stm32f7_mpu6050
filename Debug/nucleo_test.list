
nucleo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080067c8  080067c8  000167c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ac0  08006ac0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006ac0  08006ac0  00016ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ac8  08006ac8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac8  08006ac8  00016ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  200001e0  08006cac  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08006cac  00020788  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001245a  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000277b  00000000  00000000  00032664  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00034de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d78  00000000  00000000  00035ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029983  00000000  00000000  00036a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ccbf  00000000  00000000  0006039b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fec5e  00000000  00000000  0006d05a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016bcb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000487c  00000000  00000000  0016bd34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080067ac 	.word	0x080067ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080067ac 	.word	0x080067ac

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__io_putchar>:
#else
 #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1);
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	2301      	movs	r3, #1
 80005fc:	2201      	movs	r2, #1
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <__io_putchar+0x20>)
 8000600:	f002 febc 	bl	800337c <HAL_UART_Transmit>
 return ch;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000258 	.word	0x20000258

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fc7a 	bl	8000f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f833 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f925 	bl	8000870 <MX_GPIO_Init>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 8000626:	f000 f8c5 	bl	80007b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800062a:	f000 f8f3 	bl	8000814 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 800062e:	bf00      	nop
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <main+0x68>)
 8000632:	f000 f9e1 	bl	80009f8 <MPU6050_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d0f9      	beq.n	8000630 <main+0x1c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 800063c:	4910      	ldr	r1, [pc, #64]	; (8000680 <main+0x6c>)
 800063e:	480f      	ldr	r0, [pc, #60]	; (800067c <main+0x68>)
 8000640:	f000 fa32 	bl	8000aa8 <MPU6050_Read_Accel>
	ax=MPU6050.Ax;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <main+0x6c>)
 8000646:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800064a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	ay=MPU6050.Ay;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <main+0x6c>)
 8000650:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000654:	e9c7 3402 	strd	r3, r4, [r7, #8]
	az=MPU6050.Az;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <main+0x6c>)
 800065a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800065e:	e9c7 3400 	strd	r3, r4, [r7]
	printf("x: %.3f   y: %.3f   z: %3f\n",&ax,&ay,&az);
 8000662:	463b      	mov	r3, r7
 8000664:	f107 0208 	add.w	r2, r7, #8
 8000668:	f107 0110 	add.w	r1, r7, #16
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <main+0x70>)
 800066e:	f004 fa3f 	bl	8004af0 <iprintf>
	HAL_Delay(1000);
 8000672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000676:	f000 fca9 	bl	8000fcc <HAL_Delay>
  {
 800067a:	e7df      	b.n	800063c <main+0x28>
 800067c:	20000208 	.word	0x20000208
 8000680:	200006e0 	.word	0x200006e0
 8000684:	080067c8 	.word	0x080067c8

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0b8      	sub	sp, #224	; 0xe0
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000692:	2234      	movs	r2, #52	; 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fde8 	bl	800426c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2290      	movs	r2, #144	; 0x90
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fdd9 	bl	800426c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ba:	f001 fce5 	bl	8002088 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b3a      	ldr	r3, [pc, #232]	; (80007a8 <SystemClock_Config+0x120>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a39      	ldr	r2, [pc, #228]	; (80007a8 <SystemClock_Config+0x120>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <SystemClock_Config+0x120>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d6:	4b35      	ldr	r3, [pc, #212]	; (80007ac <SystemClock_Config+0x124>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006de:	4a33      	ldr	r2, [pc, #204]	; (80007ac <SystemClock_Config+0x124>)
 80006e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <SystemClock_Config+0x124>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800070e:	2304      	movs	r3, #4
 8000710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000714:	2360      	movs	r3, #96	; 0x60
 8000716:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fd0c 	bl	8002148 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000736:	f000 f95b 	bl	80009f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800073a:	f001 fcb5 	bl	80020a8 <HAL_PWREx_EnableOverDrive>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000744:	f000 f954 	bl	80009f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000768:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800076c:	2103      	movs	r1, #3
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ff98 	bl	80026a4 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800077a:	f000 f939 	bl	80009f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <SystemClock_Config+0x128>)
 8000780:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000782:	2300      	movs	r3, #0
 8000784:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000786:	2300      	movs	r3, #0
 8000788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	4618      	mov	r0, r3
 8000792:	f002 f97f 	bl	8002a94 <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x118>
  {
    Error_Handler();
 800079c:	f000 f928 	bl	80009f0 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	37e0      	adds	r7, #224	; 0xe0
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000
 80007b0:	00200100 	.word	0x00200100

080007b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_USART3_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART3_UART_Init+0x58>)
 80007f8:	f002 fd72 	bl	80032e0 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f8f5 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000258 	.word	0x20000258
 8000810:	40004800 	.word	0x40004800

08000814 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800081e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2206      	movs	r2, #6
 8000824:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2202      	movs	r2, #2
 800082a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2202      	movs	r2, #2
 8000836:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2201      	movs	r2, #1
 800083c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2201      	movs	r2, #1
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	f001 face 	bl	8001df8 <HAL_PCD_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000862:	f000 f8c5 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200002d8 	.word	0x200002d8

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b54      	ldr	r3, [pc, #336]	; (80009d8 <MX_GPIO_Init+0x168>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a53      	ldr	r2, [pc, #332]	; (80009d8 <MX_GPIO_Init+0x168>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <MX_GPIO_Init+0x168>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	4b4e      	ldr	r3, [pc, #312]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a4d      	ldr	r2, [pc, #308]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0320 	and.w	r3, r3, #32
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	4b48      	ldr	r3, [pc, #288]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a47      	ldr	r2, [pc, #284]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a41      	ldr	r2, [pc, #260]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a3b      	ldr	r2, [pc, #236]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <MX_GPIO_Init+0x168>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <MX_GPIO_Init+0x168>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a35      	ldr	r2, [pc, #212]	; (80009d8 <MX_GPIO_Init+0x168>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <MX_GPIO_Init+0x168>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <MX_GPIO_Init+0x168>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a2f      	ldr	r2, [pc, #188]	; (80009d8 <MX_GPIO_Init+0x168>)
 800091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_GPIO_Init+0x168>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f244 0181 	movw	r1, #16513	; 0x4081
 8000934:	4829      	ldr	r0, [pc, #164]	; (80009dc <MX_GPIO_Init+0x16c>)
 8000936:	f000 fdfb 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	4828      	ldr	r0, [pc, #160]	; (80009e0 <MX_GPIO_Init+0x170>)
 8000940:	f000 fdf6 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_GPIO_Init+0x174>)
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4823      	ldr	r0, [pc, #140]	; (80009e8 <MX_GPIO_Init+0x178>)
 800095a:	f000 fc3f 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800095e:	2303      	movs	r3, #3
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000962:	2312      	movs	r3, #18
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000966:	2301      	movs	r3, #1
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800096e:	2304      	movs	r3, #4
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_GPIO_Init+0x17c>)
 800097a:	f000 fc2f 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800097e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_GPIO_Init+0x16c>)
 8000998:	f000 fc20 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099c:	2340      	movs	r3, #64	; 0x40
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	480b      	ldr	r0, [pc, #44]	; (80009e0 <MX_GPIO_Init+0x170>)
 80009b4:	f000 fc12 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_GPIO_Init+0x170>)
 80009cc:	f000 fc06 	bl	80011dc <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3730      	adds	r7, #48	; 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800
 80009e4:	10110000 	.word	0x10110000
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40021400 	.word	0x40021400

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <Error_Handler+0x6>

080009f8 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af04      	add	r7, sp, #16
 80009fe:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000a00:	2364      	movs	r3, #100	; 0x64
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	f107 030f 	add.w	r3, r7, #15
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	2275      	movs	r2, #117	; 0x75
 8000a12:	21d0      	movs	r1, #208	; 0xd0
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 feb9 	bl	800178c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	2b68      	cmp	r3, #104	; 0x68
 8000a1e:	d13d      	bne.n	8000a9c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000a24:	2364      	movs	r3, #100	; 0x64
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	f107 030e 	add.w	r3, r7, #14
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2301      	movs	r3, #1
 8000a34:	226b      	movs	r2, #107	; 0x6b
 8000a36:	21d0      	movs	r1, #208	; 0xd0
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 fd93 	bl	8001564 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000a42:	2364      	movs	r3, #100	; 0x64
 8000a44:	9302      	str	r3, [sp, #8]
 8000a46:	2301      	movs	r3, #1
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	f107 030e 	add.w	r3, r7, #14
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	2219      	movs	r2, #25
 8000a54:	21d0      	movs	r1, #208	; 0xd0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 fd84 	bl	8001564 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000a60:	2364      	movs	r3, #100	; 0x64
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	2301      	movs	r3, #1
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	f107 030e 	add.w	r3, r7, #14
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	221c      	movs	r2, #28
 8000a72:	21d0      	movs	r1, #208	; 0xd0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 fd75 	bl	8001564 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000a7e:	2364      	movs	r3, #100	; 0x64
 8000a80:	9302      	str	r3, [sp, #8]
 8000a82:	2301      	movs	r3, #1
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	f107 030e 	add.w	r3, r7, #14
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	221b      	movs	r2, #27
 8000a90:	21d0      	movs	r1, #208	; 0xd0
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 fd66 	bl	8001564 <HAL_I2C_Mem_Write>
        return 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e000      	b.n	8000a9e <MPU6050_Init+0xa6>
    }
    return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af04      	add	r7, sp, #16
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8000ab2:	2364      	movs	r3, #100	; 0x64
 8000ab4:	9302      	str	r3, [sp, #8]
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	223b      	movs	r2, #59	; 0x3b
 8000ac4:	21d0      	movs	r1, #208	; 0xd0
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 fe60 	bl	800178c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000acc:	7a3b      	ldrb	r3, [r7, #8]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	7a7b      	ldrb	r3, [r7, #9]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	b21a      	sxth	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000ade:	7abb      	ldrb	r3, [r7, #10]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	7afb      	ldrb	r3, [r7, #11]
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b21a      	sxth	r2, r3
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000af0:	7b3b      	ldrb	r3, [r7, #12]
 8000af2:	021b      	lsls	r3, r3, #8
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	7b7b      	ldrb	r3, [r7, #13]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	ee07 3a90 	vmov	s15, r3
 8000b0c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b10:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000b60 <MPU6050_Read_Accel+0xb8>
 8000b14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	ed83 7b02 	vstr	d7, [r3, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b2c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000b60 <MPU6050_Read_Accel+0xb8>
 8000b30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	ed83 7b04 	vstr	d7, [r3, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b48:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8000b68 <MPU6050_Read_Accel+0xc0>
 8000b4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	00000000 	.word	0x00000000
 8000b64:	40d00000 	.word	0x40d00000
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40cc2900 	.word	0x40cc2900

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0x7c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d128      	bne.n	8000c2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_UART_MspInit+0x80>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <HAL_UART_MspInit+0x80>)
 8000be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_UART_MspInit+0x80>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_UART_MspInit+0x80>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_UART_MspInit+0x80>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_UART_MspInit+0x80>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000c28:	f000 fad8 	bl	80011dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40004800 	.word	0x40004800
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c60:	d141      	bne.n	8000ce6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c7a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <HAL_PCD_MspInit+0xb4>)
 8000c98:	f000 faa0 	bl	80011dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <HAL_PCD_MspInit+0xb4>)
 8000cb2:	f000 fa93 	bl	80011dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cba:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	6353      	str	r3, [r2, #52]	; 0x34
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	; 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f922 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	e00a      	b.n	8000d74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d5e:	f3af 8000 	nop.w
 8000d62:	4601      	mov	r1, r0
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	b2ca      	uxtb	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	3301      	adds	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dbf0      	blt.n	8000d5e <_read+0x12>
	}

return len;
 8000d7c:	687b      	ldr	r3, [r7, #4]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e009      	b.n	8000dac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fc25 	bl	80005f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf1      	blt.n	8000d98 <_write+0x12>
	}
	return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f003 f9de 	bl	8004218 <__errno>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	230c      	movs	r3, #12
 8000e60:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20080000 	.word	0x20080000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	200001fc 	.word	0x200001fc
 8000e90:	20000788 	.word	0x20000788

08000e94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <SystemInit+0x28>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <SystemInit+0x28>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SystemInit+0x28>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ec6:	e003      	b.n	8000ed0 <LoopCopyDataInit>

08000ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ece:	3104      	adds	r1, #4

08000ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ed8:	d3f6      	bcc.n	8000ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000edc:	e002      	b.n	8000ee4 <LoopFillZerobss>

08000ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee0:	f842 3b04 	str.w	r3, [r2], #4

08000ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ee8:	d3f9      	bcc.n	8000ede <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eea:	f7ff ffd3 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eee:	f003 f999 	bl	8004224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fb8f 	bl	8000614 <main>
  bx  lr    
 8000ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000efc:	08006ad0 	.word	0x08006ad0
  ldr  r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f04:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000f08:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8000f0c:	20000788 	.word	0x20000788

08000f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC_IRQHandler>

08000f12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f16:	2003      	movs	r0, #3
 8000f18:	f000 f92c 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 f805 	bl	8000f2c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f22:	f7ff fe25 	bl	8000b70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f939 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 f90f 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000780 	.word	0x20000780

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000780 	.word	0x20000780

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_Delay+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000008 	.word	0x20000008

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	4313      	orrs	r3, r2
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	05fa0000 	.word	0x05fa0000

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff47 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff5c 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffb0 	bl	8001130 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e175      	b.n	80014e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8164 	bne.w	80014e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d00b      	beq.n	800123a <HAL_GPIO_Init+0x5e>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122e:	2b11      	cmp	r3, #17
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b12      	cmp	r3, #18
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x100>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b12      	cmp	r3, #18
 80012da:	d123      	bne.n	8001324 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	69b9      	ldr	r1, [r7, #24]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80be 	beq.w	80014e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	4b65      	ldr	r3, [pc, #404]	; (80014fc <HAL_GPIO_Init+0x320>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a64      	ldr	r2, [pc, #400]	; (80014fc <HAL_GPIO_Init+0x320>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b62      	ldr	r3, [pc, #392]	; (80014fc <HAL_GPIO_Init+0x320>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800137e:	4a60      	ldr	r2, [pc, #384]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a57      	ldr	r2, [pc, #348]	; (8001504 <HAL_GPIO_Init+0x328>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d037      	beq.n	800141a <HAL_GPIO_Init+0x23e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a56      	ldr	r2, [pc, #344]	; (8001508 <HAL_GPIO_Init+0x32c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d031      	beq.n	8001416 <HAL_GPIO_Init+0x23a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a55      	ldr	r2, [pc, #340]	; (800150c <HAL_GPIO_Init+0x330>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d02b      	beq.n	8001412 <HAL_GPIO_Init+0x236>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a54      	ldr	r2, [pc, #336]	; (8001510 <HAL_GPIO_Init+0x334>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d025      	beq.n	800140e <HAL_GPIO_Init+0x232>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a53      	ldr	r2, [pc, #332]	; (8001514 <HAL_GPIO_Init+0x338>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01f      	beq.n	800140a <HAL_GPIO_Init+0x22e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a52      	ldr	r2, [pc, #328]	; (8001518 <HAL_GPIO_Init+0x33c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x22a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a51      	ldr	r2, [pc, #324]	; (800151c <HAL_GPIO_Init+0x340>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x226>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a50      	ldr	r2, [pc, #320]	; (8001520 <HAL_GPIO_Init+0x344>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x222>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4f      	ldr	r2, [pc, #316]	; (8001524 <HAL_GPIO_Init+0x348>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x21e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4e      	ldr	r2, [pc, #312]	; (8001528 <HAL_GPIO_Init+0x34c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x21a>
 80013f2:	2309      	movs	r3, #9
 80013f4:	e012      	b.n	800141c <HAL_GPIO_Init+0x240>
 80013f6:	230a      	movs	r3, #10
 80013f8:	e010      	b.n	800141c <HAL_GPIO_Init+0x240>
 80013fa:	2308      	movs	r3, #8
 80013fc:	e00e      	b.n	800141c <HAL_GPIO_Init+0x240>
 80013fe:	2307      	movs	r3, #7
 8001400:	e00c      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001402:	2306      	movs	r3, #6
 8001404:	e00a      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001406:	2305      	movs	r3, #5
 8001408:	e008      	b.n	800141c <HAL_GPIO_Init+0x240>
 800140a:	2304      	movs	r3, #4
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x240>
 800140e:	2303      	movs	r3, #3
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x240>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x240>
 800141a:	2300      	movs	r3, #0
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800142c:	4934      	ldr	r1, [pc, #208]	; (8001500 <HAL_GPIO_Init+0x324>)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <HAL_GPIO_Init+0x350>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145e:	4a33      	ldr	r2, [pc, #204]	; (800152c <HAL_GPIO_Init+0x350>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001464:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_GPIO_Init+0x350>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001488:	4a28      	ldr	r2, [pc, #160]	; (800152c <HAL_GPIO_Init+0x350>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_GPIO_Init+0x350>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_GPIO_Init+0x350>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_GPIO_Init+0x350>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <HAL_GPIO_Init+0x350>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	f67f ae86 	bls.w	80011fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	3724      	adds	r7, #36	; 0x24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40023800 	.word	0x40023800
 8001500:	40013800 	.word	0x40013800
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400
 800150c:	40020800 	.word	0x40020800
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40021000 	.word	0x40021000
 8001518:	40021400 	.word	0x40021400
 800151c:	40021800 	.word	0x40021800
 8001520:	40021c00 	.word	0x40021c00
 8001524:	40022000 	.word	0x40022000
 8001528:	40022400 	.word	0x40022400
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af02      	add	r7, sp, #8
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	4608      	mov	r0, r1
 800156e:	4611      	mov	r1, r2
 8001570:	461a      	mov	r2, r3
 8001572:	4603      	mov	r3, r0
 8001574:	817b      	strh	r3, [r7, #10]
 8001576:	460b      	mov	r3, r1
 8001578:	813b      	strh	r3, [r7, #8]
 800157a:	4613      	mov	r3, r2
 800157c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b20      	cmp	r3, #32
 8001588:	f040 80f9 	bne.w	800177e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_I2C_Mem_Write+0x34>
 8001592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001594:	2b00      	cmp	r3, #0
 8001596:	d105      	bne.n	80015a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0ed      	b.n	8001780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_I2C_Mem_Write+0x4e>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e0e6      	b.n	8001780 <HAL_I2C_Mem_Write+0x21c>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015ba:	f7ff fcfb 	bl	8000fb4 <HAL_GetTick>
 80015be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2319      	movs	r3, #25
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 fac3 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0d1      	b.n	8001780 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2221      	movs	r2, #33	; 0x21
 80015e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a3a      	ldr	r2, [r7, #32]
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001604:	88f8      	ldrh	r0, [r7, #6]
 8001606:	893a      	ldrh	r2, [r7, #8]
 8001608:	8979      	ldrh	r1, [r7, #10]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4603      	mov	r3, r0
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f9d3 	bl	80019c0 <I2C_RequestMemoryWrite>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0a9      	b.n	8001780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001630:	b29b      	uxth	r3, r3
 8001632:	2bff      	cmp	r3, #255	; 0xff
 8001634:	d90e      	bls.n	8001654 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	22ff      	movs	r2, #255	; 0xff
 800163a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001640:	b2da      	uxtb	r2, r3
 8001642:	8979      	ldrh	r1, [r7, #10]
 8001644:	2300      	movs	r3, #0
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 fba5 	bl	8001d9c <I2C_TransferConfig>
 8001652:	e00f      	b.n	8001674 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001662:	b2da      	uxtb	r2, r3
 8001664:	8979      	ldrh	r1, [r7, #10]
 8001666:	2300      	movs	r3, #0
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fb94 	bl	8001d9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 faad 	bl	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e07b      	b.n	8001780 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	781a      	ldrb	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d034      	beq.n	800172c <HAL_I2C_Mem_Write+0x1c8>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d130      	bne.n	800172c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d0:	2200      	movs	r2, #0
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 fa3f 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e04d      	b.n	8001780 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	2bff      	cmp	r3, #255	; 0xff
 80016ec:	d90e      	bls.n	800170c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	22ff      	movs	r2, #255	; 0xff
 80016f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	8979      	ldrh	r1, [r7, #10]
 80016fc:	2300      	movs	r3, #0
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 fb49 	bl	8001d9c <I2C_TransferConfig>
 800170a:	e00f      	b.n	800172c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171a:	b2da      	uxtb	r2, r3
 800171c:	8979      	ldrh	r1, [r7, #10]
 800171e:	2300      	movs	r3, #0
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 fb38 	bl	8001d9c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001730:	b29b      	uxth	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d19e      	bne.n	8001674 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 fa8c 	bl	8001c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e01a      	b.n	8001780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2220      	movs	r2, #32
 8001750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_I2C_Mem_Write+0x224>)
 800175e:	400b      	ands	r3, r1
 8001760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800177e:	2302      	movs	r3, #2
  }
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	fe00e800 	.word	0xfe00e800

0800178c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	4608      	mov	r0, r1
 8001796:	4611      	mov	r1, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4603      	mov	r3, r0
 800179c:	817b      	strh	r3, [r7, #10]
 800179e:	460b      	mov	r3, r1
 80017a0:	813b      	strh	r3, [r7, #8]
 80017a2:	4613      	mov	r3, r2
 80017a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	f040 80fd 	bne.w	80019ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_I2C_Mem_Read+0x34>
 80017ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d105      	bne.n	80017cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0f1      	b.n	80019b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_I2C_Mem_Read+0x4e>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e0ea      	b.n	80019b0 <HAL_I2C_Mem_Read+0x224>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017e2:	f7ff fbe7 	bl	8000fb4 <HAL_GetTick>
 80017e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2319      	movs	r3, #25
 80017ee:	2201      	movs	r2, #1
 80017f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 f9af 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0d5      	b.n	80019b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2222      	movs	r2, #34	; 0x22
 8001808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2240      	movs	r2, #64	; 0x40
 8001810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800182c:	88f8      	ldrh	r0, [r7, #6]
 800182e:	893a      	ldrh	r2, [r7, #8]
 8001830:	8979      	ldrh	r1, [r7, #10]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	9301      	str	r3, [sp, #4]
 8001836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	4603      	mov	r3, r0
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f913 	bl	8001a68 <I2C_RequestMemoryRead>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0ad      	b.n	80019b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	2bff      	cmp	r3, #255	; 0xff
 800185c:	d90e      	bls.n	800187c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	22ff      	movs	r2, #255	; 0xff
 8001862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001868:	b2da      	uxtb	r2, r3
 800186a:	8979      	ldrh	r1, [r7, #10]
 800186c:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <HAL_I2C_Mem_Read+0x22c>)
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 fa91 	bl	8001d9c <I2C_TransferConfig>
 800187a:	e00f      	b.n	800189c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188a:	b2da      	uxtb	r2, r3
 800188c:	8979      	ldrh	r1, [r7, #10]
 800188e:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <HAL_I2C_Mem_Read+0x22c>)
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 fa80 	bl	8001d9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a2:	2200      	movs	r2, #0
 80018a4:	2104      	movs	r1, #4
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f956 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e07c      	b.n	80019b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d034      	beq.n	800195c <HAL_I2C_Mem_Read+0x1d0>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d130      	bne.n	800195c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001900:	2200      	movs	r2, #0
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f927 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e04d      	b.n	80019b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	2bff      	cmp	r3, #255	; 0xff
 800191c:	d90e      	bls.n	800193c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	22ff      	movs	r2, #255	; 0xff
 8001922:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001928:	b2da      	uxtb	r2, r3
 800192a:	8979      	ldrh	r1, [r7, #10]
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 fa31 	bl	8001d9c <I2C_TransferConfig>
 800193a:	e00f      	b.n	800195c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194a:	b2da      	uxtb	r2, r3
 800194c:	8979      	ldrh	r1, [r7, #10]
 800194e:	2300      	movs	r3, #0
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fa20 	bl	8001d9c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001960:	b29b      	uxth	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d19a      	bne.n	800189c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f974 	bl	8001c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e01a      	b.n	80019b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2220      	movs	r2, #32
 8001980:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_I2C_Mem_Read+0x230>)
 800198e:	400b      	ands	r3, r1
 8001990:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80019ae:	2302      	movs	r3, #2
  }
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	80002400 	.word	0x80002400
 80019bc:	fe00e800 	.word	0xfe00e800

080019c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	4608      	mov	r0, r1
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	817b      	strh	r3, [r7, #10]
 80019d2:	460b      	mov	r3, r1
 80019d4:	813b      	strh	r3, [r7, #8]
 80019d6:	4613      	mov	r3, r2
 80019d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	8979      	ldrh	r1, [r7, #10]
 80019e0:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <I2C_RequestMemoryWrite+0xa4>)
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 f9d7 	bl	8001d9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	69b9      	ldr	r1, [r7, #24]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f8f0 	bl	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e02c      	b.n	8001a5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a08:	893b      	ldrh	r3, [r7, #8]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
 8001a12:	e015      	b.n	8001a40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a14:	893b      	ldrh	r3, [r7, #8]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	69b9      	ldr	r1, [r7, #24]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f8d6 	bl	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e012      	b.n	8001a5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a36:	893b      	ldrh	r3, [r7, #8]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2200      	movs	r2, #0
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f884 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	80002000 	.word	0x80002000

08001a68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	8979      	ldrh	r1, [r7, #10]
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <I2C_RequestMemoryRead+0xa4>)
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f984 	bl	8001d9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f89d 	bl	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e02c      	b.n	8001b02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d105      	bne.n	8001aba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aae:	893b      	ldrh	r3, [r7, #8]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ab8:	e015      	b.n	8001ae6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001aba:	893b      	ldrh	r3, [r7, #8]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	69b9      	ldr	r1, [r7, #24]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f883 	bl	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e012      	b.n	8001b02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001adc:	893b      	ldrh	r3, [r7, #8]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2200      	movs	r2, #0
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f831 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	80002000 	.word	0x80002000

08001b10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d103      	bne.n	8001b2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d007      	beq.n	8001b4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	619a      	str	r2, [r3, #24]
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b68:	e022      	b.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d01e      	beq.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b72:	f7ff fa1f 	bl	8000fb4 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d302      	bcc.n	8001b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d113      	bne.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f043 0220 	orr.w	r2, r3, #32
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e00f      	b.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d0cd      	beq.n	8001b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001be4:	e02c      	b.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f870 	bl	8001cd0 <I2C_IsAcknowledgeFailed>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e02a      	b.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d01e      	beq.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c02:	f7ff f9d7 	bl	8000fb4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d302      	bcc.n	8001c18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d113      	bne.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	f043 0220 	orr.w	r2, r3, #32
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e007      	b.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d1cb      	bne.n	8001be6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c64:	e028      	b.n	8001cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f830 	bl	8001cd0 <I2C_IsAcknowledgeFailed>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e026      	b.n	8001cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7a:	f7ff f99b 	bl	8000fb4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d113      	bne.n	8001cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f043 0220 	orr.w	r2, r3, #32
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e007      	b.n	8001cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d1cf      	bne.n	8001c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d151      	bne.n	8001d8e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cea:	e022      	b.n	8001d32 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf2:	d01e      	beq.n	8001d32 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf4:	f7ff f95e 	bl	8000fb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d302      	bcc.n	8001d0a <I2C_IsAcknowledgeFailed+0x3a>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d113      	bne.n	8001d32 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f043 0220 	orr.w	r2, r3, #32
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e02e      	b.n	8001d90 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d1d5      	bne.n	8001cec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2210      	movs	r2, #16
 8001d46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff fedd 	bl	8001b10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <I2C_IsAcknowledgeFailed+0xc8>)
 8001d62:	400b      	ands	r3, r1
 8001d64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f043 0204 	orr.w	r2, r3, #4
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	fe00e800 	.word	0xfe00e800

08001d9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	4613      	mov	r3, r2
 8001dac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	0d5b      	lsrs	r3, r3, #21
 8001db8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <I2C_TransferConfig+0x58>)
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	ea02 0103 	and.w	r1, r2, r3
 8001dc6:	897b      	ldrh	r3, [r7, #10]
 8001dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dcc:	7a7b      	ldrb	r3, [r7, #9]
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	03ff63ff 	.word	0x03ff63ff

08001df8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	b08f      	sub	sp, #60	; 0x3c
 8001dfc:	af0a      	add	r7, sp, #40	; 0x28
 8001dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e116      	b.n	8002038 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d106      	bne.n	8001e2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7fe ff0b 	bl	8000c40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f001 ff8d 	bl	8003d68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	687e      	ldr	r6, [r7, #4]
 8001e56:	466d      	mov	r5, sp
 8001e58:	f106 0410 	add.w	r4, r6, #16
 8001e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e68:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e6c:	1d33      	adds	r3, r6, #4
 8001e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e70:	6838      	ldr	r0, [r7, #0]
 8001e72:	f001 ff21 	bl	8003cb8 <USB_CoreInit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0d7      	b.n	8002038 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 ff7b 	bl	8003d8a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e04a      	b.n	8001f30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	333d      	adds	r3, #61	; 0x3d
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	333c      	adds	r3, #60	; 0x3c
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b298      	uxth	r0, r3
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3342      	adds	r3, #66	; 0x42
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	333f      	adds	r3, #63	; 0x3f
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3344      	adds	r3, #68	; 0x44
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3348      	adds	r3, #72	; 0x48
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3350      	adds	r3, #80	; 0x50
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d3af      	bcc.n	8001e9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
 8001f3e:	e044      	b.n	8001fca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3b5      	bcc.n	8001f40 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	687e      	ldr	r6, [r7, #4]
 8001fdc:	466d      	mov	r5, sp
 8001fde:	f106 0410 	add.w	r4, r6, #16
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fee:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff2:	1d33      	adds	r3, r6, #4
 8001ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff6:	6838      	ldr	r0, [r7, #0]
 8001ff8:	f001 fef2 	bl	8003de0 <USB_DevInit>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e014      	b.n	8002038 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	2b01      	cmp	r3, #1
 8002024:	d102      	bne.n	800202c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f80a 	bl	8002040 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f002 f8a4 	bl	800417e <USB_DevDisconnect>

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002040 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_PCDEx_ActivateLPM+0x44>)
 8002070:	4313      	orrs	r3, r2
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	10000003 	.word	0x10000003

08002088 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40007000 	.word	0x40007000

080020a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_PWREx_EnableOverDrive+0x98>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a22      	ldr	r2, [pc, #136]	; (8002140 <HAL_PWREx_EnableOverDrive+0x98>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_PWREx_EnableOverDrive+0x98>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d6:	f7fe ff6d 	bl	8000fb4 <HAL_GetTick>
 80020da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020dc:	e009      	b.n	80020f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020de:	f7fe ff69 	bl	8000fb4 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ec:	d901      	bls.n	80020f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e022      	b.n	8002138 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fe:	d1ee      	bne.n	80020de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800210c:	f7fe ff52 	bl	8000fb4 <HAL_GetTick>
 8002110:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002112:	e009      	b.n	8002128 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002114:	f7fe ff4e 	bl	8000fb4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002122:	d901      	bls.n	8002128 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e007      	b.n	8002138 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_PWREx_EnableOverDrive+0x9c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002134:	d1ee      	bne.n	8002114 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	40007000 	.word	0x40007000

08002148 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e29b      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8087 	beq.w	800227a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800216c:	4b96      	ldr	r3, [pc, #600]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b04      	cmp	r3, #4
 8002176:	d00c      	beq.n	8002192 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002178:	4b93      	ldr	r3, [pc, #588]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b08      	cmp	r3, #8
 8002182:	d112      	bne.n	80021aa <HAL_RCC_OscConfig+0x62>
 8002184:	4b90      	ldr	r3, [pc, #576]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002190:	d10b      	bne.n	80021aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002192:	4b8d      	ldr	r3, [pc, #564]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d06c      	beq.n	8002278 <HAL_RCC_OscConfig+0x130>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d168      	bne.n	8002278 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e275      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x7a>
 80021b4:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a83      	ldr	r2, [pc, #524]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e02e      	b.n	8002220 <HAL_RCC_OscConfig+0xd8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x9c>
 80021ca:	4b7f      	ldr	r3, [pc, #508]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7e      	ldr	r2, [pc, #504]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80021d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b7c      	ldr	r3, [pc, #496]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a7b      	ldr	r2, [pc, #492]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80021dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e01d      	b.n	8002220 <HAL_RCC_OscConfig+0xd8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0xc0>
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a75      	ldr	r2, [pc, #468]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a72      	ldr	r2, [pc, #456]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0xd8>
 8002208:	4b6f      	ldr	r3, [pc, #444]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a6e      	ldr	r2, [pc, #440]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 800220e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b6c      	ldr	r3, [pc, #432]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6b      	ldr	r2, [pc, #428]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fec4 	bl	8000fb4 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002230:	f7fe fec0 	bl	8000fb4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e229      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0xe8>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe feb0 	bl	8000fb4 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002258:	f7fe feac 	bl	8000fb4 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e215      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x110>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d069      	beq.n	800235a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002286:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002292:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	d11c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x190>
 800229e:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_RCC_OscConfig+0x17a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e1e9      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	493d      	ldr	r1, [pc, #244]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	e040      	b.n	800235a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d023      	beq.n	8002328 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e0:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a38      	ldr	r2, [pc, #224]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe fe62 	bl	8000fb4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f4:	f7fe fe5e 	bl	8000fb4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e1c7      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4929      	ldr	r1, [pc, #164]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
 8002326:	e018      	b.n	800235a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002328:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a26      	ldr	r2, [pc, #152]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 800232e:	f023 0301 	bic.w	r3, r3, #1
 8002332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fe3e 	bl	8000fb4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7fe fe3a 	bl	8000fb4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1a3      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d038      	beq.n	80023d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d019      	beq.n	80023a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002372:	4a15      	ldr	r2, [pc, #84]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe fe1b 	bl	8000fb4 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002382:	f7fe fe17 	bl	8000fb4 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e180      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 8002396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x23a>
 80023a0:	e01a      	b.n	80023d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80023a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a6:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <HAL_RCC_OscConfig+0x280>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ae:	f7fe fe01 	bl	8000fb4 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b6:	f7fe fdfd 	bl	8000fb4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d903      	bls.n	80023cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e166      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
 80023c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b92      	ldr	r3, [pc, #584]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80023ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1ee      	bne.n	80023b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a4 	beq.w	800252e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b8c      	ldr	r3, [pc, #560]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a88      	ldr	r2, [pc, #544]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b86      	ldr	r3, [pc, #536]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240e:	4b83      	ldr	r3, [pc, #524]	; (800261c <HAL_RCC_OscConfig+0x4d4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d118      	bne.n	800244c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800241a:	4b80      	ldr	r3, [pc, #512]	; (800261c <HAL_RCC_OscConfig+0x4d4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7f      	ldr	r2, [pc, #508]	; (800261c <HAL_RCC_OscConfig+0x4d4>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002426:	f7fe fdc5 	bl	8000fb4 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242e:	f7fe fdc1 	bl	8000fb4 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e12a      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002440:	4b76      	ldr	r3, [pc, #472]	; (800261c <HAL_RCC_OscConfig+0x4d4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x31a>
 8002454:	4b70      	ldr	r3, [pc, #448]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	4a6f      	ldr	r2, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6713      	str	r3, [r2, #112]	; 0x70
 8002460:	e02d      	b.n	80024be <HAL_RCC_OscConfig+0x376>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x33c>
 800246a:	4b6b      	ldr	r3, [pc, #428]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a6a      	ldr	r2, [pc, #424]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	4b68      	ldr	r3, [pc, #416]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a67      	ldr	r2, [pc, #412]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	e01c      	b.n	80024be <HAL_RCC_OscConfig+0x376>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b05      	cmp	r3, #5
 800248a:	d10c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x35e>
 800248c:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4a61      	ldr	r2, [pc, #388]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6713      	str	r3, [r2, #112]	; 0x70
 8002498:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a5e      	ldr	r2, [pc, #376]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
 80024a4:	e00b      	b.n	80024be <HAL_RCC_OscConfig+0x376>
 80024a6:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	4a5b      	ldr	r2, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6713      	str	r3, [r2, #112]	; 0x70
 80024b2:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	4a58      	ldr	r2, [pc, #352]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d015      	beq.n	80024f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fd75 	bl	8000fb4 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe fd71 	bl	8000fb4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0d8      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ee      	beq.n	80024ce <HAL_RCC_OscConfig+0x386>
 80024f0:	e014      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7fe fd5f 	bl	8000fb4 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fe fd5b 	bl	8000fb4 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0c2      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002510:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ee      	bne.n	80024fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a3c      	ldr	r2, [pc, #240]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 8002528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80ae 	beq.w	8002694 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002538:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d06d      	beq.n	8002620 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d14b      	bne.n	80025e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254c:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a31      	ldr	r2, [pc, #196]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 8002552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fd2c 	bl	8000fb4 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe fd28 	bl	8000fb4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e091      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	019b      	lsls	r3, r3, #6
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	3b01      	subs	r3, #1
 8002598:	041b      	lsls	r3, r3, #16
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	071b      	lsls	r3, r3, #28
 80025aa:	491b      	ldr	r1, [pc, #108]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80025b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fcfa 	bl	8000fb4 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fcf6 	bl	8000fb4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e05f      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x47c>
 80025e2:	e057      	b.n	8002694 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 80025ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fce0 	bl	8000fb4 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fcdc 	bl	8000fb4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e045      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260a:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCC_OscConfig+0x4d0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4b0>
 8002616:	e03d      	b.n	8002694 <HAL_RCC_OscConfig+0x54c>
 8002618:	40023800 	.word	0x40023800
 800261c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <HAL_RCC_OscConfig+0x558>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d030      	beq.n	8002690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d129      	bne.n	8002690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	429a      	cmp	r2, r3
 8002648:	d122      	bne.n	8002690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002650:	4013      	ands	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002656:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002658:	4293      	cmp	r3, r2
 800265a:	d119      	bne.n	8002690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	3b01      	subs	r3, #1
 800266a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d10f      	bne.n	8002690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d107      	bne.n	8002690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800

080026a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d0      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d910      	bls.n	80026ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b67      	ldr	r3, [pc, #412]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 020f 	bic.w	r2, r3, #15
 80026d2:	4965      	ldr	r1, [pc, #404]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 800270a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002726:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d040      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e073      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06b      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4936      	ldr	r1, [pc, #216]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe fc0c 	bl	8000fb4 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe fc08 	bl	8000fb4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e053      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d210      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b24      	ldr	r3, [pc, #144]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 020f 	bic.w	r2, r3, #15
 80027de:	4922      	ldr	r1, [pc, #136]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4601      	mov	r1, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x1cc>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	fa21 f303 	lsr.w	r3, r1, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1d0>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1d4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fb68 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023c00 	.word	0x40023c00
 800286c:	40023800 	.word	0x40023800
 8002870:	080067e4 	.word	0x080067e4
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004

0800287c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	2300      	movs	r3, #0
 800288c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d007      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x32>
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d008      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x38>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 80b4 	bne.w	8002a10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4b5e      	ldr	r3, [pc, #376]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028aa:	60bb      	str	r3, [r7, #8]
      break;
 80028ac:	e0b3      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ae:	4b5e      	ldr	r3, [pc, #376]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80028b0:	60bb      	str	r3, [r7, #8]
      break;
 80028b2:	e0b0      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b4:	4b5a      	ldr	r3, [pc, #360]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d04a      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ca:	4b55      	ldr	r3, [pc, #340]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	ea03 0501 	and.w	r5, r3, r1
 80028e0:	ea04 0602 	and.w	r6, r4, r2
 80028e4:	4629      	mov	r1, r5
 80028e6:	4632      	mov	r2, r6
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	f04f 0400 	mov.w	r4, #0
 80028f0:	0154      	lsls	r4, r2, #5
 80028f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028f6:	014b      	lsls	r3, r1, #5
 80028f8:	4619      	mov	r1, r3
 80028fa:	4622      	mov	r2, r4
 80028fc:	1b49      	subs	r1, r1, r5
 80028fe:	eb62 0206 	sbc.w	r2, r2, r6
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	f04f 0400 	mov.w	r4, #0
 800290a:	0194      	lsls	r4, r2, #6
 800290c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002910:	018b      	lsls	r3, r1, #6
 8002912:	1a5b      	subs	r3, r3, r1
 8002914:	eb64 0402 	sbc.w	r4, r4, r2
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	00e2      	lsls	r2, r4, #3
 8002922:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002926:	00d9      	lsls	r1, r3, #3
 8002928:	460b      	mov	r3, r1
 800292a:	4614      	mov	r4, r2
 800292c:	195b      	adds	r3, r3, r5
 800292e:	eb44 0406 	adc.w	r4, r4, r6
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	0262      	lsls	r2, r4, #9
 800293c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002940:	0259      	lsls	r1, r3, #9
 8002942:	460b      	mov	r3, r1
 8002944:	4614      	mov	r4, r2
 8002946:	4618      	mov	r0, r3
 8002948:	4621      	mov	r1, r4
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f04f 0400 	mov.w	r4, #0
 8002950:	461a      	mov	r2, r3
 8002952:	4623      	mov	r3, r4
 8002954:	f7fd fccc 	bl	80002f0 <__aeabi_uldivmod>
 8002958:	4603      	mov	r3, r0
 800295a:	460c      	mov	r4, r1
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	e049      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	f04f 0400 	mov.w	r4, #0
 800296a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	ea03 0501 	and.w	r5, r3, r1
 8002976:	ea04 0602 	and.w	r6, r4, r2
 800297a:	4629      	mov	r1, r5
 800297c:	4632      	mov	r2, r6
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	f04f 0400 	mov.w	r4, #0
 8002986:	0154      	lsls	r4, r2, #5
 8002988:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800298c:	014b      	lsls	r3, r1, #5
 800298e:	4619      	mov	r1, r3
 8002990:	4622      	mov	r2, r4
 8002992:	1b49      	subs	r1, r1, r5
 8002994:	eb62 0206 	sbc.w	r2, r2, r6
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	f04f 0400 	mov.w	r4, #0
 80029a0:	0194      	lsls	r4, r2, #6
 80029a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029a6:	018b      	lsls	r3, r1, #6
 80029a8:	1a5b      	subs	r3, r3, r1
 80029aa:	eb64 0402 	sbc.w	r4, r4, r2
 80029ae:	f04f 0100 	mov.w	r1, #0
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	00e2      	lsls	r2, r4, #3
 80029b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029bc:	00d9      	lsls	r1, r3, #3
 80029be:	460b      	mov	r3, r1
 80029c0:	4614      	mov	r4, r2
 80029c2:	195b      	adds	r3, r3, r5
 80029c4:	eb44 0406 	adc.w	r4, r4, r6
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	02a2      	lsls	r2, r4, #10
 80029d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029d6:	0299      	lsls	r1, r3, #10
 80029d8:	460b      	mov	r3, r1
 80029da:	4614      	mov	r4, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	4621      	mov	r1, r4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f04f 0400 	mov.w	r4, #0
 80029e6:	461a      	mov	r2, r3
 80029e8:	4623      	mov	r3, r4
 80029ea:	f7fd fc81 	bl	80002f0 <__aeabi_uldivmod>
 80029ee:	4603      	mov	r3, r0
 80029f0:	460c      	mov	r4, r1
 80029f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	60bb      	str	r3, [r7, #8]
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a12:	60bb      	str	r3, [r7, #8]
      break;
 8002a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a16:	68bb      	ldr	r3, [r7, #8]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	007a1200 	.word	0x007a1200

08002a2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000000 	.word	0x20000000

08002a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5a:	5cd3      	ldrb	r3, [r2, r3]
 8002a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	080067f4 	.word	0x080067f4

08002a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a70:	f7ff ffdc 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a74:	4601      	mov	r1, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0b5b      	lsrs	r3, r3, #13
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	080067f4 	.word	0x080067f4

08002a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002abc:	4b69      	ldr	r3, [pc, #420]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a68      	ldr	r2, [pc, #416]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ac6:	6093      	str	r3, [r2, #8]
 8002ac8:	4b66      	ldr	r3, [pc, #408]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	4964      	ldr	r1, [pc, #400]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d017      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aee:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	4959      	ldr	r1, [pc, #356]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d017      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	494a      	ldr	r1, [pc, #296]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b48:	d101      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 808b 	beq.w	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a39      	ldr	r2, [pc, #228]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fa0a 	bl	8000fb4 <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba4:	f7fe fa06 	bl	8000fb4 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e38d      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d035      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d02e      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be0:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bea:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d114      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe f9ce 	bl	8000fb4 <HAL_GetTick>
 8002c18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe f9ca 	bl	8000fb4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e34f      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ee      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c4a:	d111      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	4901      	ldr	r1, [pc, #4]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	0ffffcff 	.word	0x0ffffcff
 8002c70:	4bb3      	ldr	r3, [pc, #716]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4ab2      	ldr	r2, [pc, #712]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c7a:	6093      	str	r3, [r2, #8]
 8002c7c:	4bb0      	ldr	r3, [pc, #704]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	49ad      	ldr	r1, [pc, #692]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c9a:	4ba9      	ldr	r3, [pc, #676]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca0:	4aa7      	ldr	r2, [pc, #668]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002caa:	4ba5      	ldr	r3, [pc, #660]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	49a2      	ldr	r1, [pc, #648]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc8:	4b9d      	ldr	r3, [pc, #628]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd6:	499a      	ldr	r1, [pc, #616]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cea:	4b95      	ldr	r3, [pc, #596]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf8:	4991      	ldr	r1, [pc, #580]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1a:	4989      	ldr	r1, [pc, #548]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d2e:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4980      	ldr	r1, [pc, #512]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d50:	4b7b      	ldr	r3, [pc, #492]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4978      	ldr	r1, [pc, #480]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d72:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f023 020c 	bic.w	r2, r3, #12
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d80:	496f      	ldr	r1, [pc, #444]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d94:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	4967      	ldr	r1, [pc, #412]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002db6:	4b62      	ldr	r3, [pc, #392]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc4:	495e      	ldr	r1, [pc, #376]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	4956      	ldr	r1, [pc, #344]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dfa:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	494d      	ldr	r1, [pc, #308]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e1c:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	4945      	ldr	r1, [pc, #276]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e3e:	4b40      	ldr	r3, [pc, #256]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4c:	493c      	ldr	r1, [pc, #240]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e60:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6e:	4934      	ldr	r1, [pc, #208]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d011      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e90:	492b      	ldr	r1, [pc, #172]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	491b      	ldr	r1, [pc, #108]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f18:	4909      	ldr	r1, [pc, #36]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00f      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	e002      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	4985      	ldr	r1, [pc, #532]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f58:	4b80      	ldr	r3, [pc, #512]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f68:	497c      	ldr	r1, [pc, #496]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d005      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f7e:	f040 80d6 	bne.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f82:	4b76      	ldr	r3, [pc, #472]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a75      	ldr	r2, [pc, #468]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f8e:	f7fe f811 	bl	8000fb4 <HAL_GetTick>
 8002f92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f96:	f7fe f80d 	bl	8000fb4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b64      	cmp	r3, #100	; 0x64
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e194      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d021      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11d      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fc8:	4b64      	ldr	r3, [pc, #400]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fd6:	4b61      	ldr	r3, [pc, #388]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fdc:	0e1b      	lsrs	r3, r3, #24
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	019a      	lsls	r2, r3, #6
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	061b      	lsls	r3, r3, #24
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	071b      	lsls	r3, r3, #28
 8002ffc:	4957      	ldr	r1, [pc, #348]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003022:	2b00      	cmp	r3, #0
 8003024:	d02e      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302e:	d129      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003030:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003036:	0c1b      	lsrs	r3, r3, #16
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003044:	0f1b      	lsrs	r3, r3, #28
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	019a      	lsls	r2, r3, #6
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	431a      	orrs	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	071b      	lsls	r3, r3, #28
 8003064:	493d      	ldr	r1, [pc, #244]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800306c:	4b3b      	ldr	r3, [pc, #236]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800306e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003072:	f023 021f 	bic.w	r2, r3, #31
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	3b01      	subs	r3, #1
 800307c:	4937      	ldr	r1, [pc, #220]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01d      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003090:	4b32      	ldr	r3, [pc, #200]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003096:	0e1b      	lsrs	r3, r3, #24
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800309e:	4b2f      	ldr	r3, [pc, #188]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a4:	0f1b      	lsrs	r3, r3, #28
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	019a      	lsls	r2, r3, #6
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	431a      	orrs	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	071b      	lsls	r3, r3, #28
 80030c4:	4925      	ldr	r1, [pc, #148]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d011      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	019a      	lsls	r2, r3, #6
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	061b      	lsls	r3, r3, #24
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	071b      	lsls	r3, r3, #28
 80030f4:	4919      	ldr	r1, [pc, #100]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a16      	ldr	r2, [pc, #88]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003102:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003108:	f7fd ff54 	bl	8000fb4 <HAL_GetTick>
 800310c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003110:	f7fd ff50 	bl	8000fb4 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0d7      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b01      	cmp	r3, #1
 8003132:	f040 80cd 	bne.w	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a08      	ldr	r2, [pc, #32]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800313c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003142:	f7fd ff37 	bl	8000fb4 <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800314a:	f7fd ff33 	bl	8000fb4 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d903      	bls.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0ba      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800315c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003160:	4b5e      	ldr	r3, [pc, #376]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800316c:	d0ed      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02e      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d12a      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003196:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031a4:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	0f1b      	lsrs	r3, r3, #28
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	019a      	lsls	r2, r3, #6
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	041b      	lsls	r3, r3, #16
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	061b      	lsls	r3, r3, #24
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	071b      	lsls	r3, r3, #28
 80031ca:	4944      	ldr	r1, [pc, #272]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031d2:	4b42      	ldr	r3, [pc, #264]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	3b01      	subs	r3, #1
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	493d      	ldr	r1, [pc, #244]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d022      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003200:	d11d      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	0e1b      	lsrs	r3, r3, #24
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	0f1b      	lsrs	r3, r3, #28
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	019a      	lsls	r2, r3, #6
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	4929      	ldr	r1, [pc, #164]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d028      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	0e1b      	lsrs	r3, r3, #24
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	019a      	lsls	r2, r3, #6
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	431a      	orrs	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	071b      	lsls	r3, r3, #28
 800327e:	4917      	ldr	r1, [pc, #92]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	4911      	ldr	r1, [pc, #68]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a8:	f7fd fe84 	bl	8000fb4 <HAL_GetTick>
 80032ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032b0:	f7fd fe80 	bl	8000fb4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e007      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ce:	d1ef      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800

080032e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e040      	b.n	8003374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd fc58 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2224      	movs	r2, #36	; 0x24
 800330c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8be 	bl	80034a0 <UART_SetConfig>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e022      	b.n	8003374 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fb5c 	bl	80039f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800334a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800335a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fbe3 	bl	8003b38 <UART_CheckIdleState>
 8003372:	4603      	mov	r3, r0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003390:	2b20      	cmp	r3, #32
 8003392:	d17f      	bne.n	8003494 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_UART_Transmit+0x24>
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e078      	b.n	8003496 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Transmit+0x36>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e071      	b.n	8003496 <HAL_UART_Transmit+0x11a>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2221      	movs	r2, #33	; 0x21
 80033c4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80033c6:	f7fd fdf5 	bl	8000fb4 <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	88fa      	ldrh	r2, [r7, #6]
 80033d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e4:	d108      	bne.n	80033f8 <HAL_UART_Transmit+0x7c>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d104      	bne.n	80033f8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e003      	b.n	8003400 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003408:	e02c      	b.n	8003464 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2200      	movs	r2, #0
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fbd4 	bl	8003bc2 <UART_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e038      	b.n	8003496 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003438:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	3302      	adds	r3, #2
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	e007      	b.n	8003452 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	3301      	adds	r3, #1
 8003450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1cc      	bne.n	800340a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2200      	movs	r2, #0
 8003478:	2140      	movs	r1, #64	; 0x40
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fba1 	bl	8003bc2 <UART_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e005      	b.n	8003496 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e000      	b.n	8003496 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
  }
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4bb1      	ldr	r3, [pc, #708]	; (8003794 <UART_SetConfig+0x2f4>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	6939      	ldr	r1, [r7, #16]
 80034d8:	430b      	orrs	r3, r1
 80034da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	430a      	orrs	r2, r1
 8003514:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a9f      	ldr	r2, [pc, #636]	; (8003798 <UART_SetConfig+0x2f8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d121      	bne.n	8003564 <UART_SetConfig+0xc4>
 8003520:	4b9e      	ldr	r3, [pc, #632]	; (800379c <UART_SetConfig+0x2fc>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b03      	cmp	r3, #3
 800352c:	d816      	bhi.n	800355c <UART_SetConfig+0xbc>
 800352e:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <UART_SetConfig+0x94>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003545 	.word	0x08003545
 8003538:	08003551 	.word	0x08003551
 800353c:	0800354b 	.word	0x0800354b
 8003540:	08003557 	.word	0x08003557
 8003544:	2301      	movs	r3, #1
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e151      	b.n	80037ee <UART_SetConfig+0x34e>
 800354a:	2302      	movs	r3, #2
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e14e      	b.n	80037ee <UART_SetConfig+0x34e>
 8003550:	2304      	movs	r3, #4
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e14b      	b.n	80037ee <UART_SetConfig+0x34e>
 8003556:	2308      	movs	r3, #8
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e148      	b.n	80037ee <UART_SetConfig+0x34e>
 800355c:	2310      	movs	r3, #16
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	bf00      	nop
 8003562:	e144      	b.n	80037ee <UART_SetConfig+0x34e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a8d      	ldr	r2, [pc, #564]	; (80037a0 <UART_SetConfig+0x300>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d134      	bne.n	80035d8 <UART_SetConfig+0x138>
 800356e:	4b8b      	ldr	r3, [pc, #556]	; (800379c <UART_SetConfig+0x2fc>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b0c      	cmp	r3, #12
 800357a:	d829      	bhi.n	80035d0 <UART_SetConfig+0x130>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <UART_SetConfig+0xe4>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	080035b9 	.word	0x080035b9
 8003588:	080035d1 	.word	0x080035d1
 800358c:	080035d1 	.word	0x080035d1
 8003590:	080035d1 	.word	0x080035d1
 8003594:	080035c5 	.word	0x080035c5
 8003598:	080035d1 	.word	0x080035d1
 800359c:	080035d1 	.word	0x080035d1
 80035a0:	080035d1 	.word	0x080035d1
 80035a4:	080035bf 	.word	0x080035bf
 80035a8:	080035d1 	.word	0x080035d1
 80035ac:	080035d1 	.word	0x080035d1
 80035b0:	080035d1 	.word	0x080035d1
 80035b4:	080035cb 	.word	0x080035cb
 80035b8:	2300      	movs	r3, #0
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e117      	b.n	80037ee <UART_SetConfig+0x34e>
 80035be:	2302      	movs	r3, #2
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e114      	b.n	80037ee <UART_SetConfig+0x34e>
 80035c4:	2304      	movs	r3, #4
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e111      	b.n	80037ee <UART_SetConfig+0x34e>
 80035ca:	2308      	movs	r3, #8
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e10e      	b.n	80037ee <UART_SetConfig+0x34e>
 80035d0:	2310      	movs	r3, #16
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	bf00      	nop
 80035d6:	e10a      	b.n	80037ee <UART_SetConfig+0x34e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a71      	ldr	r2, [pc, #452]	; (80037a4 <UART_SetConfig+0x304>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d120      	bne.n	8003624 <UART_SetConfig+0x184>
 80035e2:	4b6e      	ldr	r3, [pc, #440]	; (800379c <UART_SetConfig+0x2fc>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d00f      	beq.n	8003610 <UART_SetConfig+0x170>
 80035f0:	2b10      	cmp	r3, #16
 80035f2:	d802      	bhi.n	80035fa <UART_SetConfig+0x15a>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <UART_SetConfig+0x164>
 80035f8:	e010      	b.n	800361c <UART_SetConfig+0x17c>
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d005      	beq.n	800360a <UART_SetConfig+0x16a>
 80035fe:	2b30      	cmp	r3, #48	; 0x30
 8003600:	d009      	beq.n	8003616 <UART_SetConfig+0x176>
 8003602:	e00b      	b.n	800361c <UART_SetConfig+0x17c>
 8003604:	2300      	movs	r3, #0
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e0f1      	b.n	80037ee <UART_SetConfig+0x34e>
 800360a:	2302      	movs	r3, #2
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e0ee      	b.n	80037ee <UART_SetConfig+0x34e>
 8003610:	2304      	movs	r3, #4
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e0eb      	b.n	80037ee <UART_SetConfig+0x34e>
 8003616:	2308      	movs	r3, #8
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e0e8      	b.n	80037ee <UART_SetConfig+0x34e>
 800361c:	2310      	movs	r3, #16
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	bf00      	nop
 8003622:	e0e4      	b.n	80037ee <UART_SetConfig+0x34e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a5f      	ldr	r2, [pc, #380]	; (80037a8 <UART_SetConfig+0x308>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d120      	bne.n	8003670 <UART_SetConfig+0x1d0>
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <UART_SetConfig+0x2fc>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d00f      	beq.n	800365c <UART_SetConfig+0x1bc>
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d802      	bhi.n	8003646 <UART_SetConfig+0x1a6>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <UART_SetConfig+0x1b0>
 8003644:	e010      	b.n	8003668 <UART_SetConfig+0x1c8>
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	d005      	beq.n	8003656 <UART_SetConfig+0x1b6>
 800364a:	2bc0      	cmp	r3, #192	; 0xc0
 800364c:	d009      	beq.n	8003662 <UART_SetConfig+0x1c2>
 800364e:	e00b      	b.n	8003668 <UART_SetConfig+0x1c8>
 8003650:	2300      	movs	r3, #0
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e0cb      	b.n	80037ee <UART_SetConfig+0x34e>
 8003656:	2302      	movs	r3, #2
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e0c8      	b.n	80037ee <UART_SetConfig+0x34e>
 800365c:	2304      	movs	r3, #4
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e0c5      	b.n	80037ee <UART_SetConfig+0x34e>
 8003662:	2308      	movs	r3, #8
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	e0c2      	b.n	80037ee <UART_SetConfig+0x34e>
 8003668:	2310      	movs	r3, #16
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	bf00      	nop
 800366e:	e0be      	b.n	80037ee <UART_SetConfig+0x34e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a4d      	ldr	r2, [pc, #308]	; (80037ac <UART_SetConfig+0x30c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d124      	bne.n	80036c4 <UART_SetConfig+0x224>
 800367a:	4b48      	ldr	r3, [pc, #288]	; (800379c <UART_SetConfig+0x2fc>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003688:	d012      	beq.n	80036b0 <UART_SetConfig+0x210>
 800368a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368e:	d802      	bhi.n	8003696 <UART_SetConfig+0x1f6>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <UART_SetConfig+0x204>
 8003694:	e012      	b.n	80036bc <UART_SetConfig+0x21c>
 8003696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369a:	d006      	beq.n	80036aa <UART_SetConfig+0x20a>
 800369c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a0:	d009      	beq.n	80036b6 <UART_SetConfig+0x216>
 80036a2:	e00b      	b.n	80036bc <UART_SetConfig+0x21c>
 80036a4:	2300      	movs	r3, #0
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	e0a1      	b.n	80037ee <UART_SetConfig+0x34e>
 80036aa:	2302      	movs	r3, #2
 80036ac:	77fb      	strb	r3, [r7, #31]
 80036ae:	e09e      	b.n	80037ee <UART_SetConfig+0x34e>
 80036b0:	2304      	movs	r3, #4
 80036b2:	77fb      	strb	r3, [r7, #31]
 80036b4:	e09b      	b.n	80037ee <UART_SetConfig+0x34e>
 80036b6:	2308      	movs	r3, #8
 80036b8:	77fb      	strb	r3, [r7, #31]
 80036ba:	e098      	b.n	80037ee <UART_SetConfig+0x34e>
 80036bc:	2310      	movs	r3, #16
 80036be:	77fb      	strb	r3, [r7, #31]
 80036c0:	bf00      	nop
 80036c2:	e094      	b.n	80037ee <UART_SetConfig+0x34e>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a39      	ldr	r2, [pc, #228]	; (80037b0 <UART_SetConfig+0x310>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d124      	bne.n	8003718 <UART_SetConfig+0x278>
 80036ce:	4b33      	ldr	r3, [pc, #204]	; (800379c <UART_SetConfig+0x2fc>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036dc:	d012      	beq.n	8003704 <UART_SetConfig+0x264>
 80036de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e2:	d802      	bhi.n	80036ea <UART_SetConfig+0x24a>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <UART_SetConfig+0x258>
 80036e8:	e012      	b.n	8003710 <UART_SetConfig+0x270>
 80036ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ee:	d006      	beq.n	80036fe <UART_SetConfig+0x25e>
 80036f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036f4:	d009      	beq.n	800370a <UART_SetConfig+0x26a>
 80036f6:	e00b      	b.n	8003710 <UART_SetConfig+0x270>
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e077      	b.n	80037ee <UART_SetConfig+0x34e>
 80036fe:	2302      	movs	r3, #2
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e074      	b.n	80037ee <UART_SetConfig+0x34e>
 8003704:	2304      	movs	r3, #4
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e071      	b.n	80037ee <UART_SetConfig+0x34e>
 800370a:	2308      	movs	r3, #8
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e06e      	b.n	80037ee <UART_SetConfig+0x34e>
 8003710:	2310      	movs	r3, #16
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	bf00      	nop
 8003716:	e06a      	b.n	80037ee <UART_SetConfig+0x34e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <UART_SetConfig+0x314>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d124      	bne.n	800376c <UART_SetConfig+0x2cc>
 8003722:	4b1e      	ldr	r3, [pc, #120]	; (800379c <UART_SetConfig+0x2fc>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	d012      	beq.n	8003758 <UART_SetConfig+0x2b8>
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d802      	bhi.n	800373e <UART_SetConfig+0x29e>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <UART_SetConfig+0x2ac>
 800373c:	e012      	b.n	8003764 <UART_SetConfig+0x2c4>
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003742:	d006      	beq.n	8003752 <UART_SetConfig+0x2b2>
 8003744:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003748:	d009      	beq.n	800375e <UART_SetConfig+0x2be>
 800374a:	e00b      	b.n	8003764 <UART_SetConfig+0x2c4>
 800374c:	2300      	movs	r3, #0
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e04d      	b.n	80037ee <UART_SetConfig+0x34e>
 8003752:	2302      	movs	r3, #2
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e04a      	b.n	80037ee <UART_SetConfig+0x34e>
 8003758:	2304      	movs	r3, #4
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e047      	b.n	80037ee <UART_SetConfig+0x34e>
 800375e:	2308      	movs	r3, #8
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e044      	b.n	80037ee <UART_SetConfig+0x34e>
 8003764:	2310      	movs	r3, #16
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	bf00      	nop
 800376a:	e040      	b.n	80037ee <UART_SetConfig+0x34e>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <UART_SetConfig+0x318>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d139      	bne.n	80037ea <UART_SetConfig+0x34a>
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <UART_SetConfig+0x2fc>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003784:	d027      	beq.n	80037d6 <UART_SetConfig+0x336>
 8003786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800378a:	d817      	bhi.n	80037bc <UART_SetConfig+0x31c>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01c      	beq.n	80037ca <UART_SetConfig+0x32a>
 8003790:	e027      	b.n	80037e2 <UART_SetConfig+0x342>
 8003792:	bf00      	nop
 8003794:	efff69f3 	.word	0xefff69f3
 8003798:	40011000 	.word	0x40011000
 800379c:	40023800 	.word	0x40023800
 80037a0:	40004400 	.word	0x40004400
 80037a4:	40004800 	.word	0x40004800
 80037a8:	40004c00 	.word	0x40004c00
 80037ac:	40005000 	.word	0x40005000
 80037b0:	40011400 	.word	0x40011400
 80037b4:	40007800 	.word	0x40007800
 80037b8:	40007c00 	.word	0x40007c00
 80037bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c0:	d006      	beq.n	80037d0 <UART_SetConfig+0x330>
 80037c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037c6:	d009      	beq.n	80037dc <UART_SetConfig+0x33c>
 80037c8:	e00b      	b.n	80037e2 <UART_SetConfig+0x342>
 80037ca:	2300      	movs	r3, #0
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e00e      	b.n	80037ee <UART_SetConfig+0x34e>
 80037d0:	2302      	movs	r3, #2
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e00b      	b.n	80037ee <UART_SetConfig+0x34e>
 80037d6:	2304      	movs	r3, #4
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e008      	b.n	80037ee <UART_SetConfig+0x34e>
 80037dc:	2308      	movs	r3, #8
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e005      	b.n	80037ee <UART_SetConfig+0x34e>
 80037e2:	2310      	movs	r3, #16
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	bf00      	nop
 80037e8:	e001      	b.n	80037ee <UART_SetConfig+0x34e>
 80037ea:	2310      	movs	r3, #16
 80037ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f6:	d17f      	bne.n	80038f8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80037f8:	7ffb      	ldrb	r3, [r7, #31]
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d85c      	bhi.n	80038b8 <UART_SetConfig+0x418>
 80037fe:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <UART_SetConfig+0x364>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003829 	.word	0x08003829
 8003808:	08003849 	.word	0x08003849
 800380c:	08003869 	.word	0x08003869
 8003810:	080038b9 	.word	0x080038b9
 8003814:	08003881 	.word	0x08003881
 8003818:	080038b9 	.word	0x080038b9
 800381c:	080038b9 	.word	0x080038b9
 8003820:	080038b9 	.word	0x080038b9
 8003824:	080038a1 	.word	0x080038a1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7ff f90c 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 800382c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	005a      	lsls	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	441a      	add	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	b29b      	uxth	r3, r3
 8003844:	61bb      	str	r3, [r7, #24]
        break;
 8003846:	e03a      	b.n	80038be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003848:	f7ff f910 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 800384c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	005a      	lsls	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	441a      	add	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	b29b      	uxth	r3, r3
 8003864:	61bb      	str	r3, [r7, #24]
        break;
 8003866:	e02a      	b.n	80038be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	085a      	lsrs	r2, r3, #1
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <UART_SetConfig+0x54c>)
 8003870:	4413      	add	r3, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6852      	ldr	r2, [r2, #4]
 8003876:	fbb3 f3f2 	udiv	r3, r3, r2
 800387a:	b29b      	uxth	r3, r3
 800387c:	61bb      	str	r3, [r7, #24]
        break;
 800387e:	e01e      	b.n	80038be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003880:	f7fe fffc 	bl	800287c <HAL_RCC_GetSysClockFreq>
 8003884:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	005a      	lsls	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	441a      	add	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	b29b      	uxth	r3, r3
 800389c:	61bb      	str	r3, [r7, #24]
        break;
 800389e:	e00e      	b.n	80038be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	61bb      	str	r3, [r7, #24]
        break;
 80038b6:	e002      	b.n	80038be <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	75fb      	strb	r3, [r7, #23]
        break;
 80038bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b0f      	cmp	r3, #15
 80038c2:	d916      	bls.n	80038f2 <UART_SetConfig+0x452>
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ca:	d212      	bcs.n	80038f2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f023 030f 	bic.w	r3, r3, #15
 80038d4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	897b      	ldrh	r3, [r7, #10]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	897a      	ldrh	r2, [r7, #10]
 80038ee:	60da      	str	r2, [r3, #12]
 80038f0:	e070      	b.n	80039d4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75fb      	strb	r3, [r7, #23]
 80038f6:	e06d      	b.n	80039d4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80038f8:	7ffb      	ldrb	r3, [r7, #31]
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d859      	bhi.n	80039b2 <UART_SetConfig+0x512>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <UART_SetConfig+0x464>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003929 	.word	0x08003929
 8003908:	08003947 	.word	0x08003947
 800390c:	08003965 	.word	0x08003965
 8003910:	080039b3 	.word	0x080039b3
 8003914:	0800397d 	.word	0x0800397d
 8003918:	080039b3 	.word	0x080039b3
 800391c:	080039b3 	.word	0x080039b3
 8003920:	080039b3 	.word	0x080039b3
 8003924:	0800399b 	.word	0x0800399b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003928:	f7ff f88c 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 800392c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	085a      	lsrs	r2, r3, #1
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	441a      	add	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	b29b      	uxth	r3, r3
 8003942:	61bb      	str	r3, [r7, #24]
        break;
 8003944:	e038      	b.n	80039b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003946:	f7ff f891 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 800394a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	085a      	lsrs	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	441a      	add	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	b29b      	uxth	r3, r3
 8003960:	61bb      	str	r3, [r7, #24]
        break;
 8003962:	e029      	b.n	80039b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	085a      	lsrs	r2, r3, #1
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <UART_SetConfig+0x550>)
 800396c:	4413      	add	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6852      	ldr	r2, [r2, #4]
 8003972:	fbb3 f3f2 	udiv	r3, r3, r2
 8003976:	b29b      	uxth	r3, r3
 8003978:	61bb      	str	r3, [r7, #24]
        break;
 800397a:	e01d      	b.n	80039b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397c:	f7fe ff7e 	bl	800287c <HAL_RCC_GetSysClockFreq>
 8003980:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	085a      	lsrs	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	441a      	add	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	b29b      	uxth	r3, r3
 8003996:	61bb      	str	r3, [r7, #24]
        break;
 8003998:	e00e      	b.n	80039b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	61bb      	str	r3, [r7, #24]
        break;
 80039b0:	e002      	b.n	80039b8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
        break;
 80039b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b0f      	cmp	r3, #15
 80039bc:	d908      	bls.n	80039d0 <UART_SetConfig+0x530>
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d204      	bcs.n	80039d0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	e001      	b.n	80039d4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	01e84800 	.word	0x01e84800
 80039f0:	00f42400 	.word	0x00f42400

080039f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01a      	beq.n	8003b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d10a      	bne.n	8003b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b46:	f7fd fa35 	bl	8000fb4 <HAL_GetTick>
 8003b4a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d10e      	bne.n	8003b78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f82a 	bl	8003bc2 <UART_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e020      	b.n	8003bba <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d10e      	bne.n	8003ba4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f814 	bl	8003bc2 <UART_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e00a      	b.n	8003bba <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd2:	e05d      	b.n	8003c90 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d059      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bdc:	f7fd f9ea 	bl	8000fb4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d302      	bcc.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d11b      	bne.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e042      	b.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d02b      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c46:	d123      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c50:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c60:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e00f      	b.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d092      	beq.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cb8:	b084      	sub	sp, #16
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	f107 001c 	add.w	r0, r7, #28
 8003cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d120      	bne.n	8003d12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <USB_CoreInit+0xac>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d105      	bne.n	8003d06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa52 	bl	80041b0 <USB_CoreReset>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	73fb      	strb	r3, [r7, #15]
 8003d10:	e010      	b.n	8003d34 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa46 	bl	80041b0 <USB_CoreReset>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10b      	bne.n	8003d52 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f043 0206 	orr.w	r2, r3, #6
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d5e:	b004      	add	sp, #16
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	ffbdffbf 	.word	0xffbdffbf

08003d68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 0201 	bic.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d106      	bne.n	8003db6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	e00b      	b.n	8003dce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d106      	bne.n	8003dca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]
 8003dc8:	e001      	b.n	8003dce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e003      	b.n	8003dd6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003dce:	2032      	movs	r0, #50	; 0x32
 8003dd0:	f7fd f8fc 	bl	8000fcc <HAL_Delay>

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003de0:	b084      	sub	sp, #16
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	e009      	b.n	8003e14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	3340      	adds	r3, #64	; 0x40
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3301      	adds	r3, #1
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b0e      	cmp	r3, #14
 8003e18:	d9f2      	bls.n	8003e00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11c      	bne.n	8003e5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e2e:	f043 0302 	orr.w	r3, r3, #2
 8003e32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e005      	b.n	8003e66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e78:	4619      	mov	r1, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e80:	461a      	mov	r2, r3
 8003e82:	680b      	ldr	r3, [r1, #0]
 8003e84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10c      	bne.n	8003ea6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e92:	2100      	movs	r1, #0
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f959 	bl	800414c <USB_SetDevSpeed>
 8003e9a:	e018      	b.n	8003ece <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f954 	bl	800414c <USB_SetDevSpeed>
 8003ea4:	e013      	b.n	8003ece <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d10c      	bne.n	8003ec6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d104      	bne.n	8003ebc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f949 	bl	800414c <USB_SetDevSpeed>
 8003eba:	e008      	b.n	8003ece <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f944 	bl	800414c <USB_SetDevSpeed>
 8003ec4:	e003      	b.n	8003ece <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ec6:	2103      	movs	r1, #3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f93f 	bl	800414c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ece:	2110      	movs	r1, #16
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f8f3 	bl	80040bc <USB_FlushTxFifo>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f911 	bl	8004108 <USB_FlushRxFifo>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2300      	movs	r3, #0
 8003efa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f02:	461a      	mov	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2300      	movs	r3, #0
 8003f12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	e043      	b.n	8003fa2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f30:	d118      	bne.n	8003f64 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	461a      	mov	r2, r3
 8003f46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	e013      	b.n	8003f76 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e008      	b.n	8003f76 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	461a      	mov	r2, r3
 8003f72:	2300      	movs	r3, #0
 8003f74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	461a      	mov	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f94:	461a      	mov	r2, r3
 8003f96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d3b7      	bcc.n	8003f1a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	e043      	b.n	8004038 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fc6:	d118      	bne.n	8003ffa <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e013      	b.n	800400c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	e008      	b.n	800400c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	461a      	mov	r2, r3
 8004008:	2300      	movs	r3, #0
 800400a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	461a      	mov	r2, r3
 800401a:	2300      	movs	r3, #0
 800401c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402a:	461a      	mov	r2, r3
 800402c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004030:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	3301      	adds	r3, #1
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	429a      	cmp	r2, r3
 800403e:	d3b7      	bcc.n	8003fb0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800404e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004052:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004060:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f043 0210 	orr.w	r2, r3, #16
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <USB_DevInit+0x2d4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f043 0208 	orr.w	r2, r3, #8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d105      	bne.n	80040a4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <USB_DevInit+0x2d8>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040b0:	b004      	add	sp, #16
 80040b2:	4770      	bx	lr
 80040b4:	803c3800 	.word	0x803c3800
 80040b8:	40000004 	.word	0x40000004

080040bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3301      	adds	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a09      	ldr	r2, [pc, #36]	; (8004104 <USB_FlushTxFifo+0x48>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d901      	bls.n	80040e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e006      	b.n	80040f6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d0f0      	beq.n	80040d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	00030d40 	.word	0x00030d40

08004108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2210      	movs	r2, #16
 8004118:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3301      	adds	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <USB_FlushRxFifo+0x40>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e006      	b.n	800413a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b10      	cmp	r3, #16
 8004136:	d0f0      	beq.n	800411a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	00030d40 	.word	0x00030d40

0800414c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800419e:	2003      	movs	r0, #3
 80041a0:	f7fc ff14 	bl	8000fcc <HAL_Delay>

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3301      	adds	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a13      	ldr	r2, [pc, #76]	; (8004214 <USB_CoreReset+0x64>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e01b      	b.n	8004206 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	daf2      	bge.n	80041bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f043 0201 	orr.w	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3301      	adds	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <USB_CoreReset+0x64>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e006      	b.n	8004206 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b01      	cmp	r3, #1
 8004202:	d0f0      	beq.n	80041e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	00030d40 	.word	0x00030d40

08004218 <__errno>:
 8004218:	4b01      	ldr	r3, [pc, #4]	; (8004220 <__errno+0x8>)
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	2000000c 	.word	0x2000000c

08004224 <__libc_init_array>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4e0d      	ldr	r6, [pc, #52]	; (800425c <__libc_init_array+0x38>)
 8004228:	4c0d      	ldr	r4, [pc, #52]	; (8004260 <__libc_init_array+0x3c>)
 800422a:	1ba4      	subs	r4, r4, r6
 800422c:	10a4      	asrs	r4, r4, #2
 800422e:	2500      	movs	r5, #0
 8004230:	42a5      	cmp	r5, r4
 8004232:	d109      	bne.n	8004248 <__libc_init_array+0x24>
 8004234:	4e0b      	ldr	r6, [pc, #44]	; (8004264 <__libc_init_array+0x40>)
 8004236:	4c0c      	ldr	r4, [pc, #48]	; (8004268 <__libc_init_array+0x44>)
 8004238:	f002 fab8 	bl	80067ac <_init>
 800423c:	1ba4      	subs	r4, r4, r6
 800423e:	10a4      	asrs	r4, r4, #2
 8004240:	2500      	movs	r5, #0
 8004242:	42a5      	cmp	r5, r4
 8004244:	d105      	bne.n	8004252 <__libc_init_array+0x2e>
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800424c:	4798      	blx	r3
 800424e:	3501      	adds	r5, #1
 8004250:	e7ee      	b.n	8004230 <__libc_init_array+0xc>
 8004252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004256:	4798      	blx	r3
 8004258:	3501      	adds	r5, #1
 800425a:	e7f2      	b.n	8004242 <__libc_init_array+0x1e>
 800425c:	08006ac8 	.word	0x08006ac8
 8004260:	08006ac8 	.word	0x08006ac8
 8004264:	08006ac8 	.word	0x08006ac8
 8004268:	08006acc 	.word	0x08006acc

0800426c <memset>:
 800426c:	4402      	add	r2, r0
 800426e:	4603      	mov	r3, r0
 8004270:	4293      	cmp	r3, r2
 8004272:	d100      	bne.n	8004276 <memset+0xa>
 8004274:	4770      	bx	lr
 8004276:	f803 1b01 	strb.w	r1, [r3], #1
 800427a:	e7f9      	b.n	8004270 <memset+0x4>

0800427c <__cvt>:
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	ed2d 8b02 	vpush	{d8}
 8004282:	eeb0 8b40 	vmov.f64	d8, d0
 8004286:	b085      	sub	sp, #20
 8004288:	4617      	mov	r7, r2
 800428a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800428c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800428e:	ee18 2a90 	vmov	r2, s17
 8004292:	f025 0520 	bic.w	r5, r5, #32
 8004296:	2a00      	cmp	r2, #0
 8004298:	bfb6      	itet	lt
 800429a:	222d      	movlt	r2, #45	; 0x2d
 800429c:	2200      	movge	r2, #0
 800429e:	eeb1 8b40 	vneglt.f64	d8, d0
 80042a2:	2d46      	cmp	r5, #70	; 0x46
 80042a4:	460c      	mov	r4, r1
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	d004      	beq.n	80042b4 <__cvt+0x38>
 80042aa:	2d45      	cmp	r5, #69	; 0x45
 80042ac:	d100      	bne.n	80042b0 <__cvt+0x34>
 80042ae:	3401      	adds	r4, #1
 80042b0:	2102      	movs	r1, #2
 80042b2:	e000      	b.n	80042b6 <__cvt+0x3a>
 80042b4:	2103      	movs	r1, #3
 80042b6:	ab03      	add	r3, sp, #12
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	ab02      	add	r3, sp, #8
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	4622      	mov	r2, r4
 80042c0:	4633      	mov	r3, r6
 80042c2:	eeb0 0b48 	vmov.f64	d0, d8
 80042c6:	f000 fcb7 	bl	8004c38 <_dtoa_r>
 80042ca:	2d47      	cmp	r5, #71	; 0x47
 80042cc:	d101      	bne.n	80042d2 <__cvt+0x56>
 80042ce:	07fb      	lsls	r3, r7, #31
 80042d0:	d51e      	bpl.n	8004310 <__cvt+0x94>
 80042d2:	2d46      	cmp	r5, #70	; 0x46
 80042d4:	eb00 0304 	add.w	r3, r0, r4
 80042d8:	d10c      	bne.n	80042f4 <__cvt+0x78>
 80042da:	7802      	ldrb	r2, [r0, #0]
 80042dc:	2a30      	cmp	r2, #48	; 0x30
 80042de:	d107      	bne.n	80042f0 <__cvt+0x74>
 80042e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80042e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e8:	bf1c      	itt	ne
 80042ea:	f1c4 0401 	rsbne	r4, r4, #1
 80042ee:	6034      	strne	r4, [r6, #0]
 80042f0:	6832      	ldr	r2, [r6, #0]
 80042f2:	4413      	add	r3, r2
 80042f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	d007      	beq.n	800430e <__cvt+0x92>
 80042fe:	2130      	movs	r1, #48	; 0x30
 8004300:	9a03      	ldr	r2, [sp, #12]
 8004302:	429a      	cmp	r2, r3
 8004304:	d204      	bcs.n	8004310 <__cvt+0x94>
 8004306:	1c54      	adds	r4, r2, #1
 8004308:	9403      	str	r4, [sp, #12]
 800430a:	7011      	strb	r1, [r2, #0]
 800430c:	e7f8      	b.n	8004300 <__cvt+0x84>
 800430e:	9303      	str	r3, [sp, #12]
 8004310:	9b03      	ldr	r3, [sp, #12]
 8004312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004314:	1a1b      	subs	r3, r3, r0
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	b005      	add	sp, #20
 800431a:	ecbd 8b02 	vpop	{d8}
 800431e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004320 <__exponent>:
 8004320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004322:	2900      	cmp	r1, #0
 8004324:	4604      	mov	r4, r0
 8004326:	bfba      	itte	lt
 8004328:	4249      	neglt	r1, r1
 800432a:	232d      	movlt	r3, #45	; 0x2d
 800432c:	232b      	movge	r3, #43	; 0x2b
 800432e:	2909      	cmp	r1, #9
 8004330:	f804 2b02 	strb.w	r2, [r4], #2
 8004334:	7043      	strb	r3, [r0, #1]
 8004336:	dd20      	ble.n	800437a <__exponent+0x5a>
 8004338:	f10d 0307 	add.w	r3, sp, #7
 800433c:	461f      	mov	r7, r3
 800433e:	260a      	movs	r6, #10
 8004340:	fb91 f5f6 	sdiv	r5, r1, r6
 8004344:	fb06 1115 	mls	r1, r6, r5, r1
 8004348:	3130      	adds	r1, #48	; 0x30
 800434a:	2d09      	cmp	r5, #9
 800434c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004350:	f103 32ff 	add.w	r2, r3, #4294967295
 8004354:	4629      	mov	r1, r5
 8004356:	dc09      	bgt.n	800436c <__exponent+0x4c>
 8004358:	3130      	adds	r1, #48	; 0x30
 800435a:	3b02      	subs	r3, #2
 800435c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004360:	42bb      	cmp	r3, r7
 8004362:	4622      	mov	r2, r4
 8004364:	d304      	bcc.n	8004370 <__exponent+0x50>
 8004366:	1a10      	subs	r0, r2, r0
 8004368:	b003      	add	sp, #12
 800436a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436c:	4613      	mov	r3, r2
 800436e:	e7e7      	b.n	8004340 <__exponent+0x20>
 8004370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004374:	f804 2b01 	strb.w	r2, [r4], #1
 8004378:	e7f2      	b.n	8004360 <__exponent+0x40>
 800437a:	2330      	movs	r3, #48	; 0x30
 800437c:	4419      	add	r1, r3
 800437e:	7083      	strb	r3, [r0, #2]
 8004380:	1d02      	adds	r2, r0, #4
 8004382:	70c1      	strb	r1, [r0, #3]
 8004384:	e7ef      	b.n	8004366 <__exponent+0x46>
	...

08004388 <_printf_float>:
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	b08d      	sub	sp, #52	; 0x34
 800438e:	460c      	mov	r4, r1
 8004390:	4616      	mov	r6, r2
 8004392:	461f      	mov	r7, r3
 8004394:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004398:	4605      	mov	r5, r0
 800439a:	f001 fa63 	bl	8005864 <_localeconv_r>
 800439e:	f8d0 b000 	ldr.w	fp, [r0]
 80043a2:	4658      	mov	r0, fp
 80043a4:	f7fb ff4c 	bl	8000240 <strlen>
 80043a8:	2300      	movs	r3, #0
 80043aa:	930a      	str	r3, [sp, #40]	; 0x28
 80043ac:	f8d8 3000 	ldr.w	r3, [r8]
 80043b0:	9005      	str	r0, [sp, #20]
 80043b2:	3307      	adds	r3, #7
 80043b4:	f023 0307 	bic.w	r3, r3, #7
 80043b8:	f103 0108 	add.w	r1, r3, #8
 80043bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	f8c8 1000 	str.w	r1, [r8]
 80043c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80043ce:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8004658 <_printf_float+0x2d0>
 80043d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80043d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80043da:	eeb4 6b47 	vcmp.f64	d6, d7
 80043de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e2:	dd24      	ble.n	800442e <_printf_float+0xa6>
 80043e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80043e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ec:	d502      	bpl.n	80043f4 <_printf_float+0x6c>
 80043ee:	232d      	movs	r3, #45	; 0x2d
 80043f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f4:	499a      	ldr	r1, [pc, #616]	; (8004660 <_printf_float+0x2d8>)
 80043f6:	4b9b      	ldr	r3, [pc, #620]	; (8004664 <_printf_float+0x2dc>)
 80043f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80043fc:	bf8c      	ite	hi
 80043fe:	4688      	movhi	r8, r1
 8004400:	4698      	movls	r8, r3
 8004402:	f022 0204 	bic.w	r2, r2, #4
 8004406:	2303      	movs	r3, #3
 8004408:	6123      	str	r3, [r4, #16]
 800440a:	6022      	str	r2, [r4, #0]
 800440c:	f04f 0a00 	mov.w	sl, #0
 8004410:	9700      	str	r7, [sp, #0]
 8004412:	4633      	mov	r3, r6
 8004414:	aa0b      	add	r2, sp, #44	; 0x2c
 8004416:	4621      	mov	r1, r4
 8004418:	4628      	mov	r0, r5
 800441a:	f000 f9e1 	bl	80047e0 <_printf_common>
 800441e:	3001      	adds	r0, #1
 8004420:	f040 8089 	bne.w	8004536 <_printf_float+0x1ae>
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	b00d      	add	sp, #52	; 0x34
 800442a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442e:	eeb4 0b40 	vcmp.f64	d0, d0
 8004432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004436:	d702      	bvc.n	800443e <_printf_float+0xb6>
 8004438:	498b      	ldr	r1, [pc, #556]	; (8004668 <_printf_float+0x2e0>)
 800443a:	4b8c      	ldr	r3, [pc, #560]	; (800466c <_printf_float+0x2e4>)
 800443c:	e7dc      	b.n	80043f8 <_printf_float+0x70>
 800443e:	6861      	ldr	r1, [r4, #4]
 8004440:	1c4b      	adds	r3, r1, #1
 8004442:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004446:	ab0a      	add	r3, sp, #40	; 0x28
 8004448:	a809      	add	r0, sp, #36	; 0x24
 800444a:	d13b      	bne.n	80044c4 <_printf_float+0x13c>
 800444c:	2106      	movs	r1, #6
 800444e:	6061      	str	r1, [r4, #4]
 8004450:	f04f 0c00 	mov.w	ip, #0
 8004454:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8004458:	e9cd 0900 	strd	r0, r9, [sp]
 800445c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004460:	6022      	str	r2, [r4, #0]
 8004462:	6861      	ldr	r1, [r4, #4]
 8004464:	4628      	mov	r0, r5
 8004466:	f7ff ff09 	bl	800427c <__cvt>
 800446a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800446e:	2b47      	cmp	r3, #71	; 0x47
 8004470:	4680      	mov	r8, r0
 8004472:	d109      	bne.n	8004488 <_printf_float+0x100>
 8004474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004476:	1cd8      	adds	r0, r3, #3
 8004478:	db02      	blt.n	8004480 <_printf_float+0xf8>
 800447a:	6862      	ldr	r2, [r4, #4]
 800447c:	4293      	cmp	r3, r2
 800447e:	dd47      	ble.n	8004510 <_printf_float+0x188>
 8004480:	f1a9 0902 	sub.w	r9, r9, #2
 8004484:	fa5f f989 	uxtb.w	r9, r9
 8004488:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800448c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800448e:	d824      	bhi.n	80044da <_printf_float+0x152>
 8004490:	3901      	subs	r1, #1
 8004492:	464a      	mov	r2, r9
 8004494:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004498:	9109      	str	r1, [sp, #36]	; 0x24
 800449a:	f7ff ff41 	bl	8004320 <__exponent>
 800449e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044a0:	1813      	adds	r3, r2, r0
 80044a2:	2a01      	cmp	r2, #1
 80044a4:	4682      	mov	sl, r0
 80044a6:	6123      	str	r3, [r4, #16]
 80044a8:	dc02      	bgt.n	80044b0 <_printf_float+0x128>
 80044aa:	6822      	ldr	r2, [r4, #0]
 80044ac:	07d1      	lsls	r1, r2, #31
 80044ae:	d501      	bpl.n	80044b4 <_printf_float+0x12c>
 80044b0:	3301      	adds	r3, #1
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0a9      	beq.n	8004410 <_printf_float+0x88>
 80044bc:	232d      	movs	r3, #45	; 0x2d
 80044be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c2:	e7a5      	b.n	8004410 <_printf_float+0x88>
 80044c4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80044c8:	f000 8178 	beq.w	80047bc <_printf_float+0x434>
 80044cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044d0:	d1be      	bne.n	8004450 <_printf_float+0xc8>
 80044d2:	2900      	cmp	r1, #0
 80044d4:	d1bc      	bne.n	8004450 <_printf_float+0xc8>
 80044d6:	2101      	movs	r1, #1
 80044d8:	e7b9      	b.n	800444e <_printf_float+0xc6>
 80044da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80044de:	d119      	bne.n	8004514 <_printf_float+0x18c>
 80044e0:	2900      	cmp	r1, #0
 80044e2:	6863      	ldr	r3, [r4, #4]
 80044e4:	dd0c      	ble.n	8004500 <_printf_float+0x178>
 80044e6:	6121      	str	r1, [r4, #16]
 80044e8:	b913      	cbnz	r3, 80044f0 <_printf_float+0x168>
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	07d2      	lsls	r2, r2, #31
 80044ee:	d502      	bpl.n	80044f6 <_printf_float+0x16e>
 80044f0:	3301      	adds	r3, #1
 80044f2:	440b      	add	r3, r1
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80044fa:	f04f 0a00 	mov.w	sl, #0
 80044fe:	e7d9      	b.n	80044b4 <_printf_float+0x12c>
 8004500:	b913      	cbnz	r3, 8004508 <_printf_float+0x180>
 8004502:	6822      	ldr	r2, [r4, #0]
 8004504:	07d0      	lsls	r0, r2, #31
 8004506:	d501      	bpl.n	800450c <_printf_float+0x184>
 8004508:	3302      	adds	r3, #2
 800450a:	e7f3      	b.n	80044f4 <_printf_float+0x16c>
 800450c:	2301      	movs	r3, #1
 800450e:	e7f1      	b.n	80044f4 <_printf_float+0x16c>
 8004510:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004514:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004518:	4293      	cmp	r3, r2
 800451a:	db05      	blt.n	8004528 <_printf_float+0x1a0>
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	07d1      	lsls	r1, r2, #31
 8004522:	d5e8      	bpl.n	80044f6 <_printf_float+0x16e>
 8004524:	3301      	adds	r3, #1
 8004526:	e7e5      	b.n	80044f4 <_printf_float+0x16c>
 8004528:	2b00      	cmp	r3, #0
 800452a:	bfd4      	ite	le
 800452c:	f1c3 0302 	rsble	r3, r3, #2
 8004530:	2301      	movgt	r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	e7de      	b.n	80044f4 <_printf_float+0x16c>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	055a      	lsls	r2, r3, #21
 800453a:	d407      	bmi.n	800454c <_printf_float+0x1c4>
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	4642      	mov	r2, r8
 8004540:	4631      	mov	r1, r6
 8004542:	4628      	mov	r0, r5
 8004544:	47b8      	blx	r7
 8004546:	3001      	adds	r0, #1
 8004548:	d12a      	bne.n	80045a0 <_printf_float+0x218>
 800454a:	e76b      	b.n	8004424 <_printf_float+0x9c>
 800454c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004550:	f240 80de 	bls.w	8004710 <_printf_float+0x388>
 8004554:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004558:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800455c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004560:	d133      	bne.n	80045ca <_printf_float+0x242>
 8004562:	2301      	movs	r3, #1
 8004564:	4a42      	ldr	r2, [pc, #264]	; (8004670 <_printf_float+0x2e8>)
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f af59 	beq.w	8004424 <_printf_float+0x9c>
 8004572:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004576:	429a      	cmp	r2, r3
 8004578:	db02      	blt.n	8004580 <_printf_float+0x1f8>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	07d8      	lsls	r0, r3, #31
 800457e:	d50f      	bpl.n	80045a0 <_printf_float+0x218>
 8004580:	9b05      	ldr	r3, [sp, #20]
 8004582:	465a      	mov	r2, fp
 8004584:	4631      	mov	r1, r6
 8004586:	4628      	mov	r0, r5
 8004588:	47b8      	blx	r7
 800458a:	3001      	adds	r0, #1
 800458c:	f43f af4a 	beq.w	8004424 <_printf_float+0x9c>
 8004590:	f04f 0800 	mov.w	r8, #0
 8004594:	f104 091a 	add.w	r9, r4, #26
 8004598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800459a:	3b01      	subs	r3, #1
 800459c:	4543      	cmp	r3, r8
 800459e:	dc09      	bgt.n	80045b4 <_printf_float+0x22c>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	079b      	lsls	r3, r3, #30
 80045a4:	f100 8105 	bmi.w	80047b2 <_printf_float+0x42a>
 80045a8:	68e0      	ldr	r0, [r4, #12]
 80045aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045ac:	4298      	cmp	r0, r3
 80045ae:	bfb8      	it	lt
 80045b0:	4618      	movlt	r0, r3
 80045b2:	e739      	b.n	8004428 <_printf_float+0xa0>
 80045b4:	2301      	movs	r3, #1
 80045b6:	464a      	mov	r2, r9
 80045b8:	4631      	mov	r1, r6
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f af30 	beq.w	8004424 <_printf_float+0x9c>
 80045c4:	f108 0801 	add.w	r8, r8, #1
 80045c8:	e7e6      	b.n	8004598 <_printf_float+0x210>
 80045ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	dc2b      	bgt.n	8004628 <_printf_float+0x2a0>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4a27      	ldr	r2, [pc, #156]	; (8004670 <_printf_float+0x2e8>)
 80045d4:	4631      	mov	r1, r6
 80045d6:	4628      	mov	r0, r5
 80045d8:	47b8      	blx	r7
 80045da:	3001      	adds	r0, #1
 80045dc:	f43f af22 	beq.w	8004424 <_printf_float+0x9c>
 80045e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e2:	b923      	cbnz	r3, 80045ee <_printf_float+0x266>
 80045e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045e6:	b913      	cbnz	r3, 80045ee <_printf_float+0x266>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	07d9      	lsls	r1, r3, #31
 80045ec:	d5d8      	bpl.n	80045a0 <_printf_float+0x218>
 80045ee:	9b05      	ldr	r3, [sp, #20]
 80045f0:	465a      	mov	r2, fp
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	47b8      	blx	r7
 80045f8:	3001      	adds	r0, #1
 80045fa:	f43f af13 	beq.w	8004424 <_printf_float+0x9c>
 80045fe:	f04f 0900 	mov.w	r9, #0
 8004602:	f104 0a1a 	add.w	sl, r4, #26
 8004606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004608:	425b      	negs	r3, r3
 800460a:	454b      	cmp	r3, r9
 800460c:	dc01      	bgt.n	8004612 <_printf_float+0x28a>
 800460e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004610:	e795      	b.n	800453e <_printf_float+0x1b6>
 8004612:	2301      	movs	r3, #1
 8004614:	4652      	mov	r2, sl
 8004616:	4631      	mov	r1, r6
 8004618:	4628      	mov	r0, r5
 800461a:	47b8      	blx	r7
 800461c:	3001      	adds	r0, #1
 800461e:	f43f af01 	beq.w	8004424 <_printf_float+0x9c>
 8004622:	f109 0901 	add.w	r9, r9, #1
 8004626:	e7ee      	b.n	8004606 <_printf_float+0x27e>
 8004628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800462a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800462c:	429a      	cmp	r2, r3
 800462e:	bfa8      	it	ge
 8004630:	461a      	movge	r2, r3
 8004632:	2a00      	cmp	r2, #0
 8004634:	4691      	mov	r9, r2
 8004636:	dd07      	ble.n	8004648 <_printf_float+0x2c0>
 8004638:	4613      	mov	r3, r2
 800463a:	4631      	mov	r1, r6
 800463c:	4642      	mov	r2, r8
 800463e:	4628      	mov	r0, r5
 8004640:	47b8      	blx	r7
 8004642:	3001      	adds	r0, #1
 8004644:	f43f aeee 	beq.w	8004424 <_printf_float+0x9c>
 8004648:	f104 031a 	add.w	r3, r4, #26
 800464c:	f04f 0a00 	mov.w	sl, #0
 8004650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004654:	9307      	str	r3, [sp, #28]
 8004656:	e017      	b.n	8004688 <_printf_float+0x300>
 8004658:	ffffffff 	.word	0xffffffff
 800465c:	7fefffff 	.word	0x7fefffff
 8004660:	08006804 	.word	0x08006804
 8004664:	08006800 	.word	0x08006800
 8004668:	0800680c 	.word	0x0800680c
 800466c:	08006808 	.word	0x08006808
 8004670:	08006810 	.word	0x08006810
 8004674:	2301      	movs	r3, #1
 8004676:	9a07      	ldr	r2, [sp, #28]
 8004678:	4631      	mov	r1, r6
 800467a:	4628      	mov	r0, r5
 800467c:	47b8      	blx	r7
 800467e:	3001      	adds	r0, #1
 8004680:	f43f aed0 	beq.w	8004424 <_printf_float+0x9c>
 8004684:	f10a 0a01 	add.w	sl, sl, #1
 8004688:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800468a:	9306      	str	r3, [sp, #24]
 800468c:	eba3 0309 	sub.w	r3, r3, r9
 8004690:	4553      	cmp	r3, sl
 8004692:	dcef      	bgt.n	8004674 <_printf_float+0x2ec>
 8004694:	9b06      	ldr	r3, [sp, #24]
 8004696:	4498      	add	r8, r3
 8004698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800469c:	429a      	cmp	r2, r3
 800469e:	db15      	blt.n	80046cc <_printf_float+0x344>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	07da      	lsls	r2, r3, #31
 80046a4:	d412      	bmi.n	80046cc <_printf_float+0x344>
 80046a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046a8:	9a06      	ldr	r2, [sp, #24]
 80046aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046ac:	1a9a      	subs	r2, r3, r2
 80046ae:	eba3 0a01 	sub.w	sl, r3, r1
 80046b2:	4592      	cmp	sl, r2
 80046b4:	bfa8      	it	ge
 80046b6:	4692      	movge	sl, r2
 80046b8:	f1ba 0f00 	cmp.w	sl, #0
 80046bc:	dc0e      	bgt.n	80046dc <_printf_float+0x354>
 80046be:	f04f 0800 	mov.w	r8, #0
 80046c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80046c6:	f104 091a 	add.w	r9, r4, #26
 80046ca:	e019      	b.n	8004700 <_printf_float+0x378>
 80046cc:	9b05      	ldr	r3, [sp, #20]
 80046ce:	465a      	mov	r2, fp
 80046d0:	4631      	mov	r1, r6
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	d1e5      	bne.n	80046a6 <_printf_float+0x31e>
 80046da:	e6a3      	b.n	8004424 <_printf_float+0x9c>
 80046dc:	4653      	mov	r3, sl
 80046de:	4642      	mov	r2, r8
 80046e0:	4631      	mov	r1, r6
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	d1e9      	bne.n	80046be <_printf_float+0x336>
 80046ea:	e69b      	b.n	8004424 <_printf_float+0x9c>
 80046ec:	2301      	movs	r3, #1
 80046ee:	464a      	mov	r2, r9
 80046f0:	4631      	mov	r1, r6
 80046f2:	4628      	mov	r0, r5
 80046f4:	47b8      	blx	r7
 80046f6:	3001      	adds	r0, #1
 80046f8:	f43f ae94 	beq.w	8004424 <_printf_float+0x9c>
 80046fc:	f108 0801 	add.w	r8, r8, #1
 8004700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	eba3 030a 	sub.w	r3, r3, sl
 800470a:	4543      	cmp	r3, r8
 800470c:	dcee      	bgt.n	80046ec <_printf_float+0x364>
 800470e:	e747      	b.n	80045a0 <_printf_float+0x218>
 8004710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004712:	2a01      	cmp	r2, #1
 8004714:	dc01      	bgt.n	800471a <_printf_float+0x392>
 8004716:	07db      	lsls	r3, r3, #31
 8004718:	d539      	bpl.n	800478e <_printf_float+0x406>
 800471a:	2301      	movs	r3, #1
 800471c:	4642      	mov	r2, r8
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	47b8      	blx	r7
 8004724:	3001      	adds	r0, #1
 8004726:	f43f ae7d 	beq.w	8004424 <_printf_float+0x9c>
 800472a:	9b05      	ldr	r3, [sp, #20]
 800472c:	465a      	mov	r2, fp
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	47b8      	blx	r7
 8004734:	3001      	adds	r0, #1
 8004736:	f108 0801 	add.w	r8, r8, #1
 800473a:	f43f ae73 	beq.w	8004424 <_printf_float+0x9c>
 800473e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004744:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004750:	d018      	beq.n	8004784 <_printf_float+0x3fc>
 8004752:	4642      	mov	r2, r8
 8004754:	4631      	mov	r1, r6
 8004756:	4628      	mov	r0, r5
 8004758:	47b8      	blx	r7
 800475a:	3001      	adds	r0, #1
 800475c:	d10e      	bne.n	800477c <_printf_float+0x3f4>
 800475e:	e661      	b.n	8004424 <_printf_float+0x9c>
 8004760:	2301      	movs	r3, #1
 8004762:	464a      	mov	r2, r9
 8004764:	4631      	mov	r1, r6
 8004766:	4628      	mov	r0, r5
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f ae5a 	beq.w	8004424 <_printf_float+0x9c>
 8004770:	f108 0801 	add.w	r8, r8, #1
 8004774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	4543      	cmp	r3, r8
 800477a:	dcf1      	bgt.n	8004760 <_printf_float+0x3d8>
 800477c:	4653      	mov	r3, sl
 800477e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004782:	e6dd      	b.n	8004540 <_printf_float+0x1b8>
 8004784:	f04f 0800 	mov.w	r8, #0
 8004788:	f104 091a 	add.w	r9, r4, #26
 800478c:	e7f2      	b.n	8004774 <_printf_float+0x3ec>
 800478e:	2301      	movs	r3, #1
 8004790:	e7df      	b.n	8004752 <_printf_float+0x3ca>
 8004792:	2301      	movs	r3, #1
 8004794:	464a      	mov	r2, r9
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	f43f ae41 	beq.w	8004424 <_printf_float+0x9c>
 80047a2:	f108 0801 	add.w	r8, r8, #1
 80047a6:	68e3      	ldr	r3, [r4, #12]
 80047a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	4543      	cmp	r3, r8
 80047ae:	dcf0      	bgt.n	8004792 <_printf_float+0x40a>
 80047b0:	e6fa      	b.n	80045a8 <_printf_float+0x220>
 80047b2:	f04f 0800 	mov.w	r8, #0
 80047b6:	f104 0919 	add.w	r9, r4, #25
 80047ba:	e7f4      	b.n	80047a6 <_printf_float+0x41e>
 80047bc:	2900      	cmp	r1, #0
 80047be:	f43f ae8a 	beq.w	80044d6 <_printf_float+0x14e>
 80047c2:	f04f 0c00 	mov.w	ip, #0
 80047c6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80047ca:	e9cd 0900 	strd	r0, r9, [sp]
 80047ce:	6022      	str	r2, [r4, #0]
 80047d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047d4:	4628      	mov	r0, r5
 80047d6:	f7ff fd51 	bl	800427c <__cvt>
 80047da:	4680      	mov	r8, r0
 80047dc:	e64a      	b.n	8004474 <_printf_float+0xec>
 80047de:	bf00      	nop

080047e0 <_printf_common>:
 80047e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	4691      	mov	r9, r2
 80047e6:	461f      	mov	r7, r3
 80047e8:	688a      	ldr	r2, [r1, #8]
 80047ea:	690b      	ldr	r3, [r1, #16]
 80047ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f0:	4293      	cmp	r3, r2
 80047f2:	bfb8      	it	lt
 80047f4:	4613      	movlt	r3, r2
 80047f6:	f8c9 3000 	str.w	r3, [r9]
 80047fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047fe:	4606      	mov	r6, r0
 8004800:	460c      	mov	r4, r1
 8004802:	b112      	cbz	r2, 800480a <_printf_common+0x2a>
 8004804:	3301      	adds	r3, #1
 8004806:	f8c9 3000 	str.w	r3, [r9]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	0699      	lsls	r1, r3, #26
 800480e:	bf42      	ittt	mi
 8004810:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004814:	3302      	addmi	r3, #2
 8004816:	f8c9 3000 	strmi.w	r3, [r9]
 800481a:	6825      	ldr	r5, [r4, #0]
 800481c:	f015 0506 	ands.w	r5, r5, #6
 8004820:	d107      	bne.n	8004832 <_printf_common+0x52>
 8004822:	f104 0a19 	add.w	sl, r4, #25
 8004826:	68e3      	ldr	r3, [r4, #12]
 8004828:	f8d9 2000 	ldr.w	r2, [r9]
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	42ab      	cmp	r3, r5
 8004830:	dc28      	bgt.n	8004884 <_printf_common+0xa4>
 8004832:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	3300      	adds	r3, #0
 800483a:	bf18      	it	ne
 800483c:	2301      	movne	r3, #1
 800483e:	0692      	lsls	r2, r2, #26
 8004840:	d42d      	bmi.n	800489e <_printf_common+0xbe>
 8004842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004846:	4639      	mov	r1, r7
 8004848:	4630      	mov	r0, r6
 800484a:	47c0      	blx	r8
 800484c:	3001      	adds	r0, #1
 800484e:	d020      	beq.n	8004892 <_printf_common+0xb2>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	68e5      	ldr	r5, [r4, #12]
 8004854:	f8d9 2000 	ldr.w	r2, [r9]
 8004858:	f003 0306 	and.w	r3, r3, #6
 800485c:	2b04      	cmp	r3, #4
 800485e:	bf08      	it	eq
 8004860:	1aad      	subeq	r5, r5, r2
 8004862:	68a3      	ldr	r3, [r4, #8]
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	bf0c      	ite	eq
 8004868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800486c:	2500      	movne	r5, #0
 800486e:	4293      	cmp	r3, r2
 8004870:	bfc4      	itt	gt
 8004872:	1a9b      	subgt	r3, r3, r2
 8004874:	18ed      	addgt	r5, r5, r3
 8004876:	f04f 0900 	mov.w	r9, #0
 800487a:	341a      	adds	r4, #26
 800487c:	454d      	cmp	r5, r9
 800487e:	d11a      	bne.n	80048b6 <_printf_common+0xd6>
 8004880:	2000      	movs	r0, #0
 8004882:	e008      	b.n	8004896 <_printf_common+0xb6>
 8004884:	2301      	movs	r3, #1
 8004886:	4652      	mov	r2, sl
 8004888:	4639      	mov	r1, r7
 800488a:	4630      	mov	r0, r6
 800488c:	47c0      	blx	r8
 800488e:	3001      	adds	r0, #1
 8004890:	d103      	bne.n	800489a <_printf_common+0xba>
 8004892:	f04f 30ff 	mov.w	r0, #4294967295
 8004896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489a:	3501      	adds	r5, #1
 800489c:	e7c3      	b.n	8004826 <_printf_common+0x46>
 800489e:	18e1      	adds	r1, r4, r3
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	2030      	movs	r0, #48	; 0x30
 80048a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048a8:	4422      	add	r2, r4
 80048aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b2:	3302      	adds	r3, #2
 80048b4:	e7c5      	b.n	8004842 <_printf_common+0x62>
 80048b6:	2301      	movs	r3, #1
 80048b8:	4622      	mov	r2, r4
 80048ba:	4639      	mov	r1, r7
 80048bc:	4630      	mov	r0, r6
 80048be:	47c0      	blx	r8
 80048c0:	3001      	adds	r0, #1
 80048c2:	d0e6      	beq.n	8004892 <_printf_common+0xb2>
 80048c4:	f109 0901 	add.w	r9, r9, #1
 80048c8:	e7d8      	b.n	800487c <_printf_common+0x9c>
	...

080048cc <_printf_i>:
 80048cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048d4:	460c      	mov	r4, r1
 80048d6:	7e09      	ldrb	r1, [r1, #24]
 80048d8:	b085      	sub	sp, #20
 80048da:	296e      	cmp	r1, #110	; 0x6e
 80048dc:	4617      	mov	r7, r2
 80048de:	4606      	mov	r6, r0
 80048e0:	4698      	mov	r8, r3
 80048e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048e4:	f000 80b3 	beq.w	8004a4e <_printf_i+0x182>
 80048e8:	d822      	bhi.n	8004930 <_printf_i+0x64>
 80048ea:	2963      	cmp	r1, #99	; 0x63
 80048ec:	d036      	beq.n	800495c <_printf_i+0x90>
 80048ee:	d80a      	bhi.n	8004906 <_printf_i+0x3a>
 80048f0:	2900      	cmp	r1, #0
 80048f2:	f000 80b9 	beq.w	8004a68 <_printf_i+0x19c>
 80048f6:	2958      	cmp	r1, #88	; 0x58
 80048f8:	f000 8083 	beq.w	8004a02 <_printf_i+0x136>
 80048fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004900:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004904:	e032      	b.n	800496c <_printf_i+0xa0>
 8004906:	2964      	cmp	r1, #100	; 0x64
 8004908:	d001      	beq.n	800490e <_printf_i+0x42>
 800490a:	2969      	cmp	r1, #105	; 0x69
 800490c:	d1f6      	bne.n	80048fc <_printf_i+0x30>
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	6813      	ldr	r3, [r2, #0]
 8004912:	0605      	lsls	r5, r0, #24
 8004914:	f103 0104 	add.w	r1, r3, #4
 8004918:	d52a      	bpl.n	8004970 <_printf_i+0xa4>
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6011      	str	r1, [r2, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	da03      	bge.n	800492a <_printf_i+0x5e>
 8004922:	222d      	movs	r2, #45	; 0x2d
 8004924:	425b      	negs	r3, r3
 8004926:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800492a:	486f      	ldr	r0, [pc, #444]	; (8004ae8 <_printf_i+0x21c>)
 800492c:	220a      	movs	r2, #10
 800492e:	e039      	b.n	80049a4 <_printf_i+0xd8>
 8004930:	2973      	cmp	r1, #115	; 0x73
 8004932:	f000 809d 	beq.w	8004a70 <_printf_i+0x1a4>
 8004936:	d808      	bhi.n	800494a <_printf_i+0x7e>
 8004938:	296f      	cmp	r1, #111	; 0x6f
 800493a:	d020      	beq.n	800497e <_printf_i+0xb2>
 800493c:	2970      	cmp	r1, #112	; 0x70
 800493e:	d1dd      	bne.n	80048fc <_printf_i+0x30>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	f043 0320 	orr.w	r3, r3, #32
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	e003      	b.n	8004952 <_printf_i+0x86>
 800494a:	2975      	cmp	r1, #117	; 0x75
 800494c:	d017      	beq.n	800497e <_printf_i+0xb2>
 800494e:	2978      	cmp	r1, #120	; 0x78
 8004950:	d1d4      	bne.n	80048fc <_printf_i+0x30>
 8004952:	2378      	movs	r3, #120	; 0x78
 8004954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004958:	4864      	ldr	r0, [pc, #400]	; (8004aec <_printf_i+0x220>)
 800495a:	e055      	b.n	8004a08 <_printf_i+0x13c>
 800495c:	6813      	ldr	r3, [r2, #0]
 800495e:	1d19      	adds	r1, r3, #4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6011      	str	r1, [r2, #0]
 8004964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800496c:	2301      	movs	r3, #1
 800496e:	e08c      	b.n	8004a8a <_printf_i+0x1be>
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6011      	str	r1, [r2, #0]
 8004974:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004978:	bf18      	it	ne
 800497a:	b21b      	sxthne	r3, r3
 800497c:	e7cf      	b.n	800491e <_printf_i+0x52>
 800497e:	6813      	ldr	r3, [r2, #0]
 8004980:	6825      	ldr	r5, [r4, #0]
 8004982:	1d18      	adds	r0, r3, #4
 8004984:	6010      	str	r0, [r2, #0]
 8004986:	0628      	lsls	r0, r5, #24
 8004988:	d501      	bpl.n	800498e <_printf_i+0xc2>
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	e002      	b.n	8004994 <_printf_i+0xc8>
 800498e:	0668      	lsls	r0, r5, #25
 8004990:	d5fb      	bpl.n	800498a <_printf_i+0xbe>
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	4854      	ldr	r0, [pc, #336]	; (8004ae8 <_printf_i+0x21c>)
 8004996:	296f      	cmp	r1, #111	; 0x6f
 8004998:	bf14      	ite	ne
 800499a:	220a      	movne	r2, #10
 800499c:	2208      	moveq	r2, #8
 800499e:	2100      	movs	r1, #0
 80049a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049a4:	6865      	ldr	r5, [r4, #4]
 80049a6:	60a5      	str	r5, [r4, #8]
 80049a8:	2d00      	cmp	r5, #0
 80049aa:	f2c0 8095 	blt.w	8004ad8 <_printf_i+0x20c>
 80049ae:	6821      	ldr	r1, [r4, #0]
 80049b0:	f021 0104 	bic.w	r1, r1, #4
 80049b4:	6021      	str	r1, [r4, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d13d      	bne.n	8004a36 <_printf_i+0x16a>
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	f040 808e 	bne.w	8004adc <_printf_i+0x210>
 80049c0:	4665      	mov	r5, ip
 80049c2:	2a08      	cmp	r2, #8
 80049c4:	d10b      	bne.n	80049de <_printf_i+0x112>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	07db      	lsls	r3, r3, #31
 80049ca:	d508      	bpl.n	80049de <_printf_i+0x112>
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	bfde      	ittt	le
 80049d4:	2330      	movle	r3, #48	; 0x30
 80049d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049de:	ebac 0305 	sub.w	r3, ip, r5
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	f8cd 8000 	str.w	r8, [sp]
 80049e8:	463b      	mov	r3, r7
 80049ea:	aa03      	add	r2, sp, #12
 80049ec:	4621      	mov	r1, r4
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7ff fef6 	bl	80047e0 <_printf_common>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d14d      	bne.n	8004a94 <_printf_i+0x1c8>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	b005      	add	sp, #20
 80049fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a02:	4839      	ldr	r0, [pc, #228]	; (8004ae8 <_printf_i+0x21c>)
 8004a04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a08:	6813      	ldr	r3, [r2, #0]
 8004a0a:	6821      	ldr	r1, [r4, #0]
 8004a0c:	1d1d      	adds	r5, r3, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6015      	str	r5, [r2, #0]
 8004a12:	060a      	lsls	r2, r1, #24
 8004a14:	d50b      	bpl.n	8004a2e <_printf_i+0x162>
 8004a16:	07ca      	lsls	r2, r1, #31
 8004a18:	bf44      	itt	mi
 8004a1a:	f041 0120 	orrmi.w	r1, r1, #32
 8004a1e:	6021      	strmi	r1, [r4, #0]
 8004a20:	b91b      	cbnz	r3, 8004a2a <_printf_i+0x15e>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	f022 0220 	bic.w	r2, r2, #32
 8004a28:	6022      	str	r2, [r4, #0]
 8004a2a:	2210      	movs	r2, #16
 8004a2c:	e7b7      	b.n	800499e <_printf_i+0xd2>
 8004a2e:	064d      	lsls	r5, r1, #25
 8004a30:	bf48      	it	mi
 8004a32:	b29b      	uxthmi	r3, r3
 8004a34:	e7ef      	b.n	8004a16 <_printf_i+0x14a>
 8004a36:	4665      	mov	r5, ip
 8004a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a3c:	fb02 3311 	mls	r3, r2, r1, r3
 8004a40:	5cc3      	ldrb	r3, [r0, r3]
 8004a42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a46:	460b      	mov	r3, r1
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d1f5      	bne.n	8004a38 <_printf_i+0x16c>
 8004a4c:	e7b9      	b.n	80049c2 <_printf_i+0xf6>
 8004a4e:	6813      	ldr	r3, [r2, #0]
 8004a50:	6825      	ldr	r5, [r4, #0]
 8004a52:	6961      	ldr	r1, [r4, #20]
 8004a54:	1d18      	adds	r0, r3, #4
 8004a56:	6010      	str	r0, [r2, #0]
 8004a58:	0628      	lsls	r0, r5, #24
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	d501      	bpl.n	8004a62 <_printf_i+0x196>
 8004a5e:	6019      	str	r1, [r3, #0]
 8004a60:	e002      	b.n	8004a68 <_printf_i+0x19c>
 8004a62:	066a      	lsls	r2, r5, #25
 8004a64:	d5fb      	bpl.n	8004a5e <_printf_i+0x192>
 8004a66:	8019      	strh	r1, [r3, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6123      	str	r3, [r4, #16]
 8004a6c:	4665      	mov	r5, ip
 8004a6e:	e7b9      	b.n	80049e4 <_printf_i+0x118>
 8004a70:	6813      	ldr	r3, [r2, #0]
 8004a72:	1d19      	adds	r1, r3, #4
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	681d      	ldr	r5, [r3, #0]
 8004a78:	6862      	ldr	r2, [r4, #4]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f7fb fbe7 	bl	8000250 <memchr>
 8004a82:	b108      	cbz	r0, 8004a88 <_printf_i+0x1bc>
 8004a84:	1b40      	subs	r0, r0, r5
 8004a86:	6060      	str	r0, [r4, #4]
 8004a88:	6863      	ldr	r3, [r4, #4]
 8004a8a:	6123      	str	r3, [r4, #16]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a92:	e7a7      	b.n	80049e4 <_printf_i+0x118>
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	462a      	mov	r2, r5
 8004a98:	4639      	mov	r1, r7
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	47c0      	blx	r8
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	d0aa      	beq.n	80049f8 <_printf_i+0x12c>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	079b      	lsls	r3, r3, #30
 8004aa6:	d413      	bmi.n	8004ad0 <_printf_i+0x204>
 8004aa8:	68e0      	ldr	r0, [r4, #12]
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	4298      	cmp	r0, r3
 8004aae:	bfb8      	it	lt
 8004ab0:	4618      	movlt	r0, r3
 8004ab2:	e7a3      	b.n	80049fc <_printf_i+0x130>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	464a      	mov	r2, r9
 8004ab8:	4639      	mov	r1, r7
 8004aba:	4630      	mov	r0, r6
 8004abc:	47c0      	blx	r8
 8004abe:	3001      	adds	r0, #1
 8004ac0:	d09a      	beq.n	80049f8 <_printf_i+0x12c>
 8004ac2:	3501      	adds	r5, #1
 8004ac4:	68e3      	ldr	r3, [r4, #12]
 8004ac6:	9a03      	ldr	r2, [sp, #12]
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	42ab      	cmp	r3, r5
 8004acc:	dcf2      	bgt.n	8004ab4 <_printf_i+0x1e8>
 8004ace:	e7eb      	b.n	8004aa8 <_printf_i+0x1dc>
 8004ad0:	2500      	movs	r5, #0
 8004ad2:	f104 0919 	add.w	r9, r4, #25
 8004ad6:	e7f5      	b.n	8004ac4 <_printf_i+0x1f8>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1ac      	bne.n	8004a36 <_printf_i+0x16a>
 8004adc:	7803      	ldrb	r3, [r0, #0]
 8004ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ae2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae6:	e76c      	b.n	80049c2 <_printf_i+0xf6>
 8004ae8:	08006812 	.word	0x08006812
 8004aec:	08006823 	.word	0x08006823

08004af0 <iprintf>:
 8004af0:	b40f      	push	{r0, r1, r2, r3}
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <iprintf+0x2c>)
 8004af4:	b513      	push	{r0, r1, r4, lr}
 8004af6:	681c      	ldr	r4, [r3, #0]
 8004af8:	b124      	cbz	r4, 8004b04 <iprintf+0x14>
 8004afa:	69a3      	ldr	r3, [r4, #24]
 8004afc:	b913      	cbnz	r3, 8004b04 <iprintf+0x14>
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 fe26 	bl	8005750 <__sinit>
 8004b04:	ab05      	add	r3, sp, #20
 8004b06:	9a04      	ldr	r2, [sp, #16]
 8004b08:	68a1      	ldr	r1, [r4, #8]
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f001 fa85 	bl	800601c <_vfiprintf_r>
 8004b12:	b002      	add	sp, #8
 8004b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b18:	b004      	add	sp, #16
 8004b1a:	4770      	bx	lr
 8004b1c:	2000000c 	.word	0x2000000c

08004b20 <quorem>:
 8004b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	6903      	ldr	r3, [r0, #16]
 8004b26:	690c      	ldr	r4, [r1, #16]
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	4680      	mov	r8, r0
 8004b2c:	f2c0 8082 	blt.w	8004c34 <quorem+0x114>
 8004b30:	3c01      	subs	r4, #1
 8004b32:	f101 0714 	add.w	r7, r1, #20
 8004b36:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004b3a:	f100 0614 	add.w	r6, r0, #20
 8004b3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b46:	eb06 030c 	add.w	r3, r6, ip
 8004b4a:	3501      	adds	r5, #1
 8004b4c:	eb07 090c 	add.w	r9, r7, ip
 8004b50:	9301      	str	r3, [sp, #4]
 8004b52:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b56:	b395      	cbz	r5, 8004bbe <quorem+0x9e>
 8004b58:	f04f 0a00 	mov.w	sl, #0
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	46b6      	mov	lr, r6
 8004b60:	46d3      	mov	fp, sl
 8004b62:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b66:	b293      	uxth	r3, r2
 8004b68:	fb05 a303 	mla	r3, r5, r3, sl
 8004b6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	ebab 0303 	sub.w	r3, fp, r3
 8004b76:	0c12      	lsrs	r2, r2, #16
 8004b78:	f8de b000 	ldr.w	fp, [lr]
 8004b7c:	fb05 a202 	mla	r2, r5, r2, sl
 8004b80:	fa13 f38b 	uxtah	r3, r3, fp
 8004b84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b88:	fa1f fb82 	uxth.w	fp, r2
 8004b8c:	f8de 2000 	ldr.w	r2, [lr]
 8004b90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b9e:	4581      	cmp	r9, r0
 8004ba0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ba4:	f84e 3b04 	str.w	r3, [lr], #4
 8004ba8:	d2db      	bcs.n	8004b62 <quorem+0x42>
 8004baa:	f856 300c 	ldr.w	r3, [r6, ip]
 8004bae:	b933      	cbnz	r3, 8004bbe <quorem+0x9e>
 8004bb0:	9b01      	ldr	r3, [sp, #4]
 8004bb2:	3b04      	subs	r3, #4
 8004bb4:	429e      	cmp	r6, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	d330      	bcc.n	8004c1c <quorem+0xfc>
 8004bba:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	f001 f886 	bl	8005cd0 <__mcmp>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	db25      	blt.n	8004c14 <quorem+0xf4>
 8004bc8:	3501      	adds	r5, #1
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f04f 0c00 	mov.w	ip, #0
 8004bd0:	f857 2b04 	ldr.w	r2, [r7], #4
 8004bd4:	f8d0 e000 	ldr.w	lr, [r0]
 8004bd8:	b293      	uxth	r3, r2
 8004bda:	ebac 0303 	sub.w	r3, ip, r3
 8004bde:	0c12      	lsrs	r2, r2, #16
 8004be0:	fa13 f38e 	uxtah	r3, r3, lr
 8004be4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004be8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bf2:	45b9      	cmp	r9, r7
 8004bf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bf8:	f840 3b04 	str.w	r3, [r0], #4
 8004bfc:	d2e8      	bcs.n	8004bd0 <quorem+0xb0>
 8004bfe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c06:	b92a      	cbnz	r2, 8004c14 <quorem+0xf4>
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	429e      	cmp	r6, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	d30b      	bcc.n	8004c28 <quorem+0x108>
 8004c10:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c14:	4628      	mov	r0, r5
 8004c16:	b003      	add	sp, #12
 8004c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	3b04      	subs	r3, #4
 8004c20:	2a00      	cmp	r2, #0
 8004c22:	d1ca      	bne.n	8004bba <quorem+0x9a>
 8004c24:	3c01      	subs	r4, #1
 8004c26:	e7c5      	b.n	8004bb4 <quorem+0x94>
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	3b04      	subs	r3, #4
 8004c2c:	2a00      	cmp	r2, #0
 8004c2e:	d1ef      	bne.n	8004c10 <quorem+0xf0>
 8004c30:	3c01      	subs	r4, #1
 8004c32:	e7ea      	b.n	8004c0a <quorem+0xea>
 8004c34:	2000      	movs	r0, #0
 8004c36:	e7ee      	b.n	8004c16 <quorem+0xf6>

08004c38 <_dtoa_r>:
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	ec57 6b10 	vmov	r6, r7, d0
 8004c40:	b095      	sub	sp, #84	; 0x54
 8004c42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c44:	9108      	str	r1, [sp, #32]
 8004c46:	4604      	mov	r4, r0
 8004c48:	920a      	str	r2, [sp, #40]	; 0x28
 8004c4a:	9311      	str	r3, [sp, #68]	; 0x44
 8004c4c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004c50:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004c54:	b93d      	cbnz	r5, 8004c66 <_dtoa_r+0x2e>
 8004c56:	2010      	movs	r0, #16
 8004c58:	f000 fe12 	bl	8005880 <malloc>
 8004c5c:	6260      	str	r0, [r4, #36]	; 0x24
 8004c5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c62:	6005      	str	r5, [r0, #0]
 8004c64:	60c5      	str	r5, [r0, #12]
 8004c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c68:	6819      	ldr	r1, [r3, #0]
 8004c6a:	b151      	cbz	r1, 8004c82 <_dtoa_r+0x4a>
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	604a      	str	r2, [r1, #4]
 8004c70:	2301      	movs	r3, #1
 8004c72:	4093      	lsls	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
 8004c76:	4620      	mov	r0, r4
 8004c78:	f000 fe49 	bl	800590e <_Bfree>
 8004c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	1e3b      	subs	r3, r7, #0
 8004c84:	bfb9      	ittee	lt
 8004c86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c8a:	9303      	strlt	r3, [sp, #12]
 8004c8c:	2300      	movge	r3, #0
 8004c8e:	f8c8 3000 	strge.w	r3, [r8]
 8004c92:	9d03      	ldr	r5, [sp, #12]
 8004c94:	4bac      	ldr	r3, [pc, #688]	; (8004f48 <_dtoa_r+0x310>)
 8004c96:	bfbc      	itt	lt
 8004c98:	2201      	movlt	r2, #1
 8004c9a:	f8c8 2000 	strlt.w	r2, [r8]
 8004c9e:	43ab      	bics	r3, r5
 8004ca0:	d11b      	bne.n	8004cda <_dtoa_r+0xa2>
 8004ca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004ca4:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	9b02      	ldr	r3, [sp, #8]
 8004cac:	b923      	cbnz	r3, 8004cb8 <_dtoa_r+0x80>
 8004cae:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	f000 84dd 	beq.w	8005672 <_dtoa_r+0xa3a>
 8004cb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004cba:	b953      	cbnz	r3, 8004cd2 <_dtoa_r+0x9a>
 8004cbc:	4ba3      	ldr	r3, [pc, #652]	; (8004f4c <_dtoa_r+0x314>)
 8004cbe:	e020      	b.n	8004d02 <_dtoa_r+0xca>
 8004cc0:	4ba3      	ldr	r3, [pc, #652]	; (8004f50 <_dtoa_r+0x318>)
 8004cc2:	9304      	str	r3, [sp, #16]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	9804      	ldr	r0, [sp, #16]
 8004ccc:	b015      	add	sp, #84	; 0x54
 8004cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd2:	4b9e      	ldr	r3, [pc, #632]	; (8004f4c <_dtoa_r+0x314>)
 8004cd4:	9304      	str	r3, [sp, #16]
 8004cd6:	3303      	adds	r3, #3
 8004cd8:	e7f5      	b.n	8004cc6 <_dtoa_r+0x8e>
 8004cda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004cea:	d10c      	bne.n	8004d06 <_dtoa_r+0xce>
 8004cec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004cee:	2301      	movs	r3, #1
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 84b9 	beq.w	800566c <_dtoa_r+0xa34>
 8004cfa:	4b96      	ldr	r3, [pc, #600]	; (8004f54 <_dtoa_r+0x31c>)
 8004cfc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	9304      	str	r3, [sp, #16]
 8004d04:	e7e1      	b.n	8004cca <_dtoa_r+0x92>
 8004d06:	a913      	add	r1, sp, #76	; 0x4c
 8004d08:	aa12      	add	r2, sp, #72	; 0x48
 8004d0a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f001 f855 	bl	8005dbe <__d2b>
 8004d14:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8004d18:	9001      	str	r0, [sp, #4]
 8004d1a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004d1c:	2e00      	cmp	r6, #0
 8004d1e:	d046      	beq.n	8004dae <_dtoa_r+0x176>
 8004d20:	9805      	ldr	r0, [sp, #20]
 8004d22:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8004d26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d2a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8004d2e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d32:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8004d36:	2700      	movs	r7, #0
 8004d38:	ee07 aa90 	vmov	s15, sl
 8004d3c:	ec43 2b16 	vmov	d6, r2, r3
 8004d40:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8004d44:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8004f30 <_dtoa_r+0x2f8>
 8004d48:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8004d4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d50:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8004f38 <_dtoa_r+0x300>
 8004d54:	eea7 6b04 	vfma.f64	d6, d7, d4
 8004d58:	eeb0 7b46 	vmov.f64	d7, d6
 8004d5c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8004f40 <_dtoa_r+0x308>
 8004d60:	eea5 7b06 	vfma.f64	d7, d5, d6
 8004d64:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004d68:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d70:	ee16 ba90 	vmov	fp, s13
 8004d74:	d508      	bpl.n	8004d88 <_dtoa_r+0x150>
 8004d76:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004d7a:	eeb4 6b47 	vcmp.f64	d6, d7
 8004d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d82:	bf18      	it	ne
 8004d84:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004d88:	f1bb 0f16 	cmp.w	fp, #22
 8004d8c:	d834      	bhi.n	8004df8 <_dtoa_r+0x1c0>
 8004d8e:	4b72      	ldr	r3, [pc, #456]	; (8004f58 <_dtoa_r+0x320>)
 8004d90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004d94:	ed93 7b00 	vldr	d7, [r3]
 8004d98:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004d9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da4:	dd01      	ble.n	8004daa <_dtoa_r+0x172>
 8004da6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004daa:	2300      	movs	r3, #0
 8004dac:	e025      	b.n	8004dfa <_dtoa_r+0x1c2>
 8004dae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004db0:	eb01 0a03 	add.w	sl, r1, r3
 8004db4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	dd17      	ble.n	8004dec <_dtoa_r+0x1b4>
 8004dbc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004dc0:	9a02      	ldr	r2, [sp, #8]
 8004dc2:	409d      	lsls	r5, r3
 8004dc4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dcc:	432b      	orrs	r3, r5
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dda:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004dde:	9805      	ldr	r0, [sp, #20]
 8004de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004de4:	2701      	movs	r7, #1
 8004de6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8004dea:	e7a5      	b.n	8004d38 <_dtoa_r+0x100>
 8004dec:	9a02      	ldr	r2, [sp, #8]
 8004dee:	f1c3 0320 	rsb	r3, r3, #32
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	e7ea      	b.n	8004dce <_dtoa_r+0x196>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	eba1 0a0a 	sub.w	sl, r1, sl
 8004dfe:	9310      	str	r3, [sp, #64]	; 0x40
 8004e00:	f1ba 0301 	subs.w	r3, sl, #1
 8004e04:	9307      	str	r3, [sp, #28]
 8004e06:	bf43      	ittte	mi
 8004e08:	2300      	movmi	r3, #0
 8004e0a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8004e0e:	9307      	strmi	r3, [sp, #28]
 8004e10:	f04f 0a00 	movpl.w	sl, #0
 8004e14:	f1bb 0f00 	cmp.w	fp, #0
 8004e18:	db19      	blt.n	8004e4e <_dtoa_r+0x216>
 8004e1a:	9b07      	ldr	r3, [sp, #28]
 8004e1c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004e20:	445b      	add	r3, fp
 8004e22:	9307      	str	r3, [sp, #28]
 8004e24:	f04f 0800 	mov.w	r8, #0
 8004e28:	9b08      	ldr	r3, [sp, #32]
 8004e2a:	2b09      	cmp	r3, #9
 8004e2c:	d866      	bhi.n	8004efc <_dtoa_r+0x2c4>
 8004e2e:	2b05      	cmp	r3, #5
 8004e30:	bfc4      	itt	gt
 8004e32:	3b04      	subgt	r3, #4
 8004e34:	9308      	strgt	r3, [sp, #32]
 8004e36:	9b08      	ldr	r3, [sp, #32]
 8004e38:	f1a3 0302 	sub.w	r3, r3, #2
 8004e3c:	bfcc      	ite	gt
 8004e3e:	2500      	movgt	r5, #0
 8004e40:	2501      	movle	r5, #1
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d866      	bhi.n	8004f14 <_dtoa_r+0x2dc>
 8004e46:	e8df f003 	tbb	[pc, r3]
 8004e4a:	5755      	.short	0x5755
 8004e4c:	4909      	.short	0x4909
 8004e4e:	2300      	movs	r3, #0
 8004e50:	ebaa 0a0b 	sub.w	sl, sl, fp
 8004e54:	f1cb 0800 	rsb	r8, fp, #0
 8004e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e5a:	e7e5      	b.n	8004e28 <_dtoa_r+0x1f0>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	dd59      	ble.n	8004f1a <_dtoa_r+0x2e2>
 8004e66:	9306      	str	r3, [sp, #24]
 8004e68:	4699      	mov	r9, r3
 8004e6a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	6072      	str	r2, [r6, #4]
 8004e70:	2204      	movs	r2, #4
 8004e72:	f102 0014 	add.w	r0, r2, #20
 8004e76:	4298      	cmp	r0, r3
 8004e78:	6871      	ldr	r1, [r6, #4]
 8004e7a:	d953      	bls.n	8004f24 <_dtoa_r+0x2ec>
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f000 fd12 	bl	80058a6 <_Balloc>
 8004e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e84:	6030      	str	r0, [r6, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	9304      	str	r3, [sp, #16]
 8004e8a:	f1b9 0f0e 	cmp.w	r9, #14
 8004e8e:	f200 80c2 	bhi.w	8005016 <_dtoa_r+0x3de>
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	f000 80bf 	beq.w	8005016 <_dtoa_r+0x3de>
 8004e98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e9c:	f1bb 0f00 	cmp.w	fp, #0
 8004ea0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004ea4:	f340 80e6 	ble.w	8005074 <_dtoa_r+0x43c>
 8004ea8:	4a2b      	ldr	r2, [pc, #172]	; (8004f58 <_dtoa_r+0x320>)
 8004eaa:	f00b 030f 	and.w	r3, fp, #15
 8004eae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004eb2:	ed93 7b00 	vldr	d7, [r3]
 8004eb6:	ea4f 132b 	mov.w	r3, fp, asr #4
 8004eba:	06da      	lsls	r2, r3, #27
 8004ebc:	f140 80d8 	bpl.w	8005070 <_dtoa_r+0x438>
 8004ec0:	4a26      	ldr	r2, [pc, #152]	; (8004f5c <_dtoa_r+0x324>)
 8004ec2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8004ec6:	ed92 6b08 	vldr	d6, [r2, #32]
 8004eca:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8004ece:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	4920      	ldr	r1, [pc, #128]	; (8004f5c <_dtoa_r+0x324>)
 8004eda:	e04a      	b.n	8004f72 <_dtoa_r+0x33a>
 8004edc:	2301      	movs	r3, #1
 8004ede:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ee2:	445b      	add	r3, fp
 8004ee4:	f103 0901 	add.w	r9, r3, #1
 8004ee8:	9306      	str	r3, [sp, #24]
 8004eea:	464b      	mov	r3, r9
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	bfb8      	it	lt
 8004ef0:	2301      	movlt	r3, #1
 8004ef2:	e7ba      	b.n	8004e6a <_dtoa_r+0x232>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e7b2      	b.n	8004e5e <_dtoa_r+0x226>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e7f0      	b.n	8004ede <_dtoa_r+0x2a6>
 8004efc:	2501      	movs	r5, #1
 8004efe:	2300      	movs	r3, #0
 8004f00:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8004f04:	f04f 33ff 	mov.w	r3, #4294967295
 8004f08:	9306      	str	r3, [sp, #24]
 8004f0a:	4699      	mov	r9, r3
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2312      	movs	r3, #18
 8004f10:	920a      	str	r2, [sp, #40]	; 0x28
 8004f12:	e7aa      	b.n	8004e6a <_dtoa_r+0x232>
 8004f14:	2301      	movs	r3, #1
 8004f16:	9309      	str	r3, [sp, #36]	; 0x24
 8004f18:	e7f4      	b.n	8004f04 <_dtoa_r+0x2cc>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	9306      	str	r3, [sp, #24]
 8004f1e:	4699      	mov	r9, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	e7f5      	b.n	8004f10 <_dtoa_r+0x2d8>
 8004f24:	3101      	adds	r1, #1
 8004f26:	6071      	str	r1, [r6, #4]
 8004f28:	0052      	lsls	r2, r2, #1
 8004f2a:	e7a2      	b.n	8004e72 <_dtoa_r+0x23a>
 8004f2c:	f3af 8000 	nop.w
 8004f30:	636f4361 	.word	0x636f4361
 8004f34:	3fd287a7 	.word	0x3fd287a7
 8004f38:	8b60c8b3 	.word	0x8b60c8b3
 8004f3c:	3fc68a28 	.word	0x3fc68a28
 8004f40:	509f79fb 	.word	0x509f79fb
 8004f44:	3fd34413 	.word	0x3fd34413
 8004f48:	7ff00000 	.word	0x7ff00000
 8004f4c:	0800683d 	.word	0x0800683d
 8004f50:	08006834 	.word	0x08006834
 8004f54:	08006811 	.word	0x08006811
 8004f58:	080068d0 	.word	0x080068d0
 8004f5c:	080068a8 	.word	0x080068a8
 8004f60:	07de      	lsls	r6, r3, #31
 8004f62:	d504      	bpl.n	8004f6e <_dtoa_r+0x336>
 8004f64:	ed91 6b00 	vldr	d6, [r1]
 8004f68:	3201      	adds	r2, #1
 8004f6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f6e:	105b      	asrs	r3, r3, #1
 8004f70:	3108      	adds	r1, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f4      	bne.n	8004f60 <_dtoa_r+0x328>
 8004f76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004f7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004f7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80a7 	beq.w	80050d8 <_dtoa_r+0x4a0>
 8004f8a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004f8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9a:	f140 809d 	bpl.w	80050d8 <_dtoa_r+0x4a0>
 8004f9e:	f1b9 0f00 	cmp.w	r9, #0
 8004fa2:	f000 8099 	beq.w	80050d8 <_dtoa_r+0x4a0>
 8004fa6:	9b06      	ldr	r3, [sp, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dd30      	ble.n	800500e <_dtoa_r+0x3d6>
 8004fac:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004fb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004fb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004fb8:	9d06      	ldr	r5, [sp, #24]
 8004fba:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004fbe:	3201      	adds	r2, #1
 8004fc0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004fc4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004fc8:	ee07 2a90 	vmov	s15, r2
 8004fcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004fd0:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004fd4:	ed8d 5b02 	vstr	d5, [sp, #8]
 8004fd8:	9a03      	ldr	r2, [sp, #12]
 8004fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fde:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8004fe2:	2d00      	cmp	r5, #0
 8004fe4:	d17b      	bne.n	80050de <_dtoa_r+0x4a6>
 8004fe6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004fea:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004fee:	ec41 0b17 	vmov	d7, r0, r1
 8004ff2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffa:	f300 8253 	bgt.w	80054a4 <_dtoa_r+0x86c>
 8004ffe:	eeb1 7b47 	vneg.f64	d7, d7
 8005002:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500a:	f100 8249 	bmi.w	80054a0 <_dtoa_r+0x868>
 800500e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005012:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005018:	2b00      	cmp	r3, #0
 800501a:	f2c0 8119 	blt.w	8005250 <_dtoa_r+0x618>
 800501e:	f1bb 0f0e 	cmp.w	fp, #14
 8005022:	f300 8115 	bgt.w	8005250 <_dtoa_r+0x618>
 8005026:	4bc3      	ldr	r3, [pc, #780]	; (8005334 <_dtoa_r+0x6fc>)
 8005028:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800502c:	ed93 6b00 	vldr	d6, [r3]
 8005030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	f280 80ba 	bge.w	80051ac <_dtoa_r+0x574>
 8005038:	f1b9 0f00 	cmp.w	r9, #0
 800503c:	f300 80b6 	bgt.w	80051ac <_dtoa_r+0x574>
 8005040:	f040 822d 	bne.w	800549e <_dtoa_r+0x866>
 8005044:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005048:	ee26 6b07 	vmul.f64	d6, d6, d7
 800504c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005050:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005058:	464d      	mov	r5, r9
 800505a:	464f      	mov	r7, r9
 800505c:	f280 8204 	bge.w	8005468 <_dtoa_r+0x830>
 8005060:	9b04      	ldr	r3, [sp, #16]
 8005062:	9a04      	ldr	r2, [sp, #16]
 8005064:	1c5e      	adds	r6, r3, #1
 8005066:	2331      	movs	r3, #49	; 0x31
 8005068:	7013      	strb	r3, [r2, #0]
 800506a:	f10b 0b01 	add.w	fp, fp, #1
 800506e:	e1ff      	b.n	8005470 <_dtoa_r+0x838>
 8005070:	2202      	movs	r2, #2
 8005072:	e731      	b.n	8004ed8 <_dtoa_r+0x2a0>
 8005074:	d02e      	beq.n	80050d4 <_dtoa_r+0x49c>
 8005076:	f1cb 0300 	rsb	r3, fp, #0
 800507a:	4aae      	ldr	r2, [pc, #696]	; (8005334 <_dtoa_r+0x6fc>)
 800507c:	f003 010f 	and.w	r1, r3, #15
 8005080:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005084:	ed92 7b00 	vldr	d7, [r2]
 8005088:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800508c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005090:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005094:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8005098:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800509c:	49a6      	ldr	r1, [pc, #664]	; (8005338 <_dtoa_r+0x700>)
 800509e:	111b      	asrs	r3, r3, #4
 80050a0:	2000      	movs	r0, #0
 80050a2:	2202      	movs	r2, #2
 80050a4:	b93b      	cbnz	r3, 80050b6 <_dtoa_r+0x47e>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	f43f af6b 	beq.w	8004f82 <_dtoa_r+0x34a>
 80050ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050b4:	e765      	b.n	8004f82 <_dtoa_r+0x34a>
 80050b6:	07dd      	lsls	r5, r3, #31
 80050b8:	d509      	bpl.n	80050ce <_dtoa_r+0x496>
 80050ba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80050be:	ed91 7b00 	vldr	d7, [r1]
 80050c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80050c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80050ca:	3201      	adds	r2, #1
 80050cc:	2001      	movs	r0, #1
 80050ce:	105b      	asrs	r3, r3, #1
 80050d0:	3108      	adds	r1, #8
 80050d2:	e7e7      	b.n	80050a4 <_dtoa_r+0x46c>
 80050d4:	2202      	movs	r2, #2
 80050d6:	e754      	b.n	8004f82 <_dtoa_r+0x34a>
 80050d8:	465b      	mov	r3, fp
 80050da:	464d      	mov	r5, r9
 80050dc:	e770      	b.n	8004fc0 <_dtoa_r+0x388>
 80050de:	4a95      	ldr	r2, [pc, #596]	; (8005334 <_dtoa_r+0x6fc>)
 80050e0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80050e4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80050e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050ea:	ec41 0b17 	vmov	d7, r0, r1
 80050ee:	b35a      	cbz	r2, 8005148 <_dtoa_r+0x510>
 80050f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80050f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80050f8:	9e04      	ldr	r6, [sp, #16]
 80050fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80050fe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005102:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005106:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800510a:	ee14 2a90 	vmov	r2, s9
 800510e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005112:	3230      	adds	r2, #48	; 0x30
 8005114:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005118:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800511c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005120:	f806 2b01 	strb.w	r2, [r6], #1
 8005124:	d43b      	bmi.n	800519e <_dtoa_r+0x566>
 8005126:	ee32 5b46 	vsub.f64	d5, d2, d6
 800512a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800512e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005132:	d472      	bmi.n	800521a <_dtoa_r+0x5e2>
 8005134:	9a04      	ldr	r2, [sp, #16]
 8005136:	1ab2      	subs	r2, r6, r2
 8005138:	4295      	cmp	r5, r2
 800513a:	f77f af68 	ble.w	800500e <_dtoa_r+0x3d6>
 800513e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005142:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005146:	e7de      	b.n	8005106 <_dtoa_r+0x4ce>
 8005148:	9a04      	ldr	r2, [sp, #16]
 800514a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800514e:	1956      	adds	r6, r2, r5
 8005150:	4611      	mov	r1, r2
 8005152:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005156:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800515a:	ee14 2a90 	vmov	r2, s9
 800515e:	3230      	adds	r2, #48	; 0x30
 8005160:	f801 2b01 	strb.w	r2, [r1], #1
 8005164:	42b1      	cmp	r1, r6
 8005166:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800516a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800516e:	d11a      	bne.n	80051a6 <_dtoa_r+0x56e>
 8005170:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005174:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005178:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	dc4b      	bgt.n	800521a <_dtoa_r+0x5e2>
 8005182:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005186:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	f57f af3e 	bpl.w	800500e <_dtoa_r+0x3d6>
 8005192:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005196:	2a30      	cmp	r2, #48	; 0x30
 8005198:	f106 31ff 	add.w	r1, r6, #4294967295
 800519c:	d001      	beq.n	80051a2 <_dtoa_r+0x56a>
 800519e:	469b      	mov	fp, r3
 80051a0:	e02a      	b.n	80051f8 <_dtoa_r+0x5c0>
 80051a2:	460e      	mov	r6, r1
 80051a4:	e7f5      	b.n	8005192 <_dtoa_r+0x55a>
 80051a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80051aa:	e7d4      	b.n	8005156 <_dtoa_r+0x51e>
 80051ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051b0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80051b4:	9e04      	ldr	r6, [sp, #16]
 80051b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80051ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80051be:	ee15 3a10 	vmov	r3, s10
 80051c2:	3330      	adds	r3, #48	; 0x30
 80051c4:	f806 3b01 	strb.w	r3, [r6], #1
 80051c8:	9b04      	ldr	r3, [sp, #16]
 80051ca:	1af3      	subs	r3, r6, r3
 80051cc:	4599      	cmp	r9, r3
 80051ce:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80051d2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80051d6:	d133      	bne.n	8005240 <_dtoa_r+0x608>
 80051d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80051dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80051e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e4:	dc18      	bgt.n	8005218 <_dtoa_r+0x5e0>
 80051e6:	eeb4 7b46 	vcmp.f64	d7, d6
 80051ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ee:	d103      	bne.n	80051f8 <_dtoa_r+0x5c0>
 80051f0:	ee15 3a10 	vmov	r3, s10
 80051f4:	07db      	lsls	r3, r3, #31
 80051f6:	d40f      	bmi.n	8005218 <_dtoa_r+0x5e0>
 80051f8:	9901      	ldr	r1, [sp, #4]
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 fb87 	bl	800590e <_Bfree>
 8005200:	2300      	movs	r3, #0
 8005202:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005204:	7033      	strb	r3, [r6, #0]
 8005206:	f10b 0301 	add.w	r3, fp, #1
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800520e:	2b00      	cmp	r3, #0
 8005210:	f43f ad5b 	beq.w	8004cca <_dtoa_r+0x92>
 8005214:	601e      	str	r6, [r3, #0]
 8005216:	e558      	b.n	8004cca <_dtoa_r+0x92>
 8005218:	465b      	mov	r3, fp
 800521a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800521e:	2939      	cmp	r1, #57	; 0x39
 8005220:	f106 32ff 	add.w	r2, r6, #4294967295
 8005224:	d106      	bne.n	8005234 <_dtoa_r+0x5fc>
 8005226:	9904      	ldr	r1, [sp, #16]
 8005228:	4291      	cmp	r1, r2
 800522a:	d107      	bne.n	800523c <_dtoa_r+0x604>
 800522c:	2230      	movs	r2, #48	; 0x30
 800522e:	700a      	strb	r2, [r1, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	460a      	mov	r2, r1
 8005234:	7811      	ldrb	r1, [r2, #0]
 8005236:	3101      	adds	r1, #1
 8005238:	7011      	strb	r1, [r2, #0]
 800523a:	e7b0      	b.n	800519e <_dtoa_r+0x566>
 800523c:	4616      	mov	r6, r2
 800523e:	e7ec      	b.n	800521a <_dtoa_r+0x5e2>
 8005240:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005244:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524c:	d1b3      	bne.n	80051b6 <_dtoa_r+0x57e>
 800524e:	e7d3      	b.n	80051f8 <_dtoa_r+0x5c0>
 8005250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005252:	2a00      	cmp	r2, #0
 8005254:	f000 808d 	beq.w	8005372 <_dtoa_r+0x73a>
 8005258:	9a08      	ldr	r2, [sp, #32]
 800525a:	2a01      	cmp	r2, #1
 800525c:	dc72      	bgt.n	8005344 <_dtoa_r+0x70c>
 800525e:	2f00      	cmp	r7, #0
 8005260:	d06c      	beq.n	800533c <_dtoa_r+0x704>
 8005262:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005266:	4645      	mov	r5, r8
 8005268:	4656      	mov	r6, sl
 800526a:	9a07      	ldr	r2, [sp, #28]
 800526c:	2101      	movs	r1, #1
 800526e:	441a      	add	r2, r3
 8005270:	4620      	mov	r0, r4
 8005272:	449a      	add	sl, r3
 8005274:	9207      	str	r2, [sp, #28]
 8005276:	f000 fbea 	bl	8005a4e <__i2b>
 800527a:	4607      	mov	r7, r0
 800527c:	2e00      	cmp	r6, #0
 800527e:	dd0b      	ble.n	8005298 <_dtoa_r+0x660>
 8005280:	9b07      	ldr	r3, [sp, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	dd08      	ble.n	8005298 <_dtoa_r+0x660>
 8005286:	42b3      	cmp	r3, r6
 8005288:	9a07      	ldr	r2, [sp, #28]
 800528a:	bfa8      	it	ge
 800528c:	4633      	movge	r3, r6
 800528e:	ebaa 0a03 	sub.w	sl, sl, r3
 8005292:	1af6      	subs	r6, r6, r3
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	9307      	str	r3, [sp, #28]
 8005298:	f1b8 0f00 	cmp.w	r8, #0
 800529c:	d01d      	beq.n	80052da <_dtoa_r+0x6a2>
 800529e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d06a      	beq.n	800537a <_dtoa_r+0x742>
 80052a4:	b18d      	cbz	r5, 80052ca <_dtoa_r+0x692>
 80052a6:	4639      	mov	r1, r7
 80052a8:	462a      	mov	r2, r5
 80052aa:	4620      	mov	r0, r4
 80052ac:	f000 fc6e 	bl	8005b8c <__pow5mult>
 80052b0:	9a01      	ldr	r2, [sp, #4]
 80052b2:	4601      	mov	r1, r0
 80052b4:	4607      	mov	r7, r0
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 fbd2 	bl	8005a60 <__multiply>
 80052bc:	9901      	ldr	r1, [sp, #4]
 80052be:	900c      	str	r0, [sp, #48]	; 0x30
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 fb24 	bl	800590e <_Bfree>
 80052c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	ebb8 0205 	subs.w	r2, r8, r5
 80052ce:	d004      	beq.n	80052da <_dtoa_r+0x6a2>
 80052d0:	9901      	ldr	r1, [sp, #4]
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 fc5a 	bl	8005b8c <__pow5mult>
 80052d8:	9001      	str	r0, [sp, #4]
 80052da:	2101      	movs	r1, #1
 80052dc:	4620      	mov	r0, r4
 80052de:	f000 fbb6 	bl	8005a4e <__i2b>
 80052e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052e4:	4605      	mov	r5, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 81ca 	beq.w	8005680 <_dtoa_r+0xa48>
 80052ec:	461a      	mov	r2, r3
 80052ee:	4601      	mov	r1, r0
 80052f0:	4620      	mov	r0, r4
 80052f2:	f000 fc4b 	bl	8005b8c <__pow5mult>
 80052f6:	9b08      	ldr	r3, [sp, #32]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	4605      	mov	r5, r0
 80052fc:	dc44      	bgt.n	8005388 <_dtoa_r+0x750>
 80052fe:	9b02      	ldr	r3, [sp, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d13c      	bne.n	800537e <_dtoa_r+0x746>
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800530a:	2b00      	cmp	r3, #0
 800530c:	d137      	bne.n	800537e <_dtoa_r+0x746>
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005314:	0d1b      	lsrs	r3, r3, #20
 8005316:	051b      	lsls	r3, r3, #20
 8005318:	2b00      	cmp	r3, #0
 800531a:	d033      	beq.n	8005384 <_dtoa_r+0x74c>
 800531c:	9b07      	ldr	r3, [sp, #28]
 800531e:	3301      	adds	r3, #1
 8005320:	f10a 0a01 	add.w	sl, sl, #1
 8005324:	9307      	str	r3, [sp, #28]
 8005326:	f04f 0801 	mov.w	r8, #1
 800532a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800532c:	bb73      	cbnz	r3, 800538c <_dtoa_r+0x754>
 800532e:	2001      	movs	r0, #1
 8005330:	e034      	b.n	800539c <_dtoa_r+0x764>
 8005332:	bf00      	nop
 8005334:	080068d0 	.word	0x080068d0
 8005338:	080068a8 	.word	0x080068a8
 800533c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800533e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005342:	e790      	b.n	8005266 <_dtoa_r+0x62e>
 8005344:	f109 35ff 	add.w	r5, r9, #4294967295
 8005348:	45a8      	cmp	r8, r5
 800534a:	bfbf      	itttt	lt
 800534c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800534e:	eba5 0808 	sublt.w	r8, r5, r8
 8005352:	4443      	addlt	r3, r8
 8005354:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8005356:	bfb6      	itet	lt
 8005358:	46a8      	movlt	r8, r5
 800535a:	eba8 0505 	subge.w	r5, r8, r5
 800535e:	2500      	movlt	r5, #0
 8005360:	f1b9 0f00 	cmp.w	r9, #0
 8005364:	bfb9      	ittee	lt
 8005366:	ebaa 0609 	sublt.w	r6, sl, r9
 800536a:	2300      	movlt	r3, #0
 800536c:	4656      	movge	r6, sl
 800536e:	464b      	movge	r3, r9
 8005370:	e77b      	b.n	800526a <_dtoa_r+0x632>
 8005372:	4645      	mov	r5, r8
 8005374:	4656      	mov	r6, sl
 8005376:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005378:	e780      	b.n	800527c <_dtoa_r+0x644>
 800537a:	4642      	mov	r2, r8
 800537c:	e7a8      	b.n	80052d0 <_dtoa_r+0x698>
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	e7d2      	b.n	800532a <_dtoa_r+0x6f2>
 8005384:	4698      	mov	r8, r3
 8005386:	e7d0      	b.n	800532a <_dtoa_r+0x6f2>
 8005388:	f04f 0800 	mov.w	r8, #0
 800538c:	692b      	ldr	r3, [r5, #16]
 800538e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005392:	6918      	ldr	r0, [r3, #16]
 8005394:	f000 fb0d 	bl	80059b2 <__hi0bits>
 8005398:	f1c0 0020 	rsb	r0, r0, #32
 800539c:	9b07      	ldr	r3, [sp, #28]
 800539e:	4418      	add	r0, r3
 80053a0:	f010 001f 	ands.w	r0, r0, #31
 80053a4:	d047      	beq.n	8005436 <_dtoa_r+0x7fe>
 80053a6:	f1c0 0320 	rsb	r3, r0, #32
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	dd3b      	ble.n	8005426 <_dtoa_r+0x7ee>
 80053ae:	9b07      	ldr	r3, [sp, #28]
 80053b0:	f1c0 001c 	rsb	r0, r0, #28
 80053b4:	4482      	add	sl, r0
 80053b6:	4406      	add	r6, r0
 80053b8:	4403      	add	r3, r0
 80053ba:	9307      	str	r3, [sp, #28]
 80053bc:	f1ba 0f00 	cmp.w	sl, #0
 80053c0:	dd05      	ble.n	80053ce <_dtoa_r+0x796>
 80053c2:	4652      	mov	r2, sl
 80053c4:	9901      	ldr	r1, [sp, #4]
 80053c6:	4620      	mov	r0, r4
 80053c8:	f000 fc2e 	bl	8005c28 <__lshift>
 80053cc:	9001      	str	r0, [sp, #4]
 80053ce:	9b07      	ldr	r3, [sp, #28]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	dd05      	ble.n	80053e0 <_dtoa_r+0x7a8>
 80053d4:	4629      	mov	r1, r5
 80053d6:	461a      	mov	r2, r3
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 fc25 	bl	8005c28 <__lshift>
 80053de:	4605      	mov	r5, r0
 80053e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053e2:	b353      	cbz	r3, 800543a <_dtoa_r+0x802>
 80053e4:	4629      	mov	r1, r5
 80053e6:	9801      	ldr	r0, [sp, #4]
 80053e8:	f000 fc72 	bl	8005cd0 <__mcmp>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	da24      	bge.n	800543a <_dtoa_r+0x802>
 80053f0:	2300      	movs	r3, #0
 80053f2:	220a      	movs	r2, #10
 80053f4:	9901      	ldr	r1, [sp, #4]
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 faa0 	bl	800593c <__multadd>
 80053fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fe:	9001      	str	r0, [sp, #4]
 8005400:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8142 	beq.w	800568e <_dtoa_r+0xa56>
 800540a:	2300      	movs	r3, #0
 800540c:	4639      	mov	r1, r7
 800540e:	220a      	movs	r2, #10
 8005410:	4620      	mov	r0, r4
 8005412:	f000 fa93 	bl	800593c <__multadd>
 8005416:	9b06      	ldr	r3, [sp, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	4607      	mov	r7, r0
 800541c:	dc4b      	bgt.n	80054b6 <_dtoa_r+0x87e>
 800541e:	9b08      	ldr	r3, [sp, #32]
 8005420:	2b02      	cmp	r3, #2
 8005422:	dd48      	ble.n	80054b6 <_dtoa_r+0x87e>
 8005424:	e011      	b.n	800544a <_dtoa_r+0x812>
 8005426:	d0c9      	beq.n	80053bc <_dtoa_r+0x784>
 8005428:	9a07      	ldr	r2, [sp, #28]
 800542a:	331c      	adds	r3, #28
 800542c:	441a      	add	r2, r3
 800542e:	449a      	add	sl, r3
 8005430:	441e      	add	r6, r3
 8005432:	4613      	mov	r3, r2
 8005434:	e7c1      	b.n	80053ba <_dtoa_r+0x782>
 8005436:	4603      	mov	r3, r0
 8005438:	e7f6      	b.n	8005428 <_dtoa_r+0x7f0>
 800543a:	f1b9 0f00 	cmp.w	r9, #0
 800543e:	dc34      	bgt.n	80054aa <_dtoa_r+0x872>
 8005440:	9b08      	ldr	r3, [sp, #32]
 8005442:	2b02      	cmp	r3, #2
 8005444:	dd31      	ble.n	80054aa <_dtoa_r+0x872>
 8005446:	f8cd 9018 	str.w	r9, [sp, #24]
 800544a:	9b06      	ldr	r3, [sp, #24]
 800544c:	b963      	cbnz	r3, 8005468 <_dtoa_r+0x830>
 800544e:	4629      	mov	r1, r5
 8005450:	2205      	movs	r2, #5
 8005452:	4620      	mov	r0, r4
 8005454:	f000 fa72 	bl	800593c <__multadd>
 8005458:	4601      	mov	r1, r0
 800545a:	4605      	mov	r5, r0
 800545c:	9801      	ldr	r0, [sp, #4]
 800545e:	f000 fc37 	bl	8005cd0 <__mcmp>
 8005462:	2800      	cmp	r0, #0
 8005464:	f73f adfc 	bgt.w	8005060 <_dtoa_r+0x428>
 8005468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800546a:	9e04      	ldr	r6, [sp, #16]
 800546c:	ea6f 0b03 	mvn.w	fp, r3
 8005470:	f04f 0900 	mov.w	r9, #0
 8005474:	4629      	mov	r1, r5
 8005476:	4620      	mov	r0, r4
 8005478:	f000 fa49 	bl	800590e <_Bfree>
 800547c:	2f00      	cmp	r7, #0
 800547e:	f43f aebb 	beq.w	80051f8 <_dtoa_r+0x5c0>
 8005482:	f1b9 0f00 	cmp.w	r9, #0
 8005486:	d005      	beq.n	8005494 <_dtoa_r+0x85c>
 8005488:	45b9      	cmp	r9, r7
 800548a:	d003      	beq.n	8005494 <_dtoa_r+0x85c>
 800548c:	4649      	mov	r1, r9
 800548e:	4620      	mov	r0, r4
 8005490:	f000 fa3d 	bl	800590e <_Bfree>
 8005494:	4639      	mov	r1, r7
 8005496:	4620      	mov	r0, r4
 8005498:	f000 fa39 	bl	800590e <_Bfree>
 800549c:	e6ac      	b.n	80051f8 <_dtoa_r+0x5c0>
 800549e:	2500      	movs	r5, #0
 80054a0:	462f      	mov	r7, r5
 80054a2:	e7e1      	b.n	8005468 <_dtoa_r+0x830>
 80054a4:	469b      	mov	fp, r3
 80054a6:	462f      	mov	r7, r5
 80054a8:	e5da      	b.n	8005060 <_dtoa_r+0x428>
 80054aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ac:	f8cd 9018 	str.w	r9, [sp, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 80f3 	beq.w	800569c <_dtoa_r+0xa64>
 80054b6:	2e00      	cmp	r6, #0
 80054b8:	dd05      	ble.n	80054c6 <_dtoa_r+0x88e>
 80054ba:	4639      	mov	r1, r7
 80054bc:	4632      	mov	r2, r6
 80054be:	4620      	mov	r0, r4
 80054c0:	f000 fbb2 	bl	8005c28 <__lshift>
 80054c4:	4607      	mov	r7, r0
 80054c6:	f1b8 0f00 	cmp.w	r8, #0
 80054ca:	d04c      	beq.n	8005566 <_dtoa_r+0x92e>
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 f9e9 	bl	80058a6 <_Balloc>
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	3202      	adds	r2, #2
 80054d8:	4606      	mov	r6, r0
 80054da:	0092      	lsls	r2, r2, #2
 80054dc:	f107 010c 	add.w	r1, r7, #12
 80054e0:	300c      	adds	r0, #12
 80054e2:	f000 f9d5 	bl	8005890 <memcpy>
 80054e6:	2201      	movs	r2, #1
 80054e8:	4631      	mov	r1, r6
 80054ea:	4620      	mov	r0, r4
 80054ec:	f000 fb9c 	bl	8005c28 <__lshift>
 80054f0:	9b02      	ldr	r3, [sp, #8]
 80054f2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	46b9      	mov	r9, r7
 80054fc:	9307      	str	r3, [sp, #28]
 80054fe:	4607      	mov	r7, r0
 8005500:	4629      	mov	r1, r5
 8005502:	9801      	ldr	r0, [sp, #4]
 8005504:	f7ff fb0c 	bl	8004b20 <quorem>
 8005508:	4649      	mov	r1, r9
 800550a:	4606      	mov	r6, r0
 800550c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005510:	9801      	ldr	r0, [sp, #4]
 8005512:	f000 fbdd 	bl	8005cd0 <__mcmp>
 8005516:	463a      	mov	r2, r7
 8005518:	9002      	str	r0, [sp, #8]
 800551a:	4629      	mov	r1, r5
 800551c:	4620      	mov	r0, r4
 800551e:	f000 fbf1 	bl	8005d04 <__mdiff>
 8005522:	68c3      	ldr	r3, [r0, #12]
 8005524:	4602      	mov	r2, r0
 8005526:	bb03      	cbnz	r3, 800556a <_dtoa_r+0x932>
 8005528:	4601      	mov	r1, r0
 800552a:	9009      	str	r0, [sp, #36]	; 0x24
 800552c:	9801      	ldr	r0, [sp, #4]
 800552e:	f000 fbcf 	bl	8005cd0 <__mcmp>
 8005532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005534:	4603      	mov	r3, r0
 8005536:	4611      	mov	r1, r2
 8005538:	4620      	mov	r0, r4
 800553a:	9309      	str	r3, [sp, #36]	; 0x24
 800553c:	f000 f9e7 	bl	800590e <_Bfree>
 8005540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005542:	b9a3      	cbnz	r3, 800556e <_dtoa_r+0x936>
 8005544:	9a08      	ldr	r2, [sp, #32]
 8005546:	b992      	cbnz	r2, 800556e <_dtoa_r+0x936>
 8005548:	9a07      	ldr	r2, [sp, #28]
 800554a:	b982      	cbnz	r2, 800556e <_dtoa_r+0x936>
 800554c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005550:	d029      	beq.n	80055a6 <_dtoa_r+0x96e>
 8005552:	9b02      	ldr	r3, [sp, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	dd01      	ble.n	800555c <_dtoa_r+0x924>
 8005558:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800555c:	f10a 0601 	add.w	r6, sl, #1
 8005560:	f88a 8000 	strb.w	r8, [sl]
 8005564:	e786      	b.n	8005474 <_dtoa_r+0x83c>
 8005566:	4638      	mov	r0, r7
 8005568:	e7c2      	b.n	80054f0 <_dtoa_r+0x8b8>
 800556a:	2301      	movs	r3, #1
 800556c:	e7e3      	b.n	8005536 <_dtoa_r+0x8fe>
 800556e:	9a02      	ldr	r2, [sp, #8]
 8005570:	2a00      	cmp	r2, #0
 8005572:	db04      	blt.n	800557e <_dtoa_r+0x946>
 8005574:	d124      	bne.n	80055c0 <_dtoa_r+0x988>
 8005576:	9a08      	ldr	r2, [sp, #32]
 8005578:	bb12      	cbnz	r2, 80055c0 <_dtoa_r+0x988>
 800557a:	9a07      	ldr	r2, [sp, #28]
 800557c:	bb02      	cbnz	r2, 80055c0 <_dtoa_r+0x988>
 800557e:	2b00      	cmp	r3, #0
 8005580:	ddec      	ble.n	800555c <_dtoa_r+0x924>
 8005582:	2201      	movs	r2, #1
 8005584:	9901      	ldr	r1, [sp, #4]
 8005586:	4620      	mov	r0, r4
 8005588:	f000 fb4e 	bl	8005c28 <__lshift>
 800558c:	4629      	mov	r1, r5
 800558e:	9001      	str	r0, [sp, #4]
 8005590:	f000 fb9e 	bl	8005cd0 <__mcmp>
 8005594:	2800      	cmp	r0, #0
 8005596:	dc03      	bgt.n	80055a0 <_dtoa_r+0x968>
 8005598:	d1e0      	bne.n	800555c <_dtoa_r+0x924>
 800559a:	f018 0f01 	tst.w	r8, #1
 800559e:	d0dd      	beq.n	800555c <_dtoa_r+0x924>
 80055a0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055a4:	d1d8      	bne.n	8005558 <_dtoa_r+0x920>
 80055a6:	2339      	movs	r3, #57	; 0x39
 80055a8:	f10a 0601 	add.w	r6, sl, #1
 80055ac:	f88a 3000 	strb.w	r3, [sl]
 80055b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055b4:	2b39      	cmp	r3, #57	; 0x39
 80055b6:	f106 32ff 	add.w	r2, r6, #4294967295
 80055ba:	d04c      	beq.n	8005656 <_dtoa_r+0xa1e>
 80055bc:	3301      	adds	r3, #1
 80055be:	e051      	b.n	8005664 <_dtoa_r+0xa2c>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f10a 0601 	add.w	r6, sl, #1
 80055c6:	dd05      	ble.n	80055d4 <_dtoa_r+0x99c>
 80055c8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055cc:	d0eb      	beq.n	80055a6 <_dtoa_r+0x96e>
 80055ce:	f108 0801 	add.w	r8, r8, #1
 80055d2:	e7c5      	b.n	8005560 <_dtoa_r+0x928>
 80055d4:	9b04      	ldr	r3, [sp, #16]
 80055d6:	9a06      	ldr	r2, [sp, #24]
 80055d8:	f806 8c01 	strb.w	r8, [r6, #-1]
 80055dc:	1af3      	subs	r3, r6, r3
 80055de:	4293      	cmp	r3, r2
 80055e0:	d021      	beq.n	8005626 <_dtoa_r+0x9ee>
 80055e2:	2300      	movs	r3, #0
 80055e4:	220a      	movs	r2, #10
 80055e6:	9901      	ldr	r1, [sp, #4]
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 f9a7 	bl	800593c <__multadd>
 80055ee:	45b9      	cmp	r9, r7
 80055f0:	9001      	str	r0, [sp, #4]
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	f04f 020a 	mov.w	r2, #10
 80055fa:	4649      	mov	r1, r9
 80055fc:	4620      	mov	r0, r4
 80055fe:	d105      	bne.n	800560c <_dtoa_r+0x9d4>
 8005600:	f000 f99c 	bl	800593c <__multadd>
 8005604:	4681      	mov	r9, r0
 8005606:	4607      	mov	r7, r0
 8005608:	46b2      	mov	sl, r6
 800560a:	e779      	b.n	8005500 <_dtoa_r+0x8c8>
 800560c:	f000 f996 	bl	800593c <__multadd>
 8005610:	4639      	mov	r1, r7
 8005612:	4681      	mov	r9, r0
 8005614:	2300      	movs	r3, #0
 8005616:	220a      	movs	r2, #10
 8005618:	4620      	mov	r0, r4
 800561a:	f000 f98f 	bl	800593c <__multadd>
 800561e:	4607      	mov	r7, r0
 8005620:	e7f2      	b.n	8005608 <_dtoa_r+0x9d0>
 8005622:	f04f 0900 	mov.w	r9, #0
 8005626:	2201      	movs	r2, #1
 8005628:	9901      	ldr	r1, [sp, #4]
 800562a:	4620      	mov	r0, r4
 800562c:	f000 fafc 	bl	8005c28 <__lshift>
 8005630:	4629      	mov	r1, r5
 8005632:	9001      	str	r0, [sp, #4]
 8005634:	f000 fb4c 	bl	8005cd0 <__mcmp>
 8005638:	2800      	cmp	r0, #0
 800563a:	dcb9      	bgt.n	80055b0 <_dtoa_r+0x978>
 800563c:	d102      	bne.n	8005644 <_dtoa_r+0xa0c>
 800563e:	f018 0f01 	tst.w	r8, #1
 8005642:	d1b5      	bne.n	80055b0 <_dtoa_r+0x978>
 8005644:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005648:	2b30      	cmp	r3, #48	; 0x30
 800564a:	f106 32ff 	add.w	r2, r6, #4294967295
 800564e:	f47f af11 	bne.w	8005474 <_dtoa_r+0x83c>
 8005652:	4616      	mov	r6, r2
 8005654:	e7f6      	b.n	8005644 <_dtoa_r+0xa0c>
 8005656:	9b04      	ldr	r3, [sp, #16]
 8005658:	4293      	cmp	r3, r2
 800565a:	d105      	bne.n	8005668 <_dtoa_r+0xa30>
 800565c:	9a04      	ldr	r2, [sp, #16]
 800565e:	f10b 0b01 	add.w	fp, fp, #1
 8005662:	2331      	movs	r3, #49	; 0x31
 8005664:	7013      	strb	r3, [r2, #0]
 8005666:	e705      	b.n	8005474 <_dtoa_r+0x83c>
 8005668:	4616      	mov	r6, r2
 800566a:	e7a1      	b.n	80055b0 <_dtoa_r+0x978>
 800566c:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <_dtoa_r+0xa90>)
 800566e:	f7ff bb48 	b.w	8004d02 <_dtoa_r+0xca>
 8005672:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005674:	2b00      	cmp	r3, #0
 8005676:	f47f ab23 	bne.w	8004cc0 <_dtoa_r+0x88>
 800567a:	4b14      	ldr	r3, [pc, #80]	; (80056cc <_dtoa_r+0xa94>)
 800567c:	f7ff bb41 	b.w	8004d02 <_dtoa_r+0xca>
 8005680:	9b08      	ldr	r3, [sp, #32]
 8005682:	2b01      	cmp	r3, #1
 8005684:	f77f ae3b 	ble.w	80052fe <_dtoa_r+0x6c6>
 8005688:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800568c:	e64f      	b.n	800532e <_dtoa_r+0x6f6>
 800568e:	9b06      	ldr	r3, [sp, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	dc03      	bgt.n	800569c <_dtoa_r+0xa64>
 8005694:	9b08      	ldr	r3, [sp, #32]
 8005696:	2b02      	cmp	r3, #2
 8005698:	f73f aed7 	bgt.w	800544a <_dtoa_r+0x812>
 800569c:	9e04      	ldr	r6, [sp, #16]
 800569e:	9801      	ldr	r0, [sp, #4]
 80056a0:	4629      	mov	r1, r5
 80056a2:	f7ff fa3d 	bl	8004b20 <quorem>
 80056a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80056aa:	f806 8b01 	strb.w	r8, [r6], #1
 80056ae:	9b04      	ldr	r3, [sp, #16]
 80056b0:	9a06      	ldr	r2, [sp, #24]
 80056b2:	1af3      	subs	r3, r6, r3
 80056b4:	429a      	cmp	r2, r3
 80056b6:	ddb4      	ble.n	8005622 <_dtoa_r+0x9ea>
 80056b8:	2300      	movs	r3, #0
 80056ba:	220a      	movs	r2, #10
 80056bc:	9901      	ldr	r1, [sp, #4]
 80056be:	4620      	mov	r0, r4
 80056c0:	f000 f93c 	bl	800593c <__multadd>
 80056c4:	9001      	str	r0, [sp, #4]
 80056c6:	e7ea      	b.n	800569e <_dtoa_r+0xa66>
 80056c8:	08006810 	.word	0x08006810
 80056cc:	08006834 	.word	0x08006834

080056d0 <std>:
 80056d0:	2300      	movs	r3, #0
 80056d2:	b510      	push	{r4, lr}
 80056d4:	4604      	mov	r4, r0
 80056d6:	e9c0 3300 	strd	r3, r3, [r0]
 80056da:	6083      	str	r3, [r0, #8]
 80056dc:	8181      	strh	r1, [r0, #12]
 80056de:	6643      	str	r3, [r0, #100]	; 0x64
 80056e0:	81c2      	strh	r2, [r0, #14]
 80056e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056e6:	6183      	str	r3, [r0, #24]
 80056e8:	4619      	mov	r1, r3
 80056ea:	2208      	movs	r2, #8
 80056ec:	305c      	adds	r0, #92	; 0x5c
 80056ee:	f7fe fdbd 	bl	800426c <memset>
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <std+0x38>)
 80056f4:	6263      	str	r3, [r4, #36]	; 0x24
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <std+0x3c>)
 80056f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <std+0x40>)
 80056fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056fe:	4b05      	ldr	r3, [pc, #20]	; (8005714 <std+0x44>)
 8005700:	6224      	str	r4, [r4, #32]
 8005702:	6323      	str	r3, [r4, #48]	; 0x30
 8005704:	bd10      	pop	{r4, pc}
 8005706:	bf00      	nop
 8005708:	08006269 	.word	0x08006269
 800570c:	0800628b 	.word	0x0800628b
 8005710:	080062c3 	.word	0x080062c3
 8005714:	080062e7 	.word	0x080062e7

08005718 <_cleanup_r>:
 8005718:	4901      	ldr	r1, [pc, #4]	; (8005720 <_cleanup_r+0x8>)
 800571a:	f000 b885 	b.w	8005828 <_fwalk_reent>
 800571e:	bf00      	nop
 8005720:	080065c1 	.word	0x080065c1

08005724 <__sfmoreglue>:
 8005724:	b570      	push	{r4, r5, r6, lr}
 8005726:	1e4a      	subs	r2, r1, #1
 8005728:	2568      	movs	r5, #104	; 0x68
 800572a:	4355      	muls	r5, r2
 800572c:	460e      	mov	r6, r1
 800572e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005732:	f000 fbef 	bl	8005f14 <_malloc_r>
 8005736:	4604      	mov	r4, r0
 8005738:	b140      	cbz	r0, 800574c <__sfmoreglue+0x28>
 800573a:	2100      	movs	r1, #0
 800573c:	e9c0 1600 	strd	r1, r6, [r0]
 8005740:	300c      	adds	r0, #12
 8005742:	60a0      	str	r0, [r4, #8]
 8005744:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005748:	f7fe fd90 	bl	800426c <memset>
 800574c:	4620      	mov	r0, r4
 800574e:	bd70      	pop	{r4, r5, r6, pc}

08005750 <__sinit>:
 8005750:	6983      	ldr	r3, [r0, #24]
 8005752:	b510      	push	{r4, lr}
 8005754:	4604      	mov	r4, r0
 8005756:	bb33      	cbnz	r3, 80057a6 <__sinit+0x56>
 8005758:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800575c:	6503      	str	r3, [r0, #80]	; 0x50
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <__sinit+0x58>)
 8005760:	4a12      	ldr	r2, [pc, #72]	; (80057ac <__sinit+0x5c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6282      	str	r2, [r0, #40]	; 0x28
 8005766:	4298      	cmp	r0, r3
 8005768:	bf04      	itt	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	6183      	streq	r3, [r0, #24]
 800576e:	f000 f81f 	bl	80057b0 <__sfp>
 8005772:	6060      	str	r0, [r4, #4]
 8005774:	4620      	mov	r0, r4
 8005776:	f000 f81b 	bl	80057b0 <__sfp>
 800577a:	60a0      	str	r0, [r4, #8]
 800577c:	4620      	mov	r0, r4
 800577e:	f000 f817 	bl	80057b0 <__sfp>
 8005782:	2200      	movs	r2, #0
 8005784:	60e0      	str	r0, [r4, #12]
 8005786:	2104      	movs	r1, #4
 8005788:	6860      	ldr	r0, [r4, #4]
 800578a:	f7ff ffa1 	bl	80056d0 <std>
 800578e:	2201      	movs	r2, #1
 8005790:	2109      	movs	r1, #9
 8005792:	68a0      	ldr	r0, [r4, #8]
 8005794:	f7ff ff9c 	bl	80056d0 <std>
 8005798:	2202      	movs	r2, #2
 800579a:	2112      	movs	r1, #18
 800579c:	68e0      	ldr	r0, [r4, #12]
 800579e:	f7ff ff97 	bl	80056d0 <std>
 80057a2:	2301      	movs	r3, #1
 80057a4:	61a3      	str	r3, [r4, #24]
 80057a6:	bd10      	pop	{r4, pc}
 80057a8:	080067fc 	.word	0x080067fc
 80057ac:	08005719 	.word	0x08005719

080057b0 <__sfp>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <__sfp+0x70>)
 80057b4:	681e      	ldr	r6, [r3, #0]
 80057b6:	69b3      	ldr	r3, [r6, #24]
 80057b8:	4607      	mov	r7, r0
 80057ba:	b913      	cbnz	r3, 80057c2 <__sfp+0x12>
 80057bc:	4630      	mov	r0, r6
 80057be:	f7ff ffc7 	bl	8005750 <__sinit>
 80057c2:	3648      	adds	r6, #72	; 0x48
 80057c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	d503      	bpl.n	80057d4 <__sfp+0x24>
 80057cc:	6833      	ldr	r3, [r6, #0]
 80057ce:	b133      	cbz	r3, 80057de <__sfp+0x2e>
 80057d0:	6836      	ldr	r6, [r6, #0]
 80057d2:	e7f7      	b.n	80057c4 <__sfp+0x14>
 80057d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057d8:	b16d      	cbz	r5, 80057f6 <__sfp+0x46>
 80057da:	3468      	adds	r4, #104	; 0x68
 80057dc:	e7f4      	b.n	80057c8 <__sfp+0x18>
 80057de:	2104      	movs	r1, #4
 80057e0:	4638      	mov	r0, r7
 80057e2:	f7ff ff9f 	bl	8005724 <__sfmoreglue>
 80057e6:	6030      	str	r0, [r6, #0]
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d1f1      	bne.n	80057d0 <__sfp+0x20>
 80057ec:	230c      	movs	r3, #12
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	4604      	mov	r4, r0
 80057f2:	4620      	mov	r0, r4
 80057f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f6:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <__sfp+0x74>)
 80057f8:	6665      	str	r5, [r4, #100]	; 0x64
 80057fa:	e9c4 5500 	strd	r5, r5, [r4]
 80057fe:	60a5      	str	r5, [r4, #8]
 8005800:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005804:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005808:	2208      	movs	r2, #8
 800580a:	4629      	mov	r1, r5
 800580c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005810:	f7fe fd2c 	bl	800426c <memset>
 8005814:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005818:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800581c:	e7e9      	b.n	80057f2 <__sfp+0x42>
 800581e:	bf00      	nop
 8005820:	080067fc 	.word	0x080067fc
 8005824:	ffff0001 	.word	0xffff0001

08005828 <_fwalk_reent>:
 8005828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800582c:	4680      	mov	r8, r0
 800582e:	4689      	mov	r9, r1
 8005830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005834:	2600      	movs	r6, #0
 8005836:	b914      	cbnz	r4, 800583e <_fwalk_reent+0x16>
 8005838:	4630      	mov	r0, r6
 800583a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005842:	3f01      	subs	r7, #1
 8005844:	d501      	bpl.n	800584a <_fwalk_reent+0x22>
 8005846:	6824      	ldr	r4, [r4, #0]
 8005848:	e7f5      	b.n	8005836 <_fwalk_reent+0xe>
 800584a:	89ab      	ldrh	r3, [r5, #12]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d907      	bls.n	8005860 <_fwalk_reent+0x38>
 8005850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005854:	3301      	adds	r3, #1
 8005856:	d003      	beq.n	8005860 <_fwalk_reent+0x38>
 8005858:	4629      	mov	r1, r5
 800585a:	4640      	mov	r0, r8
 800585c:	47c8      	blx	r9
 800585e:	4306      	orrs	r6, r0
 8005860:	3568      	adds	r5, #104	; 0x68
 8005862:	e7ee      	b.n	8005842 <_fwalk_reent+0x1a>

08005864 <_localeconv_r>:
 8005864:	4b04      	ldr	r3, [pc, #16]	; (8005878 <_localeconv_r+0x14>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a18      	ldr	r0, [r3, #32]
 800586a:	4b04      	ldr	r3, [pc, #16]	; (800587c <_localeconv_r+0x18>)
 800586c:	2800      	cmp	r0, #0
 800586e:	bf08      	it	eq
 8005870:	4618      	moveq	r0, r3
 8005872:	30f0      	adds	r0, #240	; 0xf0
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	2000000c 	.word	0x2000000c
 800587c:	20000070 	.word	0x20000070

08005880 <malloc>:
 8005880:	4b02      	ldr	r3, [pc, #8]	; (800588c <malloc+0xc>)
 8005882:	4601      	mov	r1, r0
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	f000 bb45 	b.w	8005f14 <_malloc_r>
 800588a:	bf00      	nop
 800588c:	2000000c 	.word	0x2000000c

08005890 <memcpy>:
 8005890:	b510      	push	{r4, lr}
 8005892:	1e43      	subs	r3, r0, #1
 8005894:	440a      	add	r2, r1
 8005896:	4291      	cmp	r1, r2
 8005898:	d100      	bne.n	800589c <memcpy+0xc>
 800589a:	bd10      	pop	{r4, pc}
 800589c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058a4:	e7f7      	b.n	8005896 <memcpy+0x6>

080058a6 <_Balloc>:
 80058a6:	b570      	push	{r4, r5, r6, lr}
 80058a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058aa:	4604      	mov	r4, r0
 80058ac:	460e      	mov	r6, r1
 80058ae:	b93d      	cbnz	r5, 80058c0 <_Balloc+0x1a>
 80058b0:	2010      	movs	r0, #16
 80058b2:	f7ff ffe5 	bl	8005880 <malloc>
 80058b6:	6260      	str	r0, [r4, #36]	; 0x24
 80058b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058bc:	6005      	str	r5, [r0, #0]
 80058be:	60c5      	str	r5, [r0, #12]
 80058c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80058c2:	68eb      	ldr	r3, [r5, #12]
 80058c4:	b183      	cbz	r3, 80058e8 <_Balloc+0x42>
 80058c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058ce:	b9b8      	cbnz	r0, 8005900 <_Balloc+0x5a>
 80058d0:	2101      	movs	r1, #1
 80058d2:	fa01 f506 	lsl.w	r5, r1, r6
 80058d6:	1d6a      	adds	r2, r5, #5
 80058d8:	0092      	lsls	r2, r2, #2
 80058da:	4620      	mov	r0, r4
 80058dc:	f000 fabe 	bl	8005e5c <_calloc_r>
 80058e0:	b160      	cbz	r0, 80058fc <_Balloc+0x56>
 80058e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80058e6:	e00e      	b.n	8005906 <_Balloc+0x60>
 80058e8:	2221      	movs	r2, #33	; 0x21
 80058ea:	2104      	movs	r1, #4
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 fab5 	bl	8005e5c <_calloc_r>
 80058f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058f4:	60e8      	str	r0, [r5, #12]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e4      	bne.n	80058c6 <_Balloc+0x20>
 80058fc:	2000      	movs	r0, #0
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	6802      	ldr	r2, [r0, #0]
 8005902:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005906:	2300      	movs	r3, #0
 8005908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800590c:	e7f7      	b.n	80058fe <_Balloc+0x58>

0800590e <_Bfree>:
 800590e:	b570      	push	{r4, r5, r6, lr}
 8005910:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005912:	4606      	mov	r6, r0
 8005914:	460d      	mov	r5, r1
 8005916:	b93c      	cbnz	r4, 8005928 <_Bfree+0x1a>
 8005918:	2010      	movs	r0, #16
 800591a:	f7ff ffb1 	bl	8005880 <malloc>
 800591e:	6270      	str	r0, [r6, #36]	; 0x24
 8005920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005924:	6004      	str	r4, [r0, #0]
 8005926:	60c4      	str	r4, [r0, #12]
 8005928:	b13d      	cbz	r5, 800593a <_Bfree+0x2c>
 800592a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800592c:	686a      	ldr	r2, [r5, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005934:	6029      	str	r1, [r5, #0]
 8005936:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800593a:	bd70      	pop	{r4, r5, r6, pc}

0800593c <__multadd>:
 800593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005940:	690d      	ldr	r5, [r1, #16]
 8005942:	461f      	mov	r7, r3
 8005944:	4606      	mov	r6, r0
 8005946:	460c      	mov	r4, r1
 8005948:	f101 0c14 	add.w	ip, r1, #20
 800594c:	2300      	movs	r3, #0
 800594e:	f8dc 0000 	ldr.w	r0, [ip]
 8005952:	b281      	uxth	r1, r0
 8005954:	fb02 7101 	mla	r1, r2, r1, r7
 8005958:	0c0f      	lsrs	r7, r1, #16
 800595a:	0c00      	lsrs	r0, r0, #16
 800595c:	fb02 7000 	mla	r0, r2, r0, r7
 8005960:	b289      	uxth	r1, r1
 8005962:	3301      	adds	r3, #1
 8005964:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005968:	429d      	cmp	r5, r3
 800596a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800596e:	f84c 1b04 	str.w	r1, [ip], #4
 8005972:	dcec      	bgt.n	800594e <__multadd+0x12>
 8005974:	b1d7      	cbz	r7, 80059ac <__multadd+0x70>
 8005976:	68a3      	ldr	r3, [r4, #8]
 8005978:	42ab      	cmp	r3, r5
 800597a:	dc12      	bgt.n	80059a2 <__multadd+0x66>
 800597c:	6861      	ldr	r1, [r4, #4]
 800597e:	4630      	mov	r0, r6
 8005980:	3101      	adds	r1, #1
 8005982:	f7ff ff90 	bl	80058a6 <_Balloc>
 8005986:	6922      	ldr	r2, [r4, #16]
 8005988:	3202      	adds	r2, #2
 800598a:	f104 010c 	add.w	r1, r4, #12
 800598e:	4680      	mov	r8, r0
 8005990:	0092      	lsls	r2, r2, #2
 8005992:	300c      	adds	r0, #12
 8005994:	f7ff ff7c 	bl	8005890 <memcpy>
 8005998:	4621      	mov	r1, r4
 800599a:	4630      	mov	r0, r6
 800599c:	f7ff ffb7 	bl	800590e <_Bfree>
 80059a0:	4644      	mov	r4, r8
 80059a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059a6:	3501      	adds	r5, #1
 80059a8:	615f      	str	r7, [r3, #20]
 80059aa:	6125      	str	r5, [r4, #16]
 80059ac:	4620      	mov	r0, r4
 80059ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059b2 <__hi0bits>:
 80059b2:	0c02      	lsrs	r2, r0, #16
 80059b4:	0412      	lsls	r2, r2, #16
 80059b6:	4603      	mov	r3, r0
 80059b8:	b9b2      	cbnz	r2, 80059e8 <__hi0bits+0x36>
 80059ba:	0403      	lsls	r3, r0, #16
 80059bc:	2010      	movs	r0, #16
 80059be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059c2:	bf04      	itt	eq
 80059c4:	021b      	lsleq	r3, r3, #8
 80059c6:	3008      	addeq	r0, #8
 80059c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059cc:	bf04      	itt	eq
 80059ce:	011b      	lsleq	r3, r3, #4
 80059d0:	3004      	addeq	r0, #4
 80059d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80059d6:	bf04      	itt	eq
 80059d8:	009b      	lsleq	r3, r3, #2
 80059da:	3002      	addeq	r0, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	db06      	blt.n	80059ee <__hi0bits+0x3c>
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	d503      	bpl.n	80059ec <__hi0bits+0x3a>
 80059e4:	3001      	adds	r0, #1
 80059e6:	4770      	bx	lr
 80059e8:	2000      	movs	r0, #0
 80059ea:	e7e8      	b.n	80059be <__hi0bits+0xc>
 80059ec:	2020      	movs	r0, #32
 80059ee:	4770      	bx	lr

080059f0 <__lo0bits>:
 80059f0:	6803      	ldr	r3, [r0, #0]
 80059f2:	f013 0207 	ands.w	r2, r3, #7
 80059f6:	4601      	mov	r1, r0
 80059f8:	d00b      	beq.n	8005a12 <__lo0bits+0x22>
 80059fa:	07da      	lsls	r2, r3, #31
 80059fc:	d423      	bmi.n	8005a46 <__lo0bits+0x56>
 80059fe:	0798      	lsls	r0, r3, #30
 8005a00:	bf49      	itett	mi
 8005a02:	085b      	lsrmi	r3, r3, #1
 8005a04:	089b      	lsrpl	r3, r3, #2
 8005a06:	2001      	movmi	r0, #1
 8005a08:	600b      	strmi	r3, [r1, #0]
 8005a0a:	bf5c      	itt	pl
 8005a0c:	600b      	strpl	r3, [r1, #0]
 8005a0e:	2002      	movpl	r0, #2
 8005a10:	4770      	bx	lr
 8005a12:	b298      	uxth	r0, r3
 8005a14:	b9a8      	cbnz	r0, 8005a42 <__lo0bits+0x52>
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	2010      	movs	r0, #16
 8005a1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a1e:	bf04      	itt	eq
 8005a20:	0a1b      	lsreq	r3, r3, #8
 8005a22:	3008      	addeq	r0, #8
 8005a24:	071a      	lsls	r2, r3, #28
 8005a26:	bf04      	itt	eq
 8005a28:	091b      	lsreq	r3, r3, #4
 8005a2a:	3004      	addeq	r0, #4
 8005a2c:	079a      	lsls	r2, r3, #30
 8005a2e:	bf04      	itt	eq
 8005a30:	089b      	lsreq	r3, r3, #2
 8005a32:	3002      	addeq	r0, #2
 8005a34:	07da      	lsls	r2, r3, #31
 8005a36:	d402      	bmi.n	8005a3e <__lo0bits+0x4e>
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	d006      	beq.n	8005a4a <__lo0bits+0x5a>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	600b      	str	r3, [r1, #0]
 8005a40:	4770      	bx	lr
 8005a42:	4610      	mov	r0, r2
 8005a44:	e7e9      	b.n	8005a1a <__lo0bits+0x2a>
 8005a46:	2000      	movs	r0, #0
 8005a48:	4770      	bx	lr
 8005a4a:	2020      	movs	r0, #32
 8005a4c:	4770      	bx	lr

08005a4e <__i2b>:
 8005a4e:	b510      	push	{r4, lr}
 8005a50:	460c      	mov	r4, r1
 8005a52:	2101      	movs	r1, #1
 8005a54:	f7ff ff27 	bl	80058a6 <_Balloc>
 8005a58:	2201      	movs	r2, #1
 8005a5a:	6144      	str	r4, [r0, #20]
 8005a5c:	6102      	str	r2, [r0, #16]
 8005a5e:	bd10      	pop	{r4, pc}

08005a60 <__multiply>:
 8005a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a64:	4614      	mov	r4, r2
 8005a66:	690a      	ldr	r2, [r1, #16]
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	bfb8      	it	lt
 8005a6e:	460b      	movlt	r3, r1
 8005a70:	4688      	mov	r8, r1
 8005a72:	bfbc      	itt	lt
 8005a74:	46a0      	movlt	r8, r4
 8005a76:	461c      	movlt	r4, r3
 8005a78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005a80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a88:	eb07 0609 	add.w	r6, r7, r9
 8005a8c:	42b3      	cmp	r3, r6
 8005a8e:	bfb8      	it	lt
 8005a90:	3101      	addlt	r1, #1
 8005a92:	f7ff ff08 	bl	80058a6 <_Balloc>
 8005a96:	f100 0514 	add.w	r5, r0, #20
 8005a9a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005a9e:	462b      	mov	r3, r5
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	4573      	cmp	r3, lr
 8005aa4:	d316      	bcc.n	8005ad4 <__multiply+0x74>
 8005aa6:	f104 0214 	add.w	r2, r4, #20
 8005aaa:	f108 0114 	add.w	r1, r8, #20
 8005aae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005ab2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	9b00      	ldr	r3, [sp, #0]
 8005aba:	9201      	str	r2, [sp, #4]
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d80c      	bhi.n	8005ada <__multiply+0x7a>
 8005ac0:	2e00      	cmp	r6, #0
 8005ac2:	dd03      	ble.n	8005acc <__multiply+0x6c>
 8005ac4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d05d      	beq.n	8005b88 <__multiply+0x128>
 8005acc:	6106      	str	r6, [r0, #16]
 8005ace:	b003      	add	sp, #12
 8005ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad4:	f843 2b04 	str.w	r2, [r3], #4
 8005ad8:	e7e3      	b.n	8005aa2 <__multiply+0x42>
 8005ada:	f8b2 b000 	ldrh.w	fp, [r2]
 8005ade:	f1bb 0f00 	cmp.w	fp, #0
 8005ae2:	d023      	beq.n	8005b2c <__multiply+0xcc>
 8005ae4:	4689      	mov	r9, r1
 8005ae6:	46ac      	mov	ip, r5
 8005ae8:	f04f 0800 	mov.w	r8, #0
 8005aec:	f859 4b04 	ldr.w	r4, [r9], #4
 8005af0:	f8dc a000 	ldr.w	sl, [ip]
 8005af4:	b2a3      	uxth	r3, r4
 8005af6:	fa1f fa8a 	uxth.w	sl, sl
 8005afa:	fb0b a303 	mla	r3, fp, r3, sl
 8005afe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005b02:	f8dc 4000 	ldr.w	r4, [ip]
 8005b06:	4443      	add	r3, r8
 8005b08:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b0c:	fb0b 840a 	mla	r4, fp, sl, r8
 8005b10:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b14:	46e2      	mov	sl, ip
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b1c:	454f      	cmp	r7, r9
 8005b1e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b22:	f84a 3b04 	str.w	r3, [sl], #4
 8005b26:	d82b      	bhi.n	8005b80 <__multiply+0x120>
 8005b28:	f8cc 8004 	str.w	r8, [ip, #4]
 8005b2c:	9b01      	ldr	r3, [sp, #4]
 8005b2e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005b32:	3204      	adds	r2, #4
 8005b34:	f1ba 0f00 	cmp.w	sl, #0
 8005b38:	d020      	beq.n	8005b7c <__multiply+0x11c>
 8005b3a:	682b      	ldr	r3, [r5, #0]
 8005b3c:	4689      	mov	r9, r1
 8005b3e:	46a8      	mov	r8, r5
 8005b40:	f04f 0b00 	mov.w	fp, #0
 8005b44:	f8b9 c000 	ldrh.w	ip, [r9]
 8005b48:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005b4c:	fb0a 440c 	mla	r4, sl, ip, r4
 8005b50:	445c      	add	r4, fp
 8005b52:	46c4      	mov	ip, r8
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b5a:	f84c 3b04 	str.w	r3, [ip], #4
 8005b5e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b62:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005b66:	0c1b      	lsrs	r3, r3, #16
 8005b68:	fb0a b303 	mla	r3, sl, r3, fp
 8005b6c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005b70:	454f      	cmp	r7, r9
 8005b72:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005b76:	d805      	bhi.n	8005b84 <__multiply+0x124>
 8005b78:	f8c8 3004 	str.w	r3, [r8, #4]
 8005b7c:	3504      	adds	r5, #4
 8005b7e:	e79b      	b.n	8005ab8 <__multiply+0x58>
 8005b80:	46d4      	mov	ip, sl
 8005b82:	e7b3      	b.n	8005aec <__multiply+0x8c>
 8005b84:	46e0      	mov	r8, ip
 8005b86:	e7dd      	b.n	8005b44 <__multiply+0xe4>
 8005b88:	3e01      	subs	r6, #1
 8005b8a:	e799      	b.n	8005ac0 <__multiply+0x60>

08005b8c <__pow5mult>:
 8005b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b90:	4615      	mov	r5, r2
 8005b92:	f012 0203 	ands.w	r2, r2, #3
 8005b96:	4606      	mov	r6, r0
 8005b98:	460f      	mov	r7, r1
 8005b9a:	d007      	beq.n	8005bac <__pow5mult+0x20>
 8005b9c:	3a01      	subs	r2, #1
 8005b9e:	4c21      	ldr	r4, [pc, #132]	; (8005c24 <__pow5mult+0x98>)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ba6:	f7ff fec9 	bl	800593c <__multadd>
 8005baa:	4607      	mov	r7, r0
 8005bac:	10ad      	asrs	r5, r5, #2
 8005bae:	d035      	beq.n	8005c1c <__pow5mult+0x90>
 8005bb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bb2:	b93c      	cbnz	r4, 8005bc4 <__pow5mult+0x38>
 8005bb4:	2010      	movs	r0, #16
 8005bb6:	f7ff fe63 	bl	8005880 <malloc>
 8005bba:	6270      	str	r0, [r6, #36]	; 0x24
 8005bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bc0:	6004      	str	r4, [r0, #0]
 8005bc2:	60c4      	str	r4, [r0, #12]
 8005bc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005bc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bcc:	b94c      	cbnz	r4, 8005be2 <__pow5mult+0x56>
 8005bce:	f240 2171 	movw	r1, #625	; 0x271
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff ff3b 	bl	8005a4e <__i2b>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bde:	4604      	mov	r4, r0
 8005be0:	6003      	str	r3, [r0, #0]
 8005be2:	f04f 0800 	mov.w	r8, #0
 8005be6:	07eb      	lsls	r3, r5, #31
 8005be8:	d50a      	bpl.n	8005c00 <__pow5mult+0x74>
 8005bea:	4639      	mov	r1, r7
 8005bec:	4622      	mov	r2, r4
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f7ff ff36 	bl	8005a60 <__multiply>
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	4681      	mov	r9, r0
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f7ff fe88 	bl	800590e <_Bfree>
 8005bfe:	464f      	mov	r7, r9
 8005c00:	106d      	asrs	r5, r5, #1
 8005c02:	d00b      	beq.n	8005c1c <__pow5mult+0x90>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	b938      	cbnz	r0, 8005c18 <__pow5mult+0x8c>
 8005c08:	4622      	mov	r2, r4
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7ff ff27 	bl	8005a60 <__multiply>
 8005c12:	6020      	str	r0, [r4, #0]
 8005c14:	f8c0 8000 	str.w	r8, [r0]
 8005c18:	4604      	mov	r4, r0
 8005c1a:	e7e4      	b.n	8005be6 <__pow5mult+0x5a>
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c22:	bf00      	nop
 8005c24:	08006998 	.word	0x08006998

08005c28 <__lshift>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	6849      	ldr	r1, [r1, #4]
 8005c36:	eb0a 0903 	add.w	r9, sl, r3
 8005c3a:	68a3      	ldr	r3, [r4, #8]
 8005c3c:	4607      	mov	r7, r0
 8005c3e:	4616      	mov	r6, r2
 8005c40:	f109 0501 	add.w	r5, r9, #1
 8005c44:	42ab      	cmp	r3, r5
 8005c46:	db32      	blt.n	8005cae <__lshift+0x86>
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f7ff fe2c 	bl	80058a6 <_Balloc>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4680      	mov	r8, r0
 8005c52:	f100 0114 	add.w	r1, r0, #20
 8005c56:	461a      	mov	r2, r3
 8005c58:	4553      	cmp	r3, sl
 8005c5a:	db2b      	blt.n	8005cb4 <__lshift+0x8c>
 8005c5c:	6920      	ldr	r0, [r4, #16]
 8005c5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c62:	f104 0314 	add.w	r3, r4, #20
 8005c66:	f016 021f 	ands.w	r2, r6, #31
 8005c6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c72:	d025      	beq.n	8005cc0 <__lshift+0x98>
 8005c74:	f1c2 0e20 	rsb	lr, r2, #32
 8005c78:	2000      	movs	r0, #0
 8005c7a:	681e      	ldr	r6, [r3, #0]
 8005c7c:	468a      	mov	sl, r1
 8005c7e:	4096      	lsls	r6, r2
 8005c80:	4330      	orrs	r0, r6
 8005c82:	f84a 0b04 	str.w	r0, [sl], #4
 8005c86:	f853 0b04 	ldr.w	r0, [r3], #4
 8005c8a:	459c      	cmp	ip, r3
 8005c8c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005c90:	d814      	bhi.n	8005cbc <__lshift+0x94>
 8005c92:	6048      	str	r0, [r1, #4]
 8005c94:	b108      	cbz	r0, 8005c9a <__lshift+0x72>
 8005c96:	f109 0502 	add.w	r5, r9, #2
 8005c9a:	3d01      	subs	r5, #1
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	f7ff fe33 	bl	800590e <_Bfree>
 8005ca8:	4640      	mov	r0, r8
 8005caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cae:	3101      	adds	r1, #1
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	e7c7      	b.n	8005c44 <__lshift+0x1c>
 8005cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	e7cd      	b.n	8005c58 <__lshift+0x30>
 8005cbc:	4651      	mov	r1, sl
 8005cbe:	e7dc      	b.n	8005c7a <__lshift+0x52>
 8005cc0:	3904      	subs	r1, #4
 8005cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cca:	459c      	cmp	ip, r3
 8005ccc:	d8f9      	bhi.n	8005cc2 <__lshift+0x9a>
 8005cce:	e7e4      	b.n	8005c9a <__lshift+0x72>

08005cd0 <__mcmp>:
 8005cd0:	6903      	ldr	r3, [r0, #16]
 8005cd2:	690a      	ldr	r2, [r1, #16]
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	b530      	push	{r4, r5, lr}
 8005cd8:	d10c      	bne.n	8005cf4 <__mcmp+0x24>
 8005cda:	0092      	lsls	r2, r2, #2
 8005cdc:	3014      	adds	r0, #20
 8005cde:	3114      	adds	r1, #20
 8005ce0:	1884      	adds	r4, r0, r2
 8005ce2:	4411      	add	r1, r2
 8005ce4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ce8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005cec:	4295      	cmp	r5, r2
 8005cee:	d003      	beq.n	8005cf8 <__mcmp+0x28>
 8005cf0:	d305      	bcc.n	8005cfe <__mcmp+0x2e>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	bd30      	pop	{r4, r5, pc}
 8005cf8:	42a0      	cmp	r0, r4
 8005cfa:	d3f3      	bcc.n	8005ce4 <__mcmp+0x14>
 8005cfc:	e7fa      	b.n	8005cf4 <__mcmp+0x24>
 8005cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005d02:	e7f7      	b.n	8005cf4 <__mcmp+0x24>

08005d04 <__mdiff>:
 8005d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	460d      	mov	r5, r1
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	4628      	mov	r0, r5
 8005d10:	4614      	mov	r4, r2
 8005d12:	f7ff ffdd 	bl	8005cd0 <__mcmp>
 8005d16:	1e06      	subs	r6, r0, #0
 8005d18:	d108      	bne.n	8005d2c <__mdiff+0x28>
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f7ff fdc2 	bl	80058a6 <_Balloc>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2c:	bfa4      	itt	ge
 8005d2e:	4623      	movge	r3, r4
 8005d30:	462c      	movge	r4, r5
 8005d32:	4638      	mov	r0, r7
 8005d34:	6861      	ldr	r1, [r4, #4]
 8005d36:	bfa6      	itte	ge
 8005d38:	461d      	movge	r5, r3
 8005d3a:	2600      	movge	r6, #0
 8005d3c:	2601      	movlt	r6, #1
 8005d3e:	f7ff fdb2 	bl	80058a6 <_Balloc>
 8005d42:	692b      	ldr	r3, [r5, #16]
 8005d44:	60c6      	str	r6, [r0, #12]
 8005d46:	6926      	ldr	r6, [r4, #16]
 8005d48:	f105 0914 	add.w	r9, r5, #20
 8005d4c:	f104 0214 	add.w	r2, r4, #20
 8005d50:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005d54:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005d58:	f100 0514 	add.w	r5, r0, #20
 8005d5c:	f04f 0e00 	mov.w	lr, #0
 8005d60:	f852 ab04 	ldr.w	sl, [r2], #4
 8005d64:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d68:	fa1e f18a 	uxtah	r1, lr, sl
 8005d6c:	b2a3      	uxth	r3, r4
 8005d6e:	1ac9      	subs	r1, r1, r3
 8005d70:	0c23      	lsrs	r3, r4, #16
 8005d72:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005d76:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005d7a:	b289      	uxth	r1, r1
 8005d7c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005d80:	45c8      	cmp	r8, r9
 8005d82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005d86:	4694      	mov	ip, r2
 8005d88:	f845 3b04 	str.w	r3, [r5], #4
 8005d8c:	d8e8      	bhi.n	8005d60 <__mdiff+0x5c>
 8005d8e:	45bc      	cmp	ip, r7
 8005d90:	d304      	bcc.n	8005d9c <__mdiff+0x98>
 8005d92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005d96:	b183      	cbz	r3, 8005dba <__mdiff+0xb6>
 8005d98:	6106      	str	r6, [r0, #16]
 8005d9a:	e7c5      	b.n	8005d28 <__mdiff+0x24>
 8005d9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005da0:	fa1e f381 	uxtah	r3, lr, r1
 8005da4:	141a      	asrs	r2, r3, #16
 8005da6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005db0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005db4:	f845 3b04 	str.w	r3, [r5], #4
 8005db8:	e7e9      	b.n	8005d8e <__mdiff+0x8a>
 8005dba:	3e01      	subs	r6, #1
 8005dbc:	e7e9      	b.n	8005d92 <__mdiff+0x8e>

08005dbe <__d2b>:
 8005dbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dc2:	460e      	mov	r6, r1
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	ec59 8b10 	vmov	r8, r9, d0
 8005dca:	4615      	mov	r5, r2
 8005dcc:	f7ff fd6b 	bl	80058a6 <_Balloc>
 8005dd0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dda:	bb34      	cbnz	r4, 8005e2a <__d2b+0x6c>
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	f1b8 0300 	subs.w	r3, r8, #0
 8005de2:	d027      	beq.n	8005e34 <__d2b+0x76>
 8005de4:	a802      	add	r0, sp, #8
 8005de6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005dea:	f7ff fe01 	bl	80059f0 <__lo0bits>
 8005dee:	9900      	ldr	r1, [sp, #0]
 8005df0:	b1f0      	cbz	r0, 8005e30 <__d2b+0x72>
 8005df2:	9a01      	ldr	r2, [sp, #4]
 8005df4:	f1c0 0320 	rsb	r3, r0, #32
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	40c2      	lsrs	r2, r0
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	9201      	str	r2, [sp, #4]
 8005e04:	9b01      	ldr	r3, [sp, #4]
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bf14      	ite	ne
 8005e0c:	2102      	movne	r1, #2
 8005e0e:	2101      	moveq	r1, #1
 8005e10:	6139      	str	r1, [r7, #16]
 8005e12:	b1c4      	cbz	r4, 8005e46 <__d2b+0x88>
 8005e14:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e18:	4404      	add	r4, r0
 8005e1a:	6034      	str	r4, [r6, #0]
 8005e1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e20:	6028      	str	r0, [r5, #0]
 8005e22:	4638      	mov	r0, r7
 8005e24:	b003      	add	sp, #12
 8005e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e2e:	e7d5      	b.n	8005ddc <__d2b+0x1e>
 8005e30:	6179      	str	r1, [r7, #20]
 8005e32:	e7e7      	b.n	8005e04 <__d2b+0x46>
 8005e34:	a801      	add	r0, sp, #4
 8005e36:	f7ff fddb 	bl	80059f0 <__lo0bits>
 8005e3a:	9b01      	ldr	r3, [sp, #4]
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	2101      	movs	r1, #1
 8005e40:	6139      	str	r1, [r7, #16]
 8005e42:	3020      	adds	r0, #32
 8005e44:	e7e5      	b.n	8005e12 <__d2b+0x54>
 8005e46:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005e4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e4e:	6030      	str	r0, [r6, #0]
 8005e50:	6918      	ldr	r0, [r3, #16]
 8005e52:	f7ff fdae 	bl	80059b2 <__hi0bits>
 8005e56:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005e5a:	e7e1      	b.n	8005e20 <__d2b+0x62>

08005e5c <_calloc_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	fb02 f401 	mul.w	r4, r2, r1
 8005e62:	4621      	mov	r1, r4
 8005e64:	f000 f856 	bl	8005f14 <_malloc_r>
 8005e68:	4605      	mov	r5, r0
 8005e6a:	b118      	cbz	r0, 8005e74 <_calloc_r+0x18>
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	2100      	movs	r1, #0
 8005e70:	f7fe f9fc 	bl	800426c <memset>
 8005e74:	4628      	mov	r0, r5
 8005e76:	bd38      	pop	{r3, r4, r5, pc}

08005e78 <_free_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	d045      	beq.n	8005f0c <_free_r+0x94>
 8005e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e84:	1f0c      	subs	r4, r1, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bfb8      	it	lt
 8005e8a:	18e4      	addlt	r4, r4, r3
 8005e8c:	f000 fc4a 	bl	8006724 <__malloc_lock>
 8005e90:	4a1f      	ldr	r2, [pc, #124]	; (8005f10 <_free_r+0x98>)
 8005e92:	6813      	ldr	r3, [r2, #0]
 8005e94:	4610      	mov	r0, r2
 8005e96:	b933      	cbnz	r3, 8005ea6 <_free_r+0x2e>
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	6014      	str	r4, [r2, #0]
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea2:	f000 bc40 	b.w	8006726 <__malloc_unlock>
 8005ea6:	42a3      	cmp	r3, r4
 8005ea8:	d90c      	bls.n	8005ec4 <_free_r+0x4c>
 8005eaa:	6821      	ldr	r1, [r4, #0]
 8005eac:	1862      	adds	r2, r4, r1
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	bf04      	itt	eq
 8005eb2:	681a      	ldreq	r2, [r3, #0]
 8005eb4:	685b      	ldreq	r3, [r3, #4]
 8005eb6:	6063      	str	r3, [r4, #4]
 8005eb8:	bf04      	itt	eq
 8005eba:	1852      	addeq	r2, r2, r1
 8005ebc:	6022      	streq	r2, [r4, #0]
 8005ebe:	6004      	str	r4, [r0, #0]
 8005ec0:	e7ec      	b.n	8005e9c <_free_r+0x24>
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	b10a      	cbz	r2, 8005ecc <_free_r+0x54>
 8005ec8:	42a2      	cmp	r2, r4
 8005eca:	d9fa      	bls.n	8005ec2 <_free_r+0x4a>
 8005ecc:	6819      	ldr	r1, [r3, #0]
 8005ece:	1858      	adds	r0, r3, r1
 8005ed0:	42a0      	cmp	r0, r4
 8005ed2:	d10b      	bne.n	8005eec <_free_r+0x74>
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	1858      	adds	r0, r3, r1
 8005eda:	4282      	cmp	r2, r0
 8005edc:	6019      	str	r1, [r3, #0]
 8005ede:	d1dd      	bne.n	8005e9c <_free_r+0x24>
 8005ee0:	6810      	ldr	r0, [r2, #0]
 8005ee2:	6852      	ldr	r2, [r2, #4]
 8005ee4:	605a      	str	r2, [r3, #4]
 8005ee6:	4401      	add	r1, r0
 8005ee8:	6019      	str	r1, [r3, #0]
 8005eea:	e7d7      	b.n	8005e9c <_free_r+0x24>
 8005eec:	d902      	bls.n	8005ef4 <_free_r+0x7c>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	e7d3      	b.n	8005e9c <_free_r+0x24>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	1821      	adds	r1, r4, r0
 8005ef8:	428a      	cmp	r2, r1
 8005efa:	bf04      	itt	eq
 8005efc:	6811      	ldreq	r1, [r2, #0]
 8005efe:	6852      	ldreq	r2, [r2, #4]
 8005f00:	6062      	str	r2, [r4, #4]
 8005f02:	bf04      	itt	eq
 8005f04:	1809      	addeq	r1, r1, r0
 8005f06:	6021      	streq	r1, [r4, #0]
 8005f08:	605c      	str	r4, [r3, #4]
 8005f0a:	e7c7      	b.n	8005e9c <_free_r+0x24>
 8005f0c:	bd38      	pop	{r3, r4, r5, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000200 	.word	0x20000200

08005f14 <_malloc_r>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	1ccd      	adds	r5, r1, #3
 8005f18:	f025 0503 	bic.w	r5, r5, #3
 8005f1c:	3508      	adds	r5, #8
 8005f1e:	2d0c      	cmp	r5, #12
 8005f20:	bf38      	it	cc
 8005f22:	250c      	movcc	r5, #12
 8005f24:	2d00      	cmp	r5, #0
 8005f26:	4606      	mov	r6, r0
 8005f28:	db01      	blt.n	8005f2e <_malloc_r+0x1a>
 8005f2a:	42a9      	cmp	r1, r5
 8005f2c:	d903      	bls.n	8005f36 <_malloc_r+0x22>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	6033      	str	r3, [r6, #0]
 8005f32:	2000      	movs	r0, #0
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
 8005f36:	f000 fbf5 	bl	8006724 <__malloc_lock>
 8005f3a:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <_malloc_r+0xac>)
 8005f3c:	6814      	ldr	r4, [r2, #0]
 8005f3e:	4621      	mov	r1, r4
 8005f40:	b991      	cbnz	r1, 8005f68 <_malloc_r+0x54>
 8005f42:	4c20      	ldr	r4, [pc, #128]	; (8005fc4 <_malloc_r+0xb0>)
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	b91b      	cbnz	r3, 8005f50 <_malloc_r+0x3c>
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f000 f97d 	bl	8006248 <_sbrk_r>
 8005f4e:	6020      	str	r0, [r4, #0]
 8005f50:	4629      	mov	r1, r5
 8005f52:	4630      	mov	r0, r6
 8005f54:	f000 f978 	bl	8006248 <_sbrk_r>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d124      	bne.n	8005fa6 <_malloc_r+0x92>
 8005f5c:	230c      	movs	r3, #12
 8005f5e:	6033      	str	r3, [r6, #0]
 8005f60:	4630      	mov	r0, r6
 8005f62:	f000 fbe0 	bl	8006726 <__malloc_unlock>
 8005f66:	e7e4      	b.n	8005f32 <_malloc_r+0x1e>
 8005f68:	680b      	ldr	r3, [r1, #0]
 8005f6a:	1b5b      	subs	r3, r3, r5
 8005f6c:	d418      	bmi.n	8005fa0 <_malloc_r+0x8c>
 8005f6e:	2b0b      	cmp	r3, #11
 8005f70:	d90f      	bls.n	8005f92 <_malloc_r+0x7e>
 8005f72:	600b      	str	r3, [r1, #0]
 8005f74:	50cd      	str	r5, [r1, r3]
 8005f76:	18cc      	adds	r4, r1, r3
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f000 fbd4 	bl	8006726 <__malloc_unlock>
 8005f7e:	f104 000b 	add.w	r0, r4, #11
 8005f82:	1d23      	adds	r3, r4, #4
 8005f84:	f020 0007 	bic.w	r0, r0, #7
 8005f88:	1ac3      	subs	r3, r0, r3
 8005f8a:	d0d3      	beq.n	8005f34 <_malloc_r+0x20>
 8005f8c:	425a      	negs	r2, r3
 8005f8e:	50e2      	str	r2, [r4, r3]
 8005f90:	e7d0      	b.n	8005f34 <_malloc_r+0x20>
 8005f92:	428c      	cmp	r4, r1
 8005f94:	684b      	ldr	r3, [r1, #4]
 8005f96:	bf16      	itet	ne
 8005f98:	6063      	strne	r3, [r4, #4]
 8005f9a:	6013      	streq	r3, [r2, #0]
 8005f9c:	460c      	movne	r4, r1
 8005f9e:	e7eb      	b.n	8005f78 <_malloc_r+0x64>
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	6849      	ldr	r1, [r1, #4]
 8005fa4:	e7cc      	b.n	8005f40 <_malloc_r+0x2c>
 8005fa6:	1cc4      	adds	r4, r0, #3
 8005fa8:	f024 0403 	bic.w	r4, r4, #3
 8005fac:	42a0      	cmp	r0, r4
 8005fae:	d005      	beq.n	8005fbc <_malloc_r+0xa8>
 8005fb0:	1a21      	subs	r1, r4, r0
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f000 f948 	bl	8006248 <_sbrk_r>
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d0cf      	beq.n	8005f5c <_malloc_r+0x48>
 8005fbc:	6025      	str	r5, [r4, #0]
 8005fbe:	e7db      	b.n	8005f78 <_malloc_r+0x64>
 8005fc0:	20000200 	.word	0x20000200
 8005fc4:	20000204 	.word	0x20000204

08005fc8 <__sfputc_r>:
 8005fc8:	6893      	ldr	r3, [r2, #8]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	b410      	push	{r4}
 8005fd0:	6093      	str	r3, [r2, #8]
 8005fd2:	da08      	bge.n	8005fe6 <__sfputc_r+0x1e>
 8005fd4:	6994      	ldr	r4, [r2, #24]
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	db01      	blt.n	8005fde <__sfputc_r+0x16>
 8005fda:	290a      	cmp	r1, #10
 8005fdc:	d103      	bne.n	8005fe6 <__sfputc_r+0x1e>
 8005fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fe2:	f000 b985 	b.w	80062f0 <__swbuf_r>
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	1c58      	adds	r0, r3, #1
 8005fea:	6010      	str	r0, [r2, #0]
 8005fec:	7019      	strb	r1, [r3, #0]
 8005fee:	4608      	mov	r0, r1
 8005ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <__sfputs_r>:
 8005ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	460f      	mov	r7, r1
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	18d5      	adds	r5, r2, r3
 8006000:	42ac      	cmp	r4, r5
 8006002:	d101      	bne.n	8006008 <__sfputs_r+0x12>
 8006004:	2000      	movs	r0, #0
 8006006:	e007      	b.n	8006018 <__sfputs_r+0x22>
 8006008:	463a      	mov	r2, r7
 800600a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600e:	4630      	mov	r0, r6
 8006010:	f7ff ffda 	bl	8005fc8 <__sfputc_r>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d1f3      	bne.n	8006000 <__sfputs_r+0xa>
 8006018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800601c <_vfiprintf_r>:
 800601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006020:	460c      	mov	r4, r1
 8006022:	b09d      	sub	sp, #116	; 0x74
 8006024:	4617      	mov	r7, r2
 8006026:	461d      	mov	r5, r3
 8006028:	4606      	mov	r6, r0
 800602a:	b118      	cbz	r0, 8006034 <_vfiprintf_r+0x18>
 800602c:	6983      	ldr	r3, [r0, #24]
 800602e:	b90b      	cbnz	r3, 8006034 <_vfiprintf_r+0x18>
 8006030:	f7ff fb8e 	bl	8005750 <__sinit>
 8006034:	4b7c      	ldr	r3, [pc, #496]	; (8006228 <_vfiprintf_r+0x20c>)
 8006036:	429c      	cmp	r4, r3
 8006038:	d158      	bne.n	80060ec <_vfiprintf_r+0xd0>
 800603a:	6874      	ldr	r4, [r6, #4]
 800603c:	89a3      	ldrh	r3, [r4, #12]
 800603e:	0718      	lsls	r0, r3, #28
 8006040:	d55e      	bpl.n	8006100 <_vfiprintf_r+0xe4>
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d05b      	beq.n	8006100 <_vfiprintf_r+0xe4>
 8006048:	2300      	movs	r3, #0
 800604a:	9309      	str	r3, [sp, #36]	; 0x24
 800604c:	2320      	movs	r3, #32
 800604e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006052:	2330      	movs	r3, #48	; 0x30
 8006054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006058:	9503      	str	r5, [sp, #12]
 800605a:	f04f 0b01 	mov.w	fp, #1
 800605e:	46b8      	mov	r8, r7
 8006060:	4645      	mov	r5, r8
 8006062:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006066:	b10b      	cbz	r3, 800606c <_vfiprintf_r+0x50>
 8006068:	2b25      	cmp	r3, #37	; 0x25
 800606a:	d154      	bne.n	8006116 <_vfiprintf_r+0xfa>
 800606c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006070:	d00b      	beq.n	800608a <_vfiprintf_r+0x6e>
 8006072:	4653      	mov	r3, sl
 8006074:	463a      	mov	r2, r7
 8006076:	4621      	mov	r1, r4
 8006078:	4630      	mov	r0, r6
 800607a:	f7ff ffbc 	bl	8005ff6 <__sfputs_r>
 800607e:	3001      	adds	r0, #1
 8006080:	f000 80c2 	beq.w	8006208 <_vfiprintf_r+0x1ec>
 8006084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006086:	4453      	add	r3, sl
 8006088:	9309      	str	r3, [sp, #36]	; 0x24
 800608a:	f898 3000 	ldrb.w	r3, [r8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 80ba 	beq.w	8006208 <_vfiprintf_r+0x1ec>
 8006094:	2300      	movs	r3, #0
 8006096:	f04f 32ff 	mov.w	r2, #4294967295
 800609a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800609e:	9304      	str	r3, [sp, #16]
 80060a0:	9307      	str	r3, [sp, #28]
 80060a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060a6:	931a      	str	r3, [sp, #104]	; 0x68
 80060a8:	46a8      	mov	r8, r5
 80060aa:	2205      	movs	r2, #5
 80060ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80060b0:	485e      	ldr	r0, [pc, #376]	; (800622c <_vfiprintf_r+0x210>)
 80060b2:	f7fa f8cd 	bl	8000250 <memchr>
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	bb78      	cbnz	r0, 800611a <_vfiprintf_r+0xfe>
 80060ba:	06d9      	lsls	r1, r3, #27
 80060bc:	bf44      	itt	mi
 80060be:	2220      	movmi	r2, #32
 80060c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060c4:	071a      	lsls	r2, r3, #28
 80060c6:	bf44      	itt	mi
 80060c8:	222b      	movmi	r2, #43	; 0x2b
 80060ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060ce:	782a      	ldrb	r2, [r5, #0]
 80060d0:	2a2a      	cmp	r2, #42	; 0x2a
 80060d2:	d02a      	beq.n	800612a <_vfiprintf_r+0x10e>
 80060d4:	9a07      	ldr	r2, [sp, #28]
 80060d6:	46a8      	mov	r8, r5
 80060d8:	2000      	movs	r0, #0
 80060da:	250a      	movs	r5, #10
 80060dc:	4641      	mov	r1, r8
 80060de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060e2:	3b30      	subs	r3, #48	; 0x30
 80060e4:	2b09      	cmp	r3, #9
 80060e6:	d969      	bls.n	80061bc <_vfiprintf_r+0x1a0>
 80060e8:	b360      	cbz	r0, 8006144 <_vfiprintf_r+0x128>
 80060ea:	e024      	b.n	8006136 <_vfiprintf_r+0x11a>
 80060ec:	4b50      	ldr	r3, [pc, #320]	; (8006230 <_vfiprintf_r+0x214>)
 80060ee:	429c      	cmp	r4, r3
 80060f0:	d101      	bne.n	80060f6 <_vfiprintf_r+0xda>
 80060f2:	68b4      	ldr	r4, [r6, #8]
 80060f4:	e7a2      	b.n	800603c <_vfiprintf_r+0x20>
 80060f6:	4b4f      	ldr	r3, [pc, #316]	; (8006234 <_vfiprintf_r+0x218>)
 80060f8:	429c      	cmp	r4, r3
 80060fa:	bf08      	it	eq
 80060fc:	68f4      	ldreq	r4, [r6, #12]
 80060fe:	e79d      	b.n	800603c <_vfiprintf_r+0x20>
 8006100:	4621      	mov	r1, r4
 8006102:	4630      	mov	r0, r6
 8006104:	f000 f958 	bl	80063b8 <__swsetup_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	d09d      	beq.n	8006048 <_vfiprintf_r+0x2c>
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	b01d      	add	sp, #116	; 0x74
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	46a8      	mov	r8, r5
 8006118:	e7a2      	b.n	8006060 <_vfiprintf_r+0x44>
 800611a:	4a44      	ldr	r2, [pc, #272]	; (800622c <_vfiprintf_r+0x210>)
 800611c:	1a80      	subs	r0, r0, r2
 800611e:	fa0b f000 	lsl.w	r0, fp, r0
 8006122:	4318      	orrs	r0, r3
 8006124:	9004      	str	r0, [sp, #16]
 8006126:	4645      	mov	r5, r8
 8006128:	e7be      	b.n	80060a8 <_vfiprintf_r+0x8c>
 800612a:	9a03      	ldr	r2, [sp, #12]
 800612c:	1d11      	adds	r1, r2, #4
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	9103      	str	r1, [sp, #12]
 8006132:	2a00      	cmp	r2, #0
 8006134:	db01      	blt.n	800613a <_vfiprintf_r+0x11e>
 8006136:	9207      	str	r2, [sp, #28]
 8006138:	e004      	b.n	8006144 <_vfiprintf_r+0x128>
 800613a:	4252      	negs	r2, r2
 800613c:	f043 0302 	orr.w	r3, r3, #2
 8006140:	9207      	str	r2, [sp, #28]
 8006142:	9304      	str	r3, [sp, #16]
 8006144:	f898 3000 	ldrb.w	r3, [r8]
 8006148:	2b2e      	cmp	r3, #46	; 0x2e
 800614a:	d10e      	bne.n	800616a <_vfiprintf_r+0x14e>
 800614c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006150:	2b2a      	cmp	r3, #42	; 0x2a
 8006152:	d138      	bne.n	80061c6 <_vfiprintf_r+0x1aa>
 8006154:	9b03      	ldr	r3, [sp, #12]
 8006156:	1d1a      	adds	r2, r3, #4
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	9203      	str	r2, [sp, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	bfb8      	it	lt
 8006160:	f04f 33ff 	movlt.w	r3, #4294967295
 8006164:	f108 0802 	add.w	r8, r8, #2
 8006168:	9305      	str	r3, [sp, #20]
 800616a:	4d33      	ldr	r5, [pc, #204]	; (8006238 <_vfiprintf_r+0x21c>)
 800616c:	f898 1000 	ldrb.w	r1, [r8]
 8006170:	2203      	movs	r2, #3
 8006172:	4628      	mov	r0, r5
 8006174:	f7fa f86c 	bl	8000250 <memchr>
 8006178:	b140      	cbz	r0, 800618c <_vfiprintf_r+0x170>
 800617a:	2340      	movs	r3, #64	; 0x40
 800617c:	1b40      	subs	r0, r0, r5
 800617e:	fa03 f000 	lsl.w	r0, r3, r0
 8006182:	9b04      	ldr	r3, [sp, #16]
 8006184:	4303      	orrs	r3, r0
 8006186:	f108 0801 	add.w	r8, r8, #1
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	f898 1000 	ldrb.w	r1, [r8]
 8006190:	482a      	ldr	r0, [pc, #168]	; (800623c <_vfiprintf_r+0x220>)
 8006192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006196:	2206      	movs	r2, #6
 8006198:	f108 0701 	add.w	r7, r8, #1
 800619c:	f7fa f858 	bl	8000250 <memchr>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d037      	beq.n	8006214 <_vfiprintf_r+0x1f8>
 80061a4:	4b26      	ldr	r3, [pc, #152]	; (8006240 <_vfiprintf_r+0x224>)
 80061a6:	bb1b      	cbnz	r3, 80061f0 <_vfiprintf_r+0x1d4>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	3307      	adds	r3, #7
 80061ac:	f023 0307 	bic.w	r3, r3, #7
 80061b0:	3308      	adds	r3, #8
 80061b2:	9303      	str	r3, [sp, #12]
 80061b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b6:	444b      	add	r3, r9
 80061b8:	9309      	str	r3, [sp, #36]	; 0x24
 80061ba:	e750      	b.n	800605e <_vfiprintf_r+0x42>
 80061bc:	fb05 3202 	mla	r2, r5, r2, r3
 80061c0:	2001      	movs	r0, #1
 80061c2:	4688      	mov	r8, r1
 80061c4:	e78a      	b.n	80060dc <_vfiprintf_r+0xc0>
 80061c6:	2300      	movs	r3, #0
 80061c8:	f108 0801 	add.w	r8, r8, #1
 80061cc:	9305      	str	r3, [sp, #20]
 80061ce:	4619      	mov	r1, r3
 80061d0:	250a      	movs	r5, #10
 80061d2:	4640      	mov	r0, r8
 80061d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061d8:	3a30      	subs	r2, #48	; 0x30
 80061da:	2a09      	cmp	r2, #9
 80061dc:	d903      	bls.n	80061e6 <_vfiprintf_r+0x1ca>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0c3      	beq.n	800616a <_vfiprintf_r+0x14e>
 80061e2:	9105      	str	r1, [sp, #20]
 80061e4:	e7c1      	b.n	800616a <_vfiprintf_r+0x14e>
 80061e6:	fb05 2101 	mla	r1, r5, r1, r2
 80061ea:	2301      	movs	r3, #1
 80061ec:	4680      	mov	r8, r0
 80061ee:	e7f0      	b.n	80061d2 <_vfiprintf_r+0x1b6>
 80061f0:	ab03      	add	r3, sp, #12
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	4622      	mov	r2, r4
 80061f6:	4b13      	ldr	r3, [pc, #76]	; (8006244 <_vfiprintf_r+0x228>)
 80061f8:	a904      	add	r1, sp, #16
 80061fa:	4630      	mov	r0, r6
 80061fc:	f7fe f8c4 	bl	8004388 <_printf_float>
 8006200:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006204:	4681      	mov	r9, r0
 8006206:	d1d5      	bne.n	80061b4 <_vfiprintf_r+0x198>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	065b      	lsls	r3, r3, #25
 800620c:	f53f af7e 	bmi.w	800610c <_vfiprintf_r+0xf0>
 8006210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006212:	e77d      	b.n	8006110 <_vfiprintf_r+0xf4>
 8006214:	ab03      	add	r3, sp, #12
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	4622      	mov	r2, r4
 800621a:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <_vfiprintf_r+0x228>)
 800621c:	a904      	add	r1, sp, #16
 800621e:	4630      	mov	r0, r6
 8006220:	f7fe fb54 	bl	80048cc <_printf_i>
 8006224:	e7ec      	b.n	8006200 <_vfiprintf_r+0x1e4>
 8006226:	bf00      	nop
 8006228:	08006864 	.word	0x08006864
 800622c:	080069a4 	.word	0x080069a4
 8006230:	08006884 	.word	0x08006884
 8006234:	08006844 	.word	0x08006844
 8006238:	080069aa 	.word	0x080069aa
 800623c:	080069ae 	.word	0x080069ae
 8006240:	08004389 	.word	0x08004389
 8006244:	08005ff7 	.word	0x08005ff7

08006248 <_sbrk_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4c06      	ldr	r4, [pc, #24]	; (8006264 <_sbrk_r+0x1c>)
 800624c:	2300      	movs	r3, #0
 800624e:	4605      	mov	r5, r0
 8006250:	4608      	mov	r0, r1
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	f7fa fde8 	bl	8000e28 <_sbrk>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_sbrk_r+0x1a>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	b103      	cbz	r3, 8006262 <_sbrk_r+0x1a>
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	20000784 	.word	0x20000784

08006268 <__sread>:
 8006268:	b510      	push	{r4, lr}
 800626a:	460c      	mov	r4, r1
 800626c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006270:	f000 fa5a 	bl	8006728 <_read_r>
 8006274:	2800      	cmp	r0, #0
 8006276:	bfab      	itete	ge
 8006278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800627a:	89a3      	ldrhlt	r3, [r4, #12]
 800627c:	181b      	addge	r3, r3, r0
 800627e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006282:	bfac      	ite	ge
 8006284:	6563      	strge	r3, [r4, #84]	; 0x54
 8006286:	81a3      	strhlt	r3, [r4, #12]
 8006288:	bd10      	pop	{r4, pc}

0800628a <__swrite>:
 800628a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628e:	461f      	mov	r7, r3
 8006290:	898b      	ldrh	r3, [r1, #12]
 8006292:	05db      	lsls	r3, r3, #23
 8006294:	4605      	mov	r5, r0
 8006296:	460c      	mov	r4, r1
 8006298:	4616      	mov	r6, r2
 800629a:	d505      	bpl.n	80062a8 <__swrite+0x1e>
 800629c:	2302      	movs	r3, #2
 800629e:	2200      	movs	r2, #0
 80062a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a4:	f000 f9b6 	bl	8006614 <_lseek_r>
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	4632      	mov	r2, r6
 80062b6:	463b      	mov	r3, r7
 80062b8:	4628      	mov	r0, r5
 80062ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062be:	f000 b869 	b.w	8006394 <_write_r>

080062c2 <__sseek>:
 80062c2:	b510      	push	{r4, lr}
 80062c4:	460c      	mov	r4, r1
 80062c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ca:	f000 f9a3 	bl	8006614 <_lseek_r>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	bf15      	itete	ne
 80062d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80062d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062de:	81a3      	strheq	r3, [r4, #12]
 80062e0:	bf18      	it	ne
 80062e2:	81a3      	strhne	r3, [r4, #12]
 80062e4:	bd10      	pop	{r4, pc}

080062e6 <__sclose>:
 80062e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ea:	f000 b8d3 	b.w	8006494 <_close_r>
	...

080062f0 <__swbuf_r>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	460e      	mov	r6, r1
 80062f4:	4614      	mov	r4, r2
 80062f6:	4605      	mov	r5, r0
 80062f8:	b118      	cbz	r0, 8006302 <__swbuf_r+0x12>
 80062fa:	6983      	ldr	r3, [r0, #24]
 80062fc:	b90b      	cbnz	r3, 8006302 <__swbuf_r+0x12>
 80062fe:	f7ff fa27 	bl	8005750 <__sinit>
 8006302:	4b21      	ldr	r3, [pc, #132]	; (8006388 <__swbuf_r+0x98>)
 8006304:	429c      	cmp	r4, r3
 8006306:	d12a      	bne.n	800635e <__swbuf_r+0x6e>
 8006308:	686c      	ldr	r4, [r5, #4]
 800630a:	69a3      	ldr	r3, [r4, #24]
 800630c:	60a3      	str	r3, [r4, #8]
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	071a      	lsls	r2, r3, #28
 8006312:	d52e      	bpl.n	8006372 <__swbuf_r+0x82>
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	b363      	cbz	r3, 8006372 <__swbuf_r+0x82>
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	6820      	ldr	r0, [r4, #0]
 800631c:	1ac0      	subs	r0, r0, r3
 800631e:	6963      	ldr	r3, [r4, #20]
 8006320:	b2f6      	uxtb	r6, r6
 8006322:	4283      	cmp	r3, r0
 8006324:	4637      	mov	r7, r6
 8006326:	dc04      	bgt.n	8006332 <__swbuf_r+0x42>
 8006328:	4621      	mov	r1, r4
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f948 	bl	80065c0 <_fflush_r>
 8006330:	bb28      	cbnz	r0, 800637e <__swbuf_r+0x8e>
 8006332:	68a3      	ldr	r3, [r4, #8]
 8006334:	3b01      	subs	r3, #1
 8006336:	60a3      	str	r3, [r4, #8]
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	701e      	strb	r6, [r3, #0]
 8006340:	6963      	ldr	r3, [r4, #20]
 8006342:	3001      	adds	r0, #1
 8006344:	4283      	cmp	r3, r0
 8006346:	d004      	beq.n	8006352 <__swbuf_r+0x62>
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	07db      	lsls	r3, r3, #31
 800634c:	d519      	bpl.n	8006382 <__swbuf_r+0x92>
 800634e:	2e0a      	cmp	r6, #10
 8006350:	d117      	bne.n	8006382 <__swbuf_r+0x92>
 8006352:	4621      	mov	r1, r4
 8006354:	4628      	mov	r0, r5
 8006356:	f000 f933 	bl	80065c0 <_fflush_r>
 800635a:	b190      	cbz	r0, 8006382 <__swbuf_r+0x92>
 800635c:	e00f      	b.n	800637e <__swbuf_r+0x8e>
 800635e:	4b0b      	ldr	r3, [pc, #44]	; (800638c <__swbuf_r+0x9c>)
 8006360:	429c      	cmp	r4, r3
 8006362:	d101      	bne.n	8006368 <__swbuf_r+0x78>
 8006364:	68ac      	ldr	r4, [r5, #8]
 8006366:	e7d0      	b.n	800630a <__swbuf_r+0x1a>
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <__swbuf_r+0xa0>)
 800636a:	429c      	cmp	r4, r3
 800636c:	bf08      	it	eq
 800636e:	68ec      	ldreq	r4, [r5, #12]
 8006370:	e7cb      	b.n	800630a <__swbuf_r+0x1a>
 8006372:	4621      	mov	r1, r4
 8006374:	4628      	mov	r0, r5
 8006376:	f000 f81f 	bl	80063b8 <__swsetup_r>
 800637a:	2800      	cmp	r0, #0
 800637c:	d0cc      	beq.n	8006318 <__swbuf_r+0x28>
 800637e:	f04f 37ff 	mov.w	r7, #4294967295
 8006382:	4638      	mov	r0, r7
 8006384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006386:	bf00      	nop
 8006388:	08006864 	.word	0x08006864
 800638c:	08006884 	.word	0x08006884
 8006390:	08006844 	.word	0x08006844

08006394 <_write_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4c07      	ldr	r4, [pc, #28]	; (80063b4 <_write_r+0x20>)
 8006398:	4605      	mov	r5, r0
 800639a:	4608      	mov	r0, r1
 800639c:	4611      	mov	r1, r2
 800639e:	2200      	movs	r2, #0
 80063a0:	6022      	str	r2, [r4, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7fa fcef 	bl	8000d86 <_write>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_write_r+0x1e>
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_write_r+0x1e>
 80063b0:	602b      	str	r3, [r5, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	20000784 	.word	0x20000784

080063b8 <__swsetup_r>:
 80063b8:	4b32      	ldr	r3, [pc, #200]	; (8006484 <__swsetup_r+0xcc>)
 80063ba:	b570      	push	{r4, r5, r6, lr}
 80063bc:	681d      	ldr	r5, [r3, #0]
 80063be:	4606      	mov	r6, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	b125      	cbz	r5, 80063ce <__swsetup_r+0x16>
 80063c4:	69ab      	ldr	r3, [r5, #24]
 80063c6:	b913      	cbnz	r3, 80063ce <__swsetup_r+0x16>
 80063c8:	4628      	mov	r0, r5
 80063ca:	f7ff f9c1 	bl	8005750 <__sinit>
 80063ce:	4b2e      	ldr	r3, [pc, #184]	; (8006488 <__swsetup_r+0xd0>)
 80063d0:	429c      	cmp	r4, r3
 80063d2:	d10f      	bne.n	80063f4 <__swsetup_r+0x3c>
 80063d4:	686c      	ldr	r4, [r5, #4]
 80063d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063da:	b29a      	uxth	r2, r3
 80063dc:	0715      	lsls	r5, r2, #28
 80063de:	d42c      	bmi.n	800643a <__swsetup_r+0x82>
 80063e0:	06d0      	lsls	r0, r2, #27
 80063e2:	d411      	bmi.n	8006408 <__swsetup_r+0x50>
 80063e4:	2209      	movs	r2, #9
 80063e6:	6032      	str	r2, [r6, #0]
 80063e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ec:	81a3      	strh	r3, [r4, #12]
 80063ee:	f04f 30ff 	mov.w	r0, #4294967295
 80063f2:	e03e      	b.n	8006472 <__swsetup_r+0xba>
 80063f4:	4b25      	ldr	r3, [pc, #148]	; (800648c <__swsetup_r+0xd4>)
 80063f6:	429c      	cmp	r4, r3
 80063f8:	d101      	bne.n	80063fe <__swsetup_r+0x46>
 80063fa:	68ac      	ldr	r4, [r5, #8]
 80063fc:	e7eb      	b.n	80063d6 <__swsetup_r+0x1e>
 80063fe:	4b24      	ldr	r3, [pc, #144]	; (8006490 <__swsetup_r+0xd8>)
 8006400:	429c      	cmp	r4, r3
 8006402:	bf08      	it	eq
 8006404:	68ec      	ldreq	r4, [r5, #12]
 8006406:	e7e6      	b.n	80063d6 <__swsetup_r+0x1e>
 8006408:	0751      	lsls	r1, r2, #29
 800640a:	d512      	bpl.n	8006432 <__swsetup_r+0x7a>
 800640c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800640e:	b141      	cbz	r1, 8006422 <__swsetup_r+0x6a>
 8006410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006414:	4299      	cmp	r1, r3
 8006416:	d002      	beq.n	800641e <__swsetup_r+0x66>
 8006418:	4630      	mov	r0, r6
 800641a:	f7ff fd2d 	bl	8005e78 <_free_r>
 800641e:	2300      	movs	r3, #0
 8006420:	6363      	str	r3, [r4, #52]	; 0x34
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	2300      	movs	r3, #0
 800642c:	6063      	str	r3, [r4, #4]
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	f043 0308 	orr.w	r3, r3, #8
 8006438:	81a3      	strh	r3, [r4, #12]
 800643a:	6923      	ldr	r3, [r4, #16]
 800643c:	b94b      	cbnz	r3, 8006452 <__swsetup_r+0x9a>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006448:	d003      	beq.n	8006452 <__swsetup_r+0x9a>
 800644a:	4621      	mov	r1, r4
 800644c:	4630      	mov	r0, r6
 800644e:	f000 f917 	bl	8006680 <__smakebuf_r>
 8006452:	89a2      	ldrh	r2, [r4, #12]
 8006454:	f012 0301 	ands.w	r3, r2, #1
 8006458:	d00c      	beq.n	8006474 <__swsetup_r+0xbc>
 800645a:	2300      	movs	r3, #0
 800645c:	60a3      	str	r3, [r4, #8]
 800645e:	6963      	ldr	r3, [r4, #20]
 8006460:	425b      	negs	r3, r3
 8006462:	61a3      	str	r3, [r4, #24]
 8006464:	6923      	ldr	r3, [r4, #16]
 8006466:	b953      	cbnz	r3, 800647e <__swsetup_r+0xc6>
 8006468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800646c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006470:	d1ba      	bne.n	80063e8 <__swsetup_r+0x30>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	0792      	lsls	r2, r2, #30
 8006476:	bf58      	it	pl
 8006478:	6963      	ldrpl	r3, [r4, #20]
 800647a:	60a3      	str	r3, [r4, #8]
 800647c:	e7f2      	b.n	8006464 <__swsetup_r+0xac>
 800647e:	2000      	movs	r0, #0
 8006480:	e7f7      	b.n	8006472 <__swsetup_r+0xba>
 8006482:	bf00      	nop
 8006484:	2000000c 	.word	0x2000000c
 8006488:	08006864 	.word	0x08006864
 800648c:	08006884 	.word	0x08006884
 8006490:	08006844 	.word	0x08006844

08006494 <_close_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4c06      	ldr	r4, [pc, #24]	; (80064b0 <_close_r+0x1c>)
 8006498:	2300      	movs	r3, #0
 800649a:	4605      	mov	r5, r0
 800649c:	4608      	mov	r0, r1
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	f7fa fc8d 	bl	8000dbe <_close>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d102      	bne.n	80064ae <_close_r+0x1a>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	b103      	cbz	r3, 80064ae <_close_r+0x1a>
 80064ac:	602b      	str	r3, [r5, #0]
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	20000784 	.word	0x20000784

080064b4 <__sflush_r>:
 80064b4:	898a      	ldrh	r2, [r1, #12]
 80064b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ba:	4605      	mov	r5, r0
 80064bc:	0710      	lsls	r0, r2, #28
 80064be:	460c      	mov	r4, r1
 80064c0:	d458      	bmi.n	8006574 <__sflush_r+0xc0>
 80064c2:	684b      	ldr	r3, [r1, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	dc05      	bgt.n	80064d4 <__sflush_r+0x20>
 80064c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dc02      	bgt.n	80064d4 <__sflush_r+0x20>
 80064ce:	2000      	movs	r0, #0
 80064d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064d6:	2e00      	cmp	r6, #0
 80064d8:	d0f9      	beq.n	80064ce <__sflush_r+0x1a>
 80064da:	2300      	movs	r3, #0
 80064dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064e0:	682f      	ldr	r7, [r5, #0]
 80064e2:	6a21      	ldr	r1, [r4, #32]
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	d032      	beq.n	800654e <__sflush_r+0x9a>
 80064e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	075a      	lsls	r2, r3, #29
 80064ee:	d505      	bpl.n	80064fc <__sflush_r+0x48>
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	1ac0      	subs	r0, r0, r3
 80064f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064f6:	b10b      	cbz	r3, 80064fc <__sflush_r+0x48>
 80064f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064fa:	1ac0      	subs	r0, r0, r3
 80064fc:	2300      	movs	r3, #0
 80064fe:	4602      	mov	r2, r0
 8006500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006502:	6a21      	ldr	r1, [r4, #32]
 8006504:	4628      	mov	r0, r5
 8006506:	47b0      	blx	r6
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	d106      	bne.n	800651c <__sflush_r+0x68>
 800650e:	6829      	ldr	r1, [r5, #0]
 8006510:	291d      	cmp	r1, #29
 8006512:	d848      	bhi.n	80065a6 <__sflush_r+0xf2>
 8006514:	4a29      	ldr	r2, [pc, #164]	; (80065bc <__sflush_r+0x108>)
 8006516:	40ca      	lsrs	r2, r1
 8006518:	07d6      	lsls	r6, r2, #31
 800651a:	d544      	bpl.n	80065a6 <__sflush_r+0xf2>
 800651c:	2200      	movs	r2, #0
 800651e:	6062      	str	r2, [r4, #4]
 8006520:	04d9      	lsls	r1, r3, #19
 8006522:	6922      	ldr	r2, [r4, #16]
 8006524:	6022      	str	r2, [r4, #0]
 8006526:	d504      	bpl.n	8006532 <__sflush_r+0x7e>
 8006528:	1c42      	adds	r2, r0, #1
 800652a:	d101      	bne.n	8006530 <__sflush_r+0x7c>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b903      	cbnz	r3, 8006532 <__sflush_r+0x7e>
 8006530:	6560      	str	r0, [r4, #84]	; 0x54
 8006532:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006534:	602f      	str	r7, [r5, #0]
 8006536:	2900      	cmp	r1, #0
 8006538:	d0c9      	beq.n	80064ce <__sflush_r+0x1a>
 800653a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800653e:	4299      	cmp	r1, r3
 8006540:	d002      	beq.n	8006548 <__sflush_r+0x94>
 8006542:	4628      	mov	r0, r5
 8006544:	f7ff fc98 	bl	8005e78 <_free_r>
 8006548:	2000      	movs	r0, #0
 800654a:	6360      	str	r0, [r4, #52]	; 0x34
 800654c:	e7c0      	b.n	80064d0 <__sflush_r+0x1c>
 800654e:	2301      	movs	r3, #1
 8006550:	4628      	mov	r0, r5
 8006552:	47b0      	blx	r6
 8006554:	1c41      	adds	r1, r0, #1
 8006556:	d1c8      	bne.n	80064ea <__sflush_r+0x36>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0c5      	beq.n	80064ea <__sflush_r+0x36>
 800655e:	2b1d      	cmp	r3, #29
 8006560:	d001      	beq.n	8006566 <__sflush_r+0xb2>
 8006562:	2b16      	cmp	r3, #22
 8006564:	d101      	bne.n	800656a <__sflush_r+0xb6>
 8006566:	602f      	str	r7, [r5, #0]
 8006568:	e7b1      	b.n	80064ce <__sflush_r+0x1a>
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006570:	81a3      	strh	r3, [r4, #12]
 8006572:	e7ad      	b.n	80064d0 <__sflush_r+0x1c>
 8006574:	690f      	ldr	r7, [r1, #16]
 8006576:	2f00      	cmp	r7, #0
 8006578:	d0a9      	beq.n	80064ce <__sflush_r+0x1a>
 800657a:	0793      	lsls	r3, r2, #30
 800657c:	680e      	ldr	r6, [r1, #0]
 800657e:	bf08      	it	eq
 8006580:	694b      	ldreq	r3, [r1, #20]
 8006582:	600f      	str	r7, [r1, #0]
 8006584:	bf18      	it	ne
 8006586:	2300      	movne	r3, #0
 8006588:	eba6 0807 	sub.w	r8, r6, r7
 800658c:	608b      	str	r3, [r1, #8]
 800658e:	f1b8 0f00 	cmp.w	r8, #0
 8006592:	dd9c      	ble.n	80064ce <__sflush_r+0x1a>
 8006594:	4643      	mov	r3, r8
 8006596:	463a      	mov	r2, r7
 8006598:	6a21      	ldr	r1, [r4, #32]
 800659a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800659c:	4628      	mov	r0, r5
 800659e:	47b0      	blx	r6
 80065a0:	2800      	cmp	r0, #0
 80065a2:	dc06      	bgt.n	80065b2 <__sflush_r+0xfe>
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065aa:	81a3      	strh	r3, [r4, #12]
 80065ac:	f04f 30ff 	mov.w	r0, #4294967295
 80065b0:	e78e      	b.n	80064d0 <__sflush_r+0x1c>
 80065b2:	4407      	add	r7, r0
 80065b4:	eba8 0800 	sub.w	r8, r8, r0
 80065b8:	e7e9      	b.n	800658e <__sflush_r+0xda>
 80065ba:	bf00      	nop
 80065bc:	20400001 	.word	0x20400001

080065c0 <_fflush_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	690b      	ldr	r3, [r1, #16]
 80065c4:	4605      	mov	r5, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	b1db      	cbz	r3, 8006602 <_fflush_r+0x42>
 80065ca:	b118      	cbz	r0, 80065d4 <_fflush_r+0x14>
 80065cc:	6983      	ldr	r3, [r0, #24]
 80065ce:	b90b      	cbnz	r3, 80065d4 <_fflush_r+0x14>
 80065d0:	f7ff f8be 	bl	8005750 <__sinit>
 80065d4:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <_fflush_r+0x48>)
 80065d6:	429c      	cmp	r4, r3
 80065d8:	d109      	bne.n	80065ee <_fflush_r+0x2e>
 80065da:	686c      	ldr	r4, [r5, #4]
 80065dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e0:	b17b      	cbz	r3, 8006602 <_fflush_r+0x42>
 80065e2:	4621      	mov	r1, r4
 80065e4:	4628      	mov	r0, r5
 80065e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ea:	f7ff bf63 	b.w	80064b4 <__sflush_r>
 80065ee:	4b07      	ldr	r3, [pc, #28]	; (800660c <_fflush_r+0x4c>)
 80065f0:	429c      	cmp	r4, r3
 80065f2:	d101      	bne.n	80065f8 <_fflush_r+0x38>
 80065f4:	68ac      	ldr	r4, [r5, #8]
 80065f6:	e7f1      	b.n	80065dc <_fflush_r+0x1c>
 80065f8:	4b05      	ldr	r3, [pc, #20]	; (8006610 <_fflush_r+0x50>)
 80065fa:	429c      	cmp	r4, r3
 80065fc:	bf08      	it	eq
 80065fe:	68ec      	ldreq	r4, [r5, #12]
 8006600:	e7ec      	b.n	80065dc <_fflush_r+0x1c>
 8006602:	2000      	movs	r0, #0
 8006604:	bd38      	pop	{r3, r4, r5, pc}
 8006606:	bf00      	nop
 8006608:	08006864 	.word	0x08006864
 800660c:	08006884 	.word	0x08006884
 8006610:	08006844 	.word	0x08006844

08006614 <_lseek_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4c07      	ldr	r4, [pc, #28]	; (8006634 <_lseek_r+0x20>)
 8006618:	4605      	mov	r5, r0
 800661a:	4608      	mov	r0, r1
 800661c:	4611      	mov	r1, r2
 800661e:	2200      	movs	r2, #0
 8006620:	6022      	str	r2, [r4, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	f7fa fbf2 	bl	8000e0c <_lseek>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d102      	bne.n	8006632 <_lseek_r+0x1e>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	b103      	cbz	r3, 8006632 <_lseek_r+0x1e>
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	20000784 	.word	0x20000784

08006638 <__swhatbuf_r>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	460e      	mov	r6, r1
 800663c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006640:	2900      	cmp	r1, #0
 8006642:	b096      	sub	sp, #88	; 0x58
 8006644:	4614      	mov	r4, r2
 8006646:	461d      	mov	r5, r3
 8006648:	da07      	bge.n	800665a <__swhatbuf_r+0x22>
 800664a:	2300      	movs	r3, #0
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	89b3      	ldrh	r3, [r6, #12]
 8006650:	061a      	lsls	r2, r3, #24
 8006652:	d410      	bmi.n	8006676 <__swhatbuf_r+0x3e>
 8006654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006658:	e00e      	b.n	8006678 <__swhatbuf_r+0x40>
 800665a:	466a      	mov	r2, sp
 800665c:	f000 f884 	bl	8006768 <_fstat_r>
 8006660:	2800      	cmp	r0, #0
 8006662:	dbf2      	blt.n	800664a <__swhatbuf_r+0x12>
 8006664:	9a01      	ldr	r2, [sp, #4]
 8006666:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800666a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800666e:	425a      	negs	r2, r3
 8006670:	415a      	adcs	r2, r3
 8006672:	602a      	str	r2, [r5, #0]
 8006674:	e7ee      	b.n	8006654 <__swhatbuf_r+0x1c>
 8006676:	2340      	movs	r3, #64	; 0x40
 8006678:	2000      	movs	r0, #0
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	b016      	add	sp, #88	; 0x58
 800667e:	bd70      	pop	{r4, r5, r6, pc}

08006680 <__smakebuf_r>:
 8006680:	898b      	ldrh	r3, [r1, #12]
 8006682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006684:	079d      	lsls	r5, r3, #30
 8006686:	4606      	mov	r6, r0
 8006688:	460c      	mov	r4, r1
 800668a:	d507      	bpl.n	800669c <__smakebuf_r+0x1c>
 800668c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	2301      	movs	r3, #1
 8006696:	6163      	str	r3, [r4, #20]
 8006698:	b002      	add	sp, #8
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	ab01      	add	r3, sp, #4
 800669e:	466a      	mov	r2, sp
 80066a0:	f7ff ffca 	bl	8006638 <__swhatbuf_r>
 80066a4:	9900      	ldr	r1, [sp, #0]
 80066a6:	4605      	mov	r5, r0
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7ff fc33 	bl	8005f14 <_malloc_r>
 80066ae:	b948      	cbnz	r0, 80066c4 <__smakebuf_r+0x44>
 80066b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b4:	059a      	lsls	r2, r3, #22
 80066b6:	d4ef      	bmi.n	8006698 <__smakebuf_r+0x18>
 80066b8:	f023 0303 	bic.w	r3, r3, #3
 80066bc:	f043 0302 	orr.w	r3, r3, #2
 80066c0:	81a3      	strh	r3, [r4, #12]
 80066c2:	e7e3      	b.n	800668c <__smakebuf_r+0xc>
 80066c4:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <__smakebuf_r+0x7c>)
 80066c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	6020      	str	r0, [r4, #0]
 80066cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d0:	81a3      	strh	r3, [r4, #12]
 80066d2:	9b00      	ldr	r3, [sp, #0]
 80066d4:	6163      	str	r3, [r4, #20]
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	6120      	str	r0, [r4, #16]
 80066da:	b15b      	cbz	r3, 80066f4 <__smakebuf_r+0x74>
 80066dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066e0:	4630      	mov	r0, r6
 80066e2:	f000 f853 	bl	800678c <_isatty_r>
 80066e6:	b128      	cbz	r0, 80066f4 <__smakebuf_r+0x74>
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	f043 0301 	orr.w	r3, r3, #1
 80066f2:	81a3      	strh	r3, [r4, #12]
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	431d      	orrs	r5, r3
 80066f8:	81a5      	strh	r5, [r4, #12]
 80066fa:	e7cd      	b.n	8006698 <__smakebuf_r+0x18>
 80066fc:	08005719 	.word	0x08005719

08006700 <__ascii_mbtowc>:
 8006700:	b082      	sub	sp, #8
 8006702:	b901      	cbnz	r1, 8006706 <__ascii_mbtowc+0x6>
 8006704:	a901      	add	r1, sp, #4
 8006706:	b142      	cbz	r2, 800671a <__ascii_mbtowc+0x1a>
 8006708:	b14b      	cbz	r3, 800671e <__ascii_mbtowc+0x1e>
 800670a:	7813      	ldrb	r3, [r2, #0]
 800670c:	600b      	str	r3, [r1, #0]
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	1c10      	adds	r0, r2, #0
 8006712:	bf18      	it	ne
 8006714:	2001      	movne	r0, #1
 8006716:	b002      	add	sp, #8
 8006718:	4770      	bx	lr
 800671a:	4610      	mov	r0, r2
 800671c:	e7fb      	b.n	8006716 <__ascii_mbtowc+0x16>
 800671e:	f06f 0001 	mvn.w	r0, #1
 8006722:	e7f8      	b.n	8006716 <__ascii_mbtowc+0x16>

08006724 <__malloc_lock>:
 8006724:	4770      	bx	lr

08006726 <__malloc_unlock>:
 8006726:	4770      	bx	lr

08006728 <_read_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4c07      	ldr	r4, [pc, #28]	; (8006748 <_read_r+0x20>)
 800672c:	4605      	mov	r5, r0
 800672e:	4608      	mov	r0, r1
 8006730:	4611      	mov	r1, r2
 8006732:	2200      	movs	r2, #0
 8006734:	6022      	str	r2, [r4, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	f7fa fb08 	bl	8000d4c <_read>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_read_r+0x1e>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	b103      	cbz	r3, 8006746 <_read_r+0x1e>
 8006744:	602b      	str	r3, [r5, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	20000784 	.word	0x20000784

0800674c <__ascii_wctomb>:
 800674c:	b149      	cbz	r1, 8006762 <__ascii_wctomb+0x16>
 800674e:	2aff      	cmp	r2, #255	; 0xff
 8006750:	bf85      	ittet	hi
 8006752:	238a      	movhi	r3, #138	; 0x8a
 8006754:	6003      	strhi	r3, [r0, #0]
 8006756:	700a      	strbls	r2, [r1, #0]
 8006758:	f04f 30ff 	movhi.w	r0, #4294967295
 800675c:	bf98      	it	ls
 800675e:	2001      	movls	r0, #1
 8006760:	4770      	bx	lr
 8006762:	4608      	mov	r0, r1
 8006764:	4770      	bx	lr
	...

08006768 <_fstat_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4c07      	ldr	r4, [pc, #28]	; (8006788 <_fstat_r+0x20>)
 800676c:	2300      	movs	r3, #0
 800676e:	4605      	mov	r5, r0
 8006770:	4608      	mov	r0, r1
 8006772:	4611      	mov	r1, r2
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	f7fa fb2e 	bl	8000dd6 <_fstat>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	d102      	bne.n	8006784 <_fstat_r+0x1c>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	b103      	cbz	r3, 8006784 <_fstat_r+0x1c>
 8006782:	602b      	str	r3, [r5, #0]
 8006784:	bd38      	pop	{r3, r4, r5, pc}
 8006786:	bf00      	nop
 8006788:	20000784 	.word	0x20000784

0800678c <_isatty_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4c06      	ldr	r4, [pc, #24]	; (80067a8 <_isatty_r+0x1c>)
 8006790:	2300      	movs	r3, #0
 8006792:	4605      	mov	r5, r0
 8006794:	4608      	mov	r0, r1
 8006796:	6023      	str	r3, [r4, #0]
 8006798:	f7fa fb2d 	bl	8000df6 <_isatty>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_isatty_r+0x1a>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_isatty_r+0x1a>
 80067a4:	602b      	str	r3, [r5, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20000784 	.word	0x20000784

080067ac <_init>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr

080067b8 <_fini>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	bf00      	nop
 80067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	469e      	mov	lr, r3
 80067c2:	4770      	bx	lr
